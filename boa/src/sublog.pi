#line 1 "d:\\work\\TypeChef\\boa\\src\\cygwin.h" 1


//defines created by gcc on cygwin
//with $ echo |cpp -dM -std=gnu99 -



















































































//#undef socklen_t
//#undef RC_INVOKED
#line 1 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 1
/*
 *  Boa, an http server
 *  Copyright (C) 1999 Larry Doolittle <ldoolitt@boa.org>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 1, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

/* $Id: sublog.c,v 1.6 2002/03/24 22:40:31 jnelson Exp $*/

#line 1 "C:\\cygwin\\usr\\include\\errno.h" 1




typedef int error_t;


#line 1 "C:\\cygwin\\usr\\include\\sys\\errno.h" 1
/* errno is not a global variable, because that would make using it
   non-reentrant.  Instead, its address is returned by the function
   __errno.  */







#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */







#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




#line 1 "C:\\cygwin\\usr\\include\\newlib.h" 1
/* newlib.h.  Generated from newlib.hin by configure.  */
/* newlib.hin.  Manually edited from the output of autoheader to
   remove all PACKAGE_ macros which will collide with any user
   package using newlib header files and having its own package name,
   version, etc...  */



/* EL/IX level */
/* #undef _ELIX_LEVEL */

/* Newlib version */


/* C99 formats support (such as %a, %zu, ...) in IO functions like
 * printf/scanf enabled */


/* long long type support in IO functions like printf/scanf enabled */


/* Register application finalization function using atexit. */
/* #undef _WANT_REGISTER_FINI */

/* long double type support in IO functions like printf/scanf enabled */


/* Positional argument support in printf functions enabled.  */


/* Optional reentrant struct support.  Used mostly on platforms with
   very restricted storage.  */
/* #undef _WANT_REENT_SMALL */

/* Multibyte supported */


/* MB_LEN_MAX */


/* ICONV enabled */
/* #undef _ICONV_ENABLED */

/* Enable ICONV external CCS files loading capabilities */
/* #undef _ICONV_ENABLE_EXTERNAL_CCS */

/* Define if the linker supports .preinit_array/.init_array/.fini_array
 * sections.  */
/* #undef HAVE_INITFINI_ARRAY */

/* True if atexit() may dynamically allocate space for cleanup
   functions.  */


/* True if long double supported.  */


/* True if long double supported and it is equal to double.  */
/* #undef _LDBL_EQ_DBL */

/*
 * Iconv encodings enabled ("to" direction)
 */
/* #undef _ICONV_TO_ENCODING_BIG5 */
/* #undef _ICONV_TO_ENCODING_CP775 */
/* #undef _ICONV_TO_ENCODING_CP850 */
/* #undef _ICONV_TO_ENCODING_CP852 */
/* #undef _ICONV_TO_ENCODING_CP855 */
/* #undef _ICONV_TO_ENCODING_CP866 */
/* #undef _ICONV_TO_ENCODING_EUC_JP */
/* #undef _ICONV_TO_ENCODING_EUC_TW */
/* #undef _ICONV_TO_ENCODING_EUC_KR */
/* #undef _ICONV_TO_ENCODING_ISO_8859_1 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_10 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_11 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_13 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_14 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_15 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_2 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_3 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_4 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_5 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_6 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_7 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_8 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_9 */
/* #undef _ICONV_TO_ENCODING_ISO_IR_111 */
/* #undef _ICONV_TO_ENCODING_KOI8_R */
/* #undef _ICONV_TO_ENCODING_KOI8_RU */
/* #undef _ICONV_TO_ENCODING_KOI8_U */
/* #undef _ICONV_TO_ENCODING_KOI8_UNI */
/* #undef _ICONV_TO_ENCODING_UCS_2 */
/* #undef _ICONV_TO_ENCODING_UCS_2_INTERNAL */
/* #undef _ICONV_TO_ENCODING_UCS_2BE */
/* #undef _ICONV_TO_ENCODING_UCS_2LE */
/* #undef _ICONV_TO_ENCODING_UCS_4 */
/* #undef _ICONV_TO_ENCODING_UCS_4_INTERNAL */
/* #undef _ICONV_TO_ENCODING_UCS_4BE */
/* #undef _ICONV_TO_ENCODING_UCS_4LE */
/* #undef _ICONV_TO_ENCODING_US_ASCII */
/* #undef _ICONV_TO_ENCODING_UTF_16 */
/* #undef _ICONV_TO_ENCODING_UTF_16BE */
/* #undef _ICONV_TO_ENCODING_UTF_16LE */
/* #undef _ICONV_TO_ENCODING_UTF_8 */
/* #undef _ICONV_TO_ENCODING_WIN_1250 */
/* #undef _ICONV_TO_ENCODING_WIN_1251 */
/* #undef _ICONV_TO_ENCODING_WIN_1252 */
/* #undef _ICONV_TO_ENCODING_WIN_1253 */
/* #undef _ICONV_TO_ENCODING_WIN_1254 */
/* #undef _ICONV_TO_ENCODING_WIN_1255 */
/* #undef _ICONV_TO_ENCODING_WIN_1256 */
/* #undef _ICONV_TO_ENCODING_WIN_1257 */
/* #undef _ICONV_TO_ENCODING_WIN_1258 */

/*
 * Iconv encodings enabled ("from" direction)
 */
/* #undef _ICONV_FROM_ENCODING_BIG5 */
/* #undef _ICONV_FROM_ENCODING_CP775 */
/* #undef _ICONV_FROM_ENCODING_CP850 */
/* #undef _ICONV_FROM_ENCODING_CP852 */
/* #undef _ICONV_FROM_ENCODING_CP855 */
/* #undef _ICONV_FROM_ENCODING_CP866 */
/* #undef _ICONV_FROM_ENCODING_EUC_JP */
/* #undef _ICONV_FROM_ENCODING_EUC_TW */
/* #undef _ICONV_FROM_ENCODING_EUC_KR */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_1 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_10 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_11 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_13 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_14 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_15 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_2 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_3 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_4 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_5 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_6 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_7 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_8 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_9 */
/* #undef _ICONV_FROM_ENCODING_ISO_IR_111 */
/* #undef _ICONV_FROM_ENCODING_KOI8_R */
/* #undef _ICONV_FROM_ENCODING_KOI8_RU */
/* #undef _ICONV_FROM_ENCODING_KOI8_U */
/* #undef _ICONV_FROM_ENCODING_KOI8_UNI */
/* #undef _ICONV_FROM_ENCODING_UCS_2 */
/* #undef _ICONV_FROM_ENCODING_UCS_2_INTERNAL */
/* #undef _ICONV_FROM_ENCODING_UCS_2BE */
/* #undef _ICONV_FROM_ENCODING_UCS_2LE */
/* #undef _ICONV_FROM_ENCODING_UCS_4 */
/* #undef _ICONV_FROM_ENCODING_UCS_4_INTERNAL */
/* #undef _ICONV_FROM_ENCODING_UCS_4BE */
/* #undef _ICONV_FROM_ENCODING_UCS_4LE */
/* #undef _ICONV_FROM_ENCODING_US_ASCII */
/* #undef _ICONV_FROM_ENCODING_UTF_16 */
/* #undef _ICONV_FROM_ENCODING_UTF_16BE */
/* #undef _ICONV_FROM_ENCODING_UTF_16LE */
/* #undef _ICONV_FROM_ENCODING_UTF_8 */
/* #undef _ICONV_FROM_ENCODING_WIN_1250 */
/* #undef _ICONV_FROM_ENCODING_WIN_1251 */
/* #undef _ICONV_FROM_ENCODING_WIN_1252 */
/* #undef _ICONV_FROM_ENCODING_WIN_1253 */
/* #undef _ICONV_FROM_ENCODING_WIN_1254 */
/* #undef _ICONV_FROM_ENCODING_WIN_1255 */
/* #undef _ICONV_FROM_ENCODING_WIN_1256 */
/* #undef _ICONV_FROM_ENCODING_WIN_1257 */
/* #undef _ICONV_FROM_ENCODING_WIN_1258 */


#line 15 "C:\\cygwin\\usr\\include\\_ansi.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\config.h" 1



#line 1 "C:\\cygwin\\usr\\include\\machine\\ieeefp.h" 1


/* This file can define macros to choose variations of the IEEE float
   format:

   _FLT_LARGEST_EXPONENT_IS_NORMAL

	Defined if the float format uses the largest exponent for finite
	numbers rather than NaN and infinity representations.  Such a
	format cannot represent NaNs or infinities at all, but it's FLT_MAX
	is twice the IEEE value.

   _FLT_NO_DENORMALS

	Defined if the float format does not support IEEE denormals.  Every
	float with a zero exponent is taken to be a zero representation.
 
   ??? At the moment, there are no equivalent macros above for doubles and
   the macros are not fully supported by --enable-newlib-hw-fp.

   __IEEE_BIG_ENDIAN

        Defined if the float format is big endian.  This is mutually exclusive
        with __IEEE_LITTLE_ENDIAN.

   __IEEE_LITTLE_ENDIAN
 
        Defined if the float format is little endian.  This is mutually exclusive
        with __IEEE_BIG_ENDIAN.

   Note that one of __IEEE_BIG_ENDIAN or __IEEE_LITTLE_ENDIAN must be specified for a
   platform or error will occur.

   __IEEE_BYTES_LITTLE_ENDIAN

        This flag is used in conjunction with __IEEE_BIG_ENDIAN to describe a situation 
	whereby multiple words of an IEEE floating point are in big endian order, but the
	words themselves are little endian with respect to the bytes.

   _DOUBLE_IS_32BITS 

        This is used on platforms that support double by using the 32-bit IEEE
        float type.

   _FLOAT_ARG

        This represents what type a float arg is passed as.  It is used when the type is
        not promoted to double.
	
*/



















































































































/* necv70 was __IEEE_LITTLE_ENDIAN. */











































































































































#line 4 "C:\\cygwin\\usr\\include\\sys\\config.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */







/* RTEMS adheres to POSIX -- 1003.1b with some features from annexes.  */



















































/* XMK loosely adheres to POSIX -- 1003.1 */
















/* #define _POSIX_ASYNCHRONOUS_IO		    -1 */
/* #define _POSIX_BARRIERS			    -1 */

/* #define _POSIX_CLOCK_SELECTION		    -1 */
/* #define _POSIX_CPUTIME			    -1 */




/* #define _POSIX_MEMLOCK			    -1 */





/* #define _POSIX_PRIORITIZED_IO		    -1 */









/* #define _POSIX_SPAWN				    -1 */
/* #define _POSIX_SPIN_LOCKS			    -1 */
/* #define _POSIX_SPORADIC_SERVER		    -1 */

/* #define _POSIX_THREAD_ATTR_STACKADDR		    -1 */

/* #define _POSIX_THREAD_CPUTIME		    -1 */
/* #define _POSIX_THREAD_PRIO_INHERIT		    -1 */
/* #define _POSIX_THREAD_PRIO_PROTECT		    -1 */



/* #define _POSIX_THREAD_SPORADIC_SERVER	    -1 */

/* #define _POSIX_TIMEOUTS			    -1 */

/* #define _POSIX_TRACE				    -1 */
/* #define _POSIX_TRACE_EVENT_FILTER		    -1 */
/* #define _POSIX_TRACE_INHERIT			    -1 */
/* #define _POSIX_TRACE_LOG			    -1 */
/* #define _POSIX_TYPED_MEMORY_OBJECTS		    -1 */




/* #define _POSIX2_FORT_DEV			    -1 */
/* #define _POSIX2_FORT_RUN			    -1 */
/* #define _POSIX2_LOCALEDEF			    -1 */
/* #define _POSIX2_PBS				    -1 */
/* #define _POSIX2_PBS_ACCOUNTING		    -1 */
/* #define _POSIX2_PBS_CHECKPOINT		    -1 */
/* #define _POSIX2_PBS_LOCATE			    -1 */
/* #define _POSIX2_PBS_MESSAGE			    -1 */
/* #define _POSIX2_PBS_TRACK			    -1 */












/* #define _XOPEN_LEGACY			    -1 */
/* #define _XOPEN_REALTIME			    -1 */
/* #define _XOPEN_REALTIME_THREADS		    -1 */

/* #define _XOPEN_STREAMS			    -1 */
/* #define _XOPEN_UNIX				    -1 */



/* Per the permission given in POSIX.1-2008 section 2.2.1, define
 * _POSIX_C_SOURCE if _XOPEN_SOURCE is defined and _POSIX_C_SOURCE is not.
 * (_XOPEN_SOURCE indicates that XSI extensions are desired by an application.)
 * This permission is first granted in 2008, but use it for older ones, also.
 * Allow for _XOPEN_SOURCE to be empty (from the earliest form of it, before it
 * was required to have specific values).
 */

  
    
   
    
   
    
   
    
  





#line 5 "C:\\cygwin\\usr\\include\\sys\\config.h" 2

/* exceptions first */






/* 16 bit integer machines */
































































/* For the PowerPC eabi, force the _impure_ptr to be in .sdata */








/* Configure small REENT structure for Xilinx MicroBlaze platforms */










































/* This block should be kept in sync with GCC's limits.h.  The point
   of having these definitions here is to not include limits.h, which
   would pollute the user namespace, while still using types of the
   the correct widths when deciding how to define __int32_t and
   __int64_t.  */


















/* End of block that should be kept in sync with GCC's limits.h.  */














#line 1 "C:\\cygwin\\usr\\include\\cygwin\\config.h" 1
/* cygwin/config.h header file for Cygwin.

   This wraps Cygwin configuration setting which were in newlib's
   sys/config.h before.  This way we can manaage our configuration
   setting without bothering newlib.

   Copyright 2003, 2007, 2008, 2009, 2010 Red Hat, Inc.
   Written by C. Vinschen.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */









/* The following provides an inline version of __getreent() for newlib,
   which will be used throughout the library whereever there is a _r
   version of a function that takes _REENT.  This saves the overhead
   of a function call for what amounts to a simple computation.

   The definition below is essentially equivalent to the one in cygtls.h
   (&_my_tls.local_clib) however it uses a fixed precomputed
   offset rather than dereferencing a field of a structure.

   Including tlsoffets.h here in order to get this constant offset
   tls_local_clib is a bit of a hack, but the alternative would require
   dragging the entire definition of struct _cygtls (a large and complex
   Cygwin internal data structure) into newlib.  The machinery to
   compute these offsets already exists for the sake of gendef so
   we might as well just use it here.  */








/* The following block of macros is required to build newlib correctly for
   Cygwin.  Changing them in applications has no or not the desired effect.
   Just leave them alone. */
























#line 71 "C:\\cygwin\\usr\\include\\sys\\config.h" 2














/* Define return type of read/write routines.  In POSIX, the return type
   for read()/write() is "ssize_t" but legacy newlib code has been using
   "int" for some time.  If not specified, "int" is defaulted.  */








/* See if small reent asked for at configuration time and
   is not chosen by the platform by default.  */





/* If _MB_EXTENDED_CHARSETS_ALL is set, we want all of the extended
   charsets.  The extended charsets add a few functions and a couple
   of tables of a few K each. */





#line 16 "C:\\cygwin\\usr\\include\\_ansi.h" 2

/* First try to figure out whether we really are in an ANSI C environment.  */
/* FIXME: This probably needs some work.  Perhaps sys/config.h can be
   prevailed upon to give us a clue.  */




/*  ISO C++.  */









































































/* Support gcc's __attribute__ facility.  */






/*  The traditional meaning of 'extern inline' for GCC is not
  to emit the function body unless the address is explicitly
  taken.  However this behaviour is changing to match the C99
  standard, which uses 'extern inline' to indicate that the
  function body *must* be emitted.  If we are using GCC, but do
  not have the new behaviour, we need to use extern inline; if
  we are using a new GCC with the C99-compatible behaviour, or
  a non-GCC compiler (which we will have to hope is C99, since
  there is no other way to achieve the effect of omitting the
  function if it isn't referenced) we just use plain 'inline',
  which c99 defines to mean more-or-less the same as the Gnu C
  'extern inline'.  */

/* We're using GCC, but without the new C99-compatible behaviour.  */







#line 11 "C:\\cygwin\\usr\\include\\sys\\reent.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\_types.h" 1
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  This file lives in the `sys' directory so targets can provide
   their own if desired (or they can put target dependant conditionals here).
*/




#line 1 "C:\\cygwin\\usr\\include\\machine\\_types.h" 1
/*
 *  $Id: _types.h,v 1.3 2007/09/07 21:16:25 jjohnstn Exp $
 */



#line 1 "C:\\cygwin\\usr\\include\\machine\\_default_types.h" 1
/*
 *  $Id: _default_types.h,v 1.2 2008/06/11 22:14:54 jjohnstn Exp $
 */







/*
 * Guess on types by examining *_MIN / *_MAX defines.
 */

/* GCC >= 3.3.0 has __<val>__ implicitly defined. */







typedef signed char __int8_t ;
typedef unsigned char __uint8_t ;







typedef signed short __int16_t;
typedef unsigned short __uint16_t;







typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;









typedef signed int __int32_t;
typedef unsigned int __uint32_t;















typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;




















typedef signed long long __int64_t;
typedef unsigned long long __uint64_t;


/* POSIX mandates LLONG_MAX in <limits.h> */
















#line 7 "C:\\cygwin\\usr\\include\\machine\\_types.h" 2

#line 12 "C:\\cygwin\\usr\\include\\sys\\_types.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\lock.h" 1
/* sys/lock.h

   Copyright 2004 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




typedef void *_LOCK_T;


/*
 * This must match cygwins PTHREAD_XXX_MUTEX_INITIALIZER_NP which are
 * defined in <pthread.h>
 */























void __cygwin_lock_init(_LOCK_T *);
void __cygwin_lock_init_recursive(_LOCK_T *);
void __cygwin_lock_fini(_LOCK_T *);
void __cygwin_lock_lock(_LOCK_T *);
int __cygwin_lock_trylock(_LOCK_T *);
void __cygwin_lock_unlock(_LOCK_T *);




#line 13 "C:\\cygwin\\usr\\include\\sys\\_types.h" 2


typedef long _off_t;






typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;


__extension__ typedef long long _off64_t;

/*
 * We need fpos_t for the following, but it doesn't have a leading "_",
 * so we use _fpos_t instead.
 */

typedef long _fpos_t;		/* XXX must match off_t in <sys/types.h> */
				/* (and must be `long' for now) */



typedef _off64_t _fpos64_t;




typedef int _ssize_t;





#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */










































































































typedef unsigned int wint_t;



/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 39 "C:\\cygwin\\usr\\include\\sys\\_types.h" 2


/* Conversion state information.  */
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;		/* Value so far.  */
} _mbstate_t;


typedef _LOCK_T _flock_t;


/* Iconv descriptor type */
typedef void *_iconv_t;


#line 12 "C:\\cygwin\\usr\\include\\sys\\reent.h" 2






typedef unsigned long __ULong;












struct _reent;

/*
 * If _REENT_SMALL is defined, we make struct _reent as small as possible,
 * by having nearly everything possible allocated at first use.
 */

struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};

/* needed by reentrant structure */
struct __tm
{
  int   __tm_sec;
  int   __tm_min;
  int   __tm_hour;
  int   __tm_mday;
  int   __tm_mon;
  int   __tm_year;
  int   __tm_wday;
  int   __tm_yday;
  int   __tm_isdst;
};

/*
 * atexit() support.
 */



struct _on_exit_args {
	void *  _fnargs[32];	        /* user fn args */
	void *	_dso_handle[32];
	/* Bitmask is set if user function takes arguments.  */
	__ULong _fntypes;           	        /* type of exit routine -
				   Must have at least _ATEXIT_SIZE bits */
	/* Bitmask is set if function was registered via __cxa_atexit.  */
	__ULong _is_cxa;
};



	
	
	
        


struct _atexit {
	struct	_atexit *_next;			/* next in list */
	int	_ind;				/* next index in this table */
	/* Some entries may already have been called, and will be NULL.  */
	void	(*_fns[32])(void);	/* the table itself */
        struct _on_exit_args _on_exit_args;
};

/*
 * Stdio buffers.
 *
 * This and __FILE are defined here because we need them for struct _reent,
 * but we don't want stdio.h included when stdlib.h is.
 */

struct __sbuf {
	unsigned char *_base;
	int	_size;
};

/*
 * Stdio state variables.
 *
 * The following always hold:
 *
 *	if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
 *		_lbfsize is -_bf._size, else _lbfsize is 0
 *	if _flags&__SRD, _w is 0
 *	if _flags&__SWR, _r is 0
 *
 * This ensures that the getc and putc macros (or inline functions) never
 * try to write or read from a file that is in `read' or `write' mode.
 * (Moreover, they can, and do, automatically switch from read mode to
 * write mode, and back, on "r+" and "w+" files.)
 *
 * _lbfsize is used only to make the inline line-buffered output stream
 * code as compact as possible.
 *
 * _ub, _up, and _ur are used when ungetc() pushes back more characters
 * than fit in the current _bf, or when ungetc() pushes back a character
 * that does not match the previous one in _bf.  When this happens,
 * _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
 * _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
 */








  
  
  
  
  
  
  

  

















struct __sFILE {
  unsigned char *_p;	/* current position in (some) buffer */
  int	_r;		/* read space left for getc() */
  int	_w;		/* write space left for putc() */
  short	_flags;		/* flags, below; this FILE is free if 0 */
  short	_file;		/* fileno, if Unix descriptor, else -1 */
  struct __sbuf _bf;	/* the buffer (at least 1 byte, if !NULL) */
  int	_lbfsize;	/* 0 or -_bf._size, for inline putc */


  

  /* operations */
  void *	_cookie;	/* cookie passed to io functions */

  _ssize_t (__attribute__((__cdecl__)) * _read) (struct _reent *, void *,
 char *, int);
  _ssize_t (__attribute__((__cdecl__)) * _write) (struct _reent *, void *,
 const char *, int);
  _fpos_t (__attribute__((__cdecl__)) * _seek) (struct _reent *, void *, _fpos_t, int);
  int (__attribute__((__cdecl__)) * _close) (struct _reent *, void *);

  /* separate buffer for long sequences of ungetc() */
  struct __sbuf _ub;	/* ungetc buffer */
  unsigned char *_up;	/* saved _p when _p is doing ungetc data */
  int	_ur;		/* saved _r when _r is counting ungetc data */

  /* tricks to meet minimum requirements even when malloc() fails */
  unsigned char _ubuf[3];	/* guarantee an ungetc() buffer */
  unsigned char _nbuf[1];	/* guarantee a getc() buffer */

  /* separate buffer for fgetline() when line crosses buffer boundary */
  struct __sbuf _lb;	/* buffer for fgetline() */

  /* Unix stdio files get aligned to block boundaries on fseek() */
  int	_blksize;	/* stat.st_blksize (may be != _bf._size) */
  int	_offset;	/* current lseek offset */


  struct _reent *_data;	/* Here for binary compatibility? Remove? */


  _flock_t _lock;	/* for thread-safety locking */

  _mbstate_t _mbstate;	/* for wide char stdio functions. */
  int   _flags2;        /* for future use */
};







struct __sFILE64 {
  unsigned char *_p;	/* current position in (some) buffer */
  int	_r;		/* read space left for getc() */
  int	_w;		/* write space left for putc() */
  short	_flags;		/* flags, below; this FILE is free if 0 */
  short	_file;		/* fileno, if Unix descriptor, else -1 */
  struct __sbuf _bf;	/* the buffer (at least 1 byte, if !NULL) */
  int	_lbfsize;	/* 0 or -_bf._size, for inline putc */

  struct _reent *_data;

  /* operations */
  void *	_cookie;	/* cookie passed to io functions */

  _ssize_t (__attribute__((__cdecl__)) * _read) (struct _reent *, void *,
 char *, int);
  _ssize_t (__attribute__((__cdecl__)) * _write) (struct _reent *, void *,
 const char *, int);
  _fpos_t (__attribute__((__cdecl__)) * _seek) (struct _reent *, void *, _fpos_t, int);
  int (__attribute__((__cdecl__)) * _close) (struct _reent *, void *);

  /* separate buffer for long sequences of ungetc() */
  struct __sbuf _ub;	/* ungetc buffer */
  unsigned char *_up;	/* saved _p when _p is doing ungetc data */
  int	_ur;		/* saved _r when _r is counting ungetc data */

  /* tricks to meet minimum requirements even when malloc() fails */
  unsigned char _ubuf[3];	/* guarantee an ungetc() buffer */
  unsigned char _nbuf[1];	/* guarantee a getc() buffer */

  /* separate buffer for fgetline() when line crosses buffer boundary */
  struct __sbuf _lb;	/* buffer for fgetline() */

  /* Unix stdio files get aligned to block boundaries on fseek() */
  int	_blksize;	/* stat.st_blksize (may be != _bf._size) */
  int   _flags2;        /* for future use */

  _off64_t _offset;     /* current lseek offset */
  _fpos64_t (__attribute__((__cdecl__)) * _seek64) (struct _reent *, void *, _fpos64_t, int);


  _flock_t _lock;	/* for thread-safety locking */

  _mbstate_t _mbstate;	/* for wide char stdio functions. */
};
typedef struct __sFILE64 __FILE;




struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};

/*
 * rand48 family support
 *
 * Copyright (c) 1993 Martin Birgmeier
 * All rights reserved.
 *
 * You may redistribute unmodified or modified versions of this source
 * code provided that the above copyright notice and this and the
 * following conditions are retained.
 *
 * This software is provided ``as is'', and comes with no warranties
 * of any kind. I shall in no event be liable for anything that happens
 * to anyone/anything when using this software.
 */







struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;

  
  

};

/* How big the some arrays are.  */




/*
 * struct _reent
 *
 * This structure contains *all* globals needed by the library.
 * It's raison d'etre is to facilitate threads by making all library routines
 * reentrant.  IE: All state information is contained here.
 */




  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  














































































































































































struct _reent
{
  int _errno;			/* local copy of errno */

  /* FILE is a big struct and may change over time.  To try to achieve binary
     compatibility with future versions, put stdin,stdout,stderr here.
     These are pointers into member __sf defined below.  */
  __FILE *_stdin, *_stdout, *_stderr;

  int  _inc;			/* used by tmpnam */
  char _emergency[25];

  int _current_category;	/* used by setlocale */
  const char *_current_locale;

  int __sdidinit;		/* 1 means stdio has been init'd */

  void (__attribute__((__cdecl__)) * __cleanup) (struct _reent *);

  /* used by mprec routines */
  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;

  /* used by some fp conversion routines */
  int _cvtlen;			/* should be size_t */
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
	  int _h_errno;
        } _reent;
  /* Two next two fields were once used by malloc.  They are no longer
     used. They are used to preserve the space used before so as to
     allow addition of new reent fields and keep binary compatibility.   */
      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;

  /* atexit stuff */
  struct _atexit *_atexit;	/* points to head of LIFO stack */
  struct _atexit _atexit0;	/* one guaranteed table, required by ANSI */

  /* signal info */
  void (**(_sig_func))(int);

  /* These are here last so that __FILE can grow without changing the offsets
     of the above members (on the off chance that future binary compatibility
     would be broken otherwise).  */
  struct _glue __sglue;		/* root of glue chain */
  __FILE __sf[3];  		/* first three file descriptors */
};


















































































































































/* This value is used in stdlib/misc.c.  reent/reent.c has to know it
   as well to make sure the freelist is correctly free'd.  Therefore
   we define it here, rather than in stdlib/misc.c, as before. */


/*
 * All references to struct _reent are via this pointer.
 * Internally, newlib routines that need to reference it should use _REENT.
 */




extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);

/* #define _REENT_ONLY define this to get only reentrant routines */




  struct _reent * __attribute__((__cdecl__)) __getreent (void);












#line 9 "C:\\cygwin\\usr\\include\\sys\\errno.h" 2



extern int *__errno (void);

/* Please don't use these variables directly.
   Use strerror instead. */
extern __attribute__((dllimport)) const char * const _sys_errlist[];
extern __attribute__((dllimport)) int _sys_nerr;

extern __attribute__((dllimport)) const char * const sys_errlist[];
extern __attribute__((dllimport)) int sys_nerr;





































































































































































#line 6 "C:\\cygwin\\usr\\include\\errno.h" 2


#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\stdio.h" 1
/*
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	@(#)stdio.h	5.3 (Berkeley) 3/15/86
 */

/*
 * NB: to fit things in six character monocase externals, the
 * stdio code uses the prefix `__s' for stdio objects, typically
 * followed by a three-character attempt at a mnemonic.
 */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 29 "C:\\cygwin\\usr\\include\\stdio.h" 2




#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */











































typedef unsigned int size_t;























/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 33 "C:\\cygwin\\usr\\include\\stdio.h" 2


#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stdarg.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.15  Variable arguments  <stdarg.h>
 */



#if !(defined(RC_INVOKED))






/* Define __gnuc_va_list.  */



typedef __builtin_va_list __gnuc_va_list;

/* Define the standard macros for the user,
   if this invocation was from the user program.  */












































































#endif


#line 35 "C:\\cygwin\\usr\\include\\stdio.h" 2

/*
 * <sys/reent.h> defines __FILE, _fpos_t.
 * They must be defined there because struct _reent needs them (and we don't
 * want reent.h to include this file.
 */

#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */





































  
  
  





  
  
  
  
  
  
  
  
  









	
	
	
	
	
	




	
	
	
        



	
	
	
	
        










	
	


































  
  
  
  
  
  
  

  


















  
  
  
  
  
  
  


  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  


  


  

  
  









  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  








  
  
  
























  
  
  

  
  



















  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  
















































































































































































  

  


  

  
  

  
  

  

  

  
  
  
  
  

  
  
  

  
    
      
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
	  
        
  


      
        

          
          
        
    

  
  
  

  
  

  


  
  










































































































































































  












#line 43 "C:\\cygwin\\usr\\include\\stdio.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */


#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 21 "C:\\cygwin\\usr\\include\\sys\\types.h" 2




#line 1 "C:\\cygwin\\usr\\include\\machine\\_types.h" 1
/*
 *  $Id: _types.h,v 1.3 2007/09/07 21:16:25 jjohnstn Exp $
 */





#line 24 "C:\\cygwin\\usr\\include\\sys\\types.h" 2






























#line 1 "C:\\cygwin\\usr\\include\\sys\\_types.h" 1
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  This file lives in the `sys' directory so targets can provide
   their own if desired (or they can put target dependant conditionals here).
*/

































				




















  
  
  
    
    
  










#line 49 "C:\\cygwin\\usr\\include\\sys\\types.h" 2


#if defined(GO32)

#endif

#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 53 "C:\\cygwin\\usr\\include\\sys\\types.h" 2
#line 1 "C:\\cygwin\\usr\\include\\machine\\types.h" 1



/*
 *  The following section is RTEMS specific and is needed to more
 *  closely match the types defined in the BSD machine/types.h.
 *  This is needed to let the RTEMS/BSD TCP/IP stack compile.
 */









typedef long int __off_t;
typedef int __pid_t;

__extension__ typedef long long int __loff_t;





#line 54 "C:\\cygwin\\usr\\include\\sys\\types.h" 2

/* To ensure the stat struct's layout doesn't change when sizeof(int), etc.
   changes, we assume sizeof short and long never change and have all types
   used to define struct stat use them and not int where possible.
   Where not possible, _ST_INTxx are used.  It would be preferable to not have
   such assumptions, but until the extra fluff is necessary, it's avoided.
   No 64 bit targets use stat yet.  What to do about them is postponed
   until necessary.  */










/* also defined in mingw/gmon.h and in w32api/winsock[2].h */
typedef	unsigned char	u_char;
typedef	unsigned short	u_short;
typedef	unsigned int	u_int;
typedef	unsigned long	u_long;


typedef	unsigned short	ushort;		/* System V compatibility */
typedef	unsigned int	uint;		/* System V compatibility */


typedef unsigned long clock_t;



typedef long time_t;


/* Time Value Specification Structures, P1003.1b-1993, p. 261 */

struct timespec {
  time_t  tv_sec;   /* Seconds */
  long    tv_nsec;  /* Nanoseconds */
};

struct itimerspec {
  struct timespec  it_interval;  /* Timer period */
  struct timespec  it_value;     /* Timer expiration */
};

typedef	long	daddr_t;
typedef	char *	caddr_t;








#if defined(GO32)
typedef unsigned long vm_offset_t;
typedef unsigned long vm_size_t;



typedef signed char int8_t;
typedef unsigned char u_int8_t;
typedef short int16_t;
typedef unsigned short u_int16_t;
typedef int int32_t;
typedef unsigned int u_int32_t;
typedef long long int64_t;
typedef unsigned long long u_int64_t;
typedef int32_t register_t;
#endif
/*
 * All these should be machine specific - right now they are all broken.
 * However, for all of Cygnus' embedded targets, we want them to all be
 * the same.  Otherwise things like sizeof (struct stat) might depend on
 * how the file was compiled (e.g. -mint16 vs -mint32, etc.).
 */










typedef int pid_t;




typedef _ssize_t ssize_t;

















typedef unsigned short nlink_t;

/* We don't define fd_set and friends if we are compiling POSIX
   source, or if we have included (or may include as indicated
   by __USE_W32_SOCKETS) the W32api winsock[2].h header which
   defines Windows versions of them.   Note that a program which
   includes the W32api winsock[2].h header must know what it is doing;
   it must not call the cygwin32 select function.
*/



/*
 * Select uses bit masks of file descriptors in longs.
 * These macros manipulate such bit fields (the filesystem macros use chars).
 * FD_SETSIZE may be defined by the user, but the default here
 * should be >= NOFILE (param.h).
 */
#if !(defined(FD_SETSIZE))

#endif
typedef	long	fd_mask;

#if !(defined(howmany))

#endif
/* We use a macro for fd_set so that including Sockets.h afterwards
   can work.  */
typedef	struct _types_fd_set {
	fd_mask	fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;



















typedef unsigned long clockid_t;



typedef unsigned long timer_t;


typedef unsigned long useconds_t;
typedef long suseconds_t;

#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */




































































































































































  
    
   
    
   
    
   
    
  





#line 195 "C:\\cygwin\\usr\\include\\sys\\types.h" 2


/* Cygwin will probably never have full posix compliance due to little things
 * like an inability to set the stackaddress. Cygwin is also using void *  
 * pointers rather than structs to ensure maximum binary compatability with
 * previous releases.
 * This means that we don't use the types defined here, but rather in
 * <cygwin/types.h>
 */


















                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  



#line 1 "C:\\cygwin\\usr\\include\\cygwin\\types.h" 1
/* types.h

   Copyright 2001, 2002, 2003, 2005, 2006, 2010 Red Hat Inc.
   Written by Robert Collins <rbtcollins@hotmail.com>

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */








#line 1 "C:\\cygwin\\usr\\include\\sys\\sysmacros.h" 1
/* sys/sysmacros.h

   Copyright 1998, 2001, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */









#line 18 "C:\\cygwin\\usr\\include\\cygwin\\types.h" 2
#line 1 "C:\\cygwin\\usr\\include\\stdint.h" 1
/* stdint.h - integer types

   Copyright 2003, 2006, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




/* Exact-width integer types */



typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;


typedef unsigned int uint32_t;

typedef unsigned long long uint64_t;

/* Minimum-width integer types */

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;

typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

/* Fastest minimum-width integer types */

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;

typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;

/* Integer types capable of holding object pointers */



typedef int intptr_t;

typedef unsigned int uintptr_t;

/* Greatest-width integer types */

typedef long long intmax_t;
typedef unsigned long long uintmax_t;

/* Limits of exact-width integer types */
















/* Limits of minimum-width integer types */
















/* Limits of fastest minimum-width integer types */
















/* Limits of integer types capable of holding object pointers */





/* Limits of greatest-width integer types */





/* Limits of other integer types */

#if !(defined(PTRDIFF_MIN))


#endif
#if !(defined(SIG_ATOMIC_MIN))

#endif
#if !(defined(SIG_ATOMIC_MAX))

#endif
#if !(defined(SIZE_MAX))

#endif
#if !(defined(WCHAR_MIN))



#if 1


#endif
#endif
#if !(defined(WINT_MIN))


#endif
/* Macros for minimum-width integer constant expressions */











/* Macros for greatest-width integer constant expressions */





#line 19 "C:\\cygwin\\usr\\include\\cygwin\\types.h" 2
#line 1 "C:\\cygwin\\usr\\include\\endian.h" 1
/* endian.h

   Copyright 2005, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\sys\\config.h" 1

















































































































































































































#line 14 "C:\\cygwin\\usr\\include\\endian.h" 2










/*#ifdef  __USE_BSD*/




/*#endif*/







#line 1 "C:\\cygwin\\usr\\include\\byteswap.h" 1
/* byteswap.h

Copyright 2005 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







static __inline unsigned short
bswap_16 (unsigned short __x)
{
  return (__x >> 8) | (__x << 8);
}

static __inline unsigned int
bswap_32 (unsigned int __x)
{
  return (bswap_16 (__x & 0xffff) << 16) | (bswap_16 (__x >> 16));
}

static __inline unsigned long long
bswap_64 (unsigned long long __x)
{
  return (((unsigned long long) bswap_32 (__x & 0xffffffffull)) << 32) | (bswap_32 (__x >> 32));
}





#line 23 "C:\\cygwin\\usr\\include\\endian.h" 2







































#line 20 "C:\\cygwin\\usr\\include\\cygwin\\types.h" 2



typedef struct timespec timespec_t;



typedef struct timespec timestruc_t;



typedef _off64_t off_t;

typedef __loff_t loff_t;



typedef short __dev16_t;
typedef unsigned long __dev32_t;
typedef __dev32_t dev_t;



typedef long blksize_t;



typedef long __blkcnt32_t;
typedef long long __blkcnt64_t;
typedef __blkcnt64_t  blkcnt_t;



typedef unsigned long fsblkcnt_t;



typedef unsigned long fsfilcnt_t;



typedef unsigned short __uid16_t;
typedef unsigned long  __uid32_t;
typedef __uid32_t uid_t;



typedef unsigned short __gid16_t;
typedef unsigned long  __gid32_t;
typedef __gid32_t gid_t;



typedef unsigned long __ino32_t;
typedef unsigned long long __ino64_t;
typedef __ino64_t ino_t;

/* Generic ID type, must match at least pid_t, uid_t and gid_t in size. */


typedef unsigned long id_t;



	
	
	
	
	
	



	
	
	
	
	


struct flock {
	short	 l_type;	/* F_RDLCK, F_WRLCK, or F_UNLCK */
	short	 l_whence;	/* flag to choose starting offset */
	off_t	 l_start;	/* relative offset, in bytes */
	off_t	 l_len;		/* length, in bytes; 0 means lock to EOF */
	pid_t	 l_pid;		/* returned with F_GETLK */
};



typedef long long key_t;






typedef unsigned long vm_offset_t;



typedef unsigned long vm_size_t;



typedef void *vm_object_t;



typedef unsigned char u_int8_t;



typedef __uint16_t u_int16_t;



typedef __uint32_t u_int32_t;



typedef __uint64_t u_int64_t;



typedef __int32_t register_t;



typedef char *addr_t;



typedef unsigned mode_t;



typedef struct __pthread_t {char __dummy;} *pthread_t;
typedef struct __pthread_mutex_t {char __dummy;} *pthread_mutex_t;

typedef struct __pthread_key_t {char __dummy;} *pthread_key_t;
typedef struct __pthread_attr_t {char __dummy;} *pthread_attr_t;
typedef struct __pthread_mutexattr_t {char __dummy;} *pthread_mutexattr_t;
typedef struct __pthread_condattr_t {char __dummy;} *pthread_condattr_t;
typedef struct __pthread_cond_t {char __dummy;} *pthread_cond_t;

  /* These variables are not user alterable. This means you!. */
typedef struct
{
  pthread_mutex_t mutex;
  int state;
}
pthread_once_t;
typedef struct __pthread_rwlock_t {char __dummy;} *pthread_rwlock_t;
typedef struct __pthread_rwlockattr_t {char __dummy;} *pthread_rwlockattr_t;






















#line 342 "C:\\cygwin\\usr\\include\\sys\\types.h" 2


/* POSIX Barrier Types */




  

  



/* POSIX Spin Lock Types */




/* POSIX Reader/Writer Lock Types */





  

  








#line 44 "C:\\cygwin\\usr\\include\\stdio.h" 2



typedef __FILE FILE;


typedef _fpos64_t fpos_t;






#line 1 "C:\\cygwin\\usr\\include\\sys\\stdio.h" 1
/* sys/stdio.h

   Copyright 2004, 2005, 2006, 2007, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\sys\\cdefs.h" 1
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD: src/sys/sys/cdefs.h,v 1.54 2002/05/11 03:58:24 alfred Exp $
 */





/*
 * Note: the goal here is not compatibility to K&R C. Since we know that we
 * have GCC which understands ANSI C perfectly well, we make use of this.
 */





































































#line 14 "C:\\cygwin\\usr\\include\\sys\\stdio.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\lock.h" 1
/* sys/lock.h

   Copyright 2004 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */












































#line 15 "C:\\cygwin\\usr\\include\\sys\\stdio.h" 2

/* These definitions should be kept in sync with those in the newlib
   header of the same name (newlib/libc/include/sys/stdio.h).  */

















ssize_t	__attribute__((__cdecl__)) getline (char **, size_t *, FILE *);
ssize_t	__attribute__((__cdecl__)) getdelim (char **, size_t *, int, FILE *);




#line 54 "C:\\cygwin\\usr\\include\\stdio.h" 2





	/* RD and WR are never simultaneously asserted */















/* _flags2 flags */


/*
 * The following three definitions are for ANSI C, which took them
 * from System V, which stupidly took internal interface macros and
 * made them official arguments to setvbuf(), without renaming them.
 * Hence, these ugly _IOxxx names are *supposed* to appear in user code.
 *
 * Although these happen to match their counterparts above, the
 * implementation does not rely on that (so these could be renumbered).
 */




#if !(defined(NULL))

#endif

























#if !(defined(SEEK_SET))

#endif
#if !(defined(SEEK_CUR))

#endif
#if !(defined(SEEK_END))

#endif















/*
 * Functions defined in ANSI C standard.
 */








FILE *	__attribute__((__cdecl__)) tmpfile (void);
char *	__attribute__((__cdecl__)) tmpnam (char *);
int	__attribute__((__cdecl__)) fclose (FILE *);
int	__attribute__((__cdecl__)) fflush (FILE *);
FILE *	__attribute__((__cdecl__)) freopen (const char *, const char *, FILE *);
void	__attribute__((__cdecl__)) setbuf (FILE *, char *);
int	__attribute__((__cdecl__)) setvbuf (FILE *, char *, int, size_t);
int	__attribute__((__cdecl__)) fprintf (FILE *, const char *, ...)
 __attribute__ ((__format__(__printf__, 2, 3)));
int	__attribute__((__cdecl__)) fscanf (FILE *, const char *, ...)
 __attribute__ ((__format__(__scanf__, 2, 3)));
int	__attribute__((__cdecl__)) printf (const char *, ...)
 __attribute__ ((__format__(__printf__, 1, 2)));
int	__attribute__((__cdecl__)) scanf (const char *, ...)
 __attribute__ ((__format__(__scanf__, 1, 2)));
int	__attribute__((__cdecl__)) sscanf (const char *, const char *, ...)
 __attribute__ ((__format__(__scanf__, 2, 3)));
int	__attribute__((__cdecl__)) vfprintf (FILE *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 2, 0)));
int	__attribute__((__cdecl__)) vprintf (const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 1, 0)));
int	__attribute__((__cdecl__)) vsprintf (char *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 2, 0)));
int	__attribute__((__cdecl__)) fgetc (FILE *);
char *  __attribute__((__cdecl__)) fgets (char *, int, FILE *);
int	__attribute__((__cdecl__)) fputc (int, FILE *);
int	__attribute__((__cdecl__)) fputs (const char *, FILE *);
int	__attribute__((__cdecl__)) getc (FILE *);
int	__attribute__((__cdecl__)) getchar (void);
char *  __attribute__((__cdecl__)) gets (char *);
int	__attribute__((__cdecl__)) putc (int, FILE *);
int	__attribute__((__cdecl__)) putchar (int);
int	__attribute__((__cdecl__)) puts (const char *);
int	__attribute__((__cdecl__)) ungetc (int, FILE *);
size_t	__attribute__((__cdecl__)) fread (void *, size_t _size, size_t _n, FILE *);
size_t	__attribute__((__cdecl__)) fwrite (const void *, size_t _size, size_t _n, FILE *);



int	__attribute__((__cdecl__)) fgetpos (FILE *, fpos_t *);

int	__attribute__((__cdecl__)) fseek (FILE *, long, int);



int	__attribute__((__cdecl__)) fsetpos (FILE *, const fpos_t *);

long	__attribute__((__cdecl__)) ftell ( FILE *);
void	__attribute__((__cdecl__)) rewind (FILE *);
void	__attribute__((__cdecl__)) clearerr (FILE *);
int	__attribute__((__cdecl__)) feof (FILE *);
int	__attribute__((__cdecl__)) ferror (FILE *);
void    __attribute__((__cdecl__)) perror (const char *);

FILE *	__attribute__((__cdecl__)) fopen (const char *_name, const char *_type);
int	__attribute__((__cdecl__)) sprintf (char *, const char *, ...)
 __attribute__ ((__format__(__printf__, 2, 3)));
int	__attribute__((__cdecl__)) remove (const char *);
int	__attribute__((__cdecl__)) rename (const char *, const char *);






int	__attribute__((__cdecl__)) fseeko (FILE *, off_t, int);
off_t	__attribute__((__cdecl__)) ftello ( FILE *);




int	__attribute__((__cdecl__)) asiprintf (char **, const char *, ...)
 __attribute__ ((__format__(__printf__, 2, 3)));
char *	__attribute__((__cdecl__)) asniprintf (char *, size_t *, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
char *	__attribute__((__cdecl__)) asnprintf (char *, size_t *, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
int	__attribute__((__cdecl__)) asprintf (char **, const char *, ...)
 __attribute__ ((__format__(__printf__, 2, 3)));
#if !(defined(diprintf))
int	__attribute__((__cdecl__)) diprintf (int, const char *, ...)
 __attribute__ ((__format__(__printf__, 2, 3)));
#endif
int	__attribute__((__cdecl__)) fcloseall (void);
int	__attribute__((__cdecl__)) fiprintf (FILE *, const char *, ...)
 __attribute__ ((__format__(__printf__, 2, 3)));
int	__attribute__((__cdecl__)) fiscanf (FILE *, const char *, ...)
 __attribute__ ((__format__(__scanf__, 2, 3)));
int	__attribute__((__cdecl__)) iprintf (const char *, ...)
 __attribute__ ((__format__(__printf__, 1, 2)));
int	__attribute__((__cdecl__)) iscanf (const char *, ...)
 __attribute__ ((__format__(__scanf__, 1, 2)));
int	__attribute__((__cdecl__)) siprintf (char *, const char *, ...)
 __attribute__ ((__format__(__printf__, 2, 3)));
int	__attribute__((__cdecl__)) siscanf (const char *, const char *, ...)
 __attribute__ ((__format__(__scanf__, 2, 3)));
int	__attribute__((__cdecl__)) snprintf (char *, size_t, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
int	__attribute__((__cdecl__)) sniprintf (char *, size_t, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
char *	__attribute__((__cdecl__)) tempnam (const char *, const char *);
int	__attribute__((__cdecl__)) vasiprintf (char **, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 2, 0)));
char *	__attribute__((__cdecl__)) vasniprintf (char *, size_t *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
char *	__attribute__((__cdecl__)) vasnprintf (char *, size_t *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
int	__attribute__((__cdecl__)) vasprintf (char **, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 2, 0)));
int	__attribute__((__cdecl__)) vdiprintf (int, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 2, 0)));
int	__attribute__((__cdecl__)) vfiprintf (FILE *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 2, 0)));
int	__attribute__((__cdecl__)) vfiscanf (FILE *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 2, 0)));
int	__attribute__((__cdecl__)) vfscanf (FILE *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 2, 0)));
int	__attribute__((__cdecl__)) viprintf (const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 1, 0)));
int	__attribute__((__cdecl__)) viscanf (const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 1, 0)));
int	__attribute__((__cdecl__)) vscanf (const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 1, 0)));
int	__attribute__((__cdecl__)) vsiprintf (char *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 2, 0)));
int	__attribute__((__cdecl__)) vsiscanf (const char *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 2, 0)));
int	__attribute__((__cdecl__)) vsniprintf (char *, size_t, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
int	__attribute__((__cdecl__)) vsnprintf (char *, size_t, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
int	__attribute__((__cdecl__)) vsscanf (const char *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 2, 0)));


/*
 * Routines in POSIX 1003.1:2001.
 */



FILE *	__attribute__((__cdecl__)) fdopen (int, const char *);

int	__attribute__((__cdecl__)) fileno (FILE *);
int	__attribute__((__cdecl__)) getw (FILE *);
int	__attribute__((__cdecl__)) pclose (FILE *);
FILE *  __attribute__((__cdecl__)) popen (const char *, const char *);
int	__attribute__((__cdecl__)) putw (int, FILE *);
void    __attribute__((__cdecl__)) setbuffer (FILE *, char *, int);
int	__attribute__((__cdecl__)) setlinebuf (FILE *);
int	__attribute__((__cdecl__)) getc_unlocked (FILE *);
int	__attribute__((__cdecl__)) getchar_unlocked (void);
void	__attribute__((__cdecl__)) flockfile (FILE *);
int	__attribute__((__cdecl__)) ftrylockfile (FILE *);
void	__attribute__((__cdecl__)) funlockfile (FILE *);
int	__attribute__((__cdecl__)) putc_unlocked (int, FILE *);
int	__attribute__((__cdecl__)) putchar_unlocked (int);

/*
 * Routines in POSIX 1003.1:200x.
 */



#if !(defined(dprintf))
int	__attribute__((__cdecl__)) dprintf (int, const char *, ...)
 __attribute__ ((__format__(__printf__, 2, 3)));
#endif
FILE *	__attribute__((__cdecl__)) fmemopen (void *, size_t, const char *);
/* getdelim - see __getdelim for now */
/* getline - see __getline for now */
FILE *	__attribute__((__cdecl__)) open_memstream (char **, size_t *);

int	__attribute__((__cdecl__)) renameat (int, const char *, int, const char *);

int	__attribute__((__cdecl__)) vdprintf (int, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 2, 0)));


/*
 * Recursive versions of the above.
 */

int	__attribute__((__cdecl__)) _asiprintf_r (struct _reent *, char **, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
char *	__attribute__((__cdecl__)) _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...)
 __attribute__ ((__format__(__printf__, 4, 5)));
char *	__attribute__((__cdecl__)) _asnprintf_r (struct _reent *, char *, size_t *, const char *, ...)
 __attribute__ ((__format__(__printf__, 4, 5)));
int	__attribute__((__cdecl__)) _asprintf_r (struct _reent *, char **, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
int	__attribute__((__cdecl__)) _diprintf_r (struct _reent *, int, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
int	__attribute__((__cdecl__)) _dprintf_r (struct _reent *, int, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
int	__attribute__((__cdecl__)) _fclose_r (struct _reent *, FILE *);
int	__attribute__((__cdecl__)) _fcloseall_r (struct _reent *);
FILE *	__attribute__((__cdecl__)) _fdopen_r (struct _reent *, int, const char *);
int	__attribute__((__cdecl__)) _fflush_r (struct _reent *, FILE *);
int	__attribute__((__cdecl__)) _fgetc_r (struct _reent *, FILE *);
char *  __attribute__((__cdecl__)) _fgets_r (struct _reent *, char *, int, FILE *);




int	__attribute__((__cdecl__)) _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int	__attribute__((__cdecl__)) _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int	__attribute__((__cdecl__)) _fiprintf_r (struct _reent *, FILE *, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
int	__attribute__((__cdecl__)) _fiscanf_r (struct _reent *, FILE *, const char *, ...)
 __attribute__ ((__format__(__scanf__, 3, 4)));
FILE *	__attribute__((__cdecl__)) _fmemopen_r (struct _reent *, void *, size_t, const char *);
FILE *	__attribute__((__cdecl__)) _fopen_r (struct _reent *, const char *, const char *);
FILE *	__attribute__((__cdecl__)) _freopen_r (struct _reent *, const char *, const char *, FILE *);
int	__attribute__((__cdecl__)) _fprintf_r (struct _reent *, FILE *, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
int	__attribute__((__cdecl__)) _fpurge_r (struct _reent *, FILE *);
int	__attribute__((__cdecl__)) _fputc_r (struct _reent *, int, FILE *);
int	__attribute__((__cdecl__)) _fputs_r (struct _reent *, const char *, FILE *);
size_t	__attribute__((__cdecl__)) _fread_r (struct _reent *, void *, size_t _size, size_t _n, FILE *);
int	__attribute__((__cdecl__)) _fscanf_r (struct _reent *, FILE *, const char *, ...)
 __attribute__ ((__format__(__scanf__, 3, 4)));
int	__attribute__((__cdecl__)) _fseek_r (struct _reent *, FILE *, long, int);
int	__attribute__((__cdecl__)) _fseeko_r (struct _reent *, FILE *, _off_t, int);
long	__attribute__((__cdecl__)) _ftell_r (struct _reent *, FILE *);
_off_t	__attribute__((__cdecl__)) _ftello_r (struct _reent *, FILE *);
void	__attribute__((__cdecl__)) _rewind_r (struct _reent *, FILE *);
size_t	__attribute__((__cdecl__)) _fwrite_r (struct _reent *, const void *, size_t _size, size_t _n, FILE *);
int	__attribute__((__cdecl__)) _getc_r (struct _reent *, FILE *);
int	__attribute__((__cdecl__)) _getc_unlocked_r (struct _reent *, FILE *);
int	__attribute__((__cdecl__)) _getchar_r (struct _reent *);
int	__attribute__((__cdecl__)) _getchar_unlocked_r (struct _reent *);
char *	__attribute__((__cdecl__)) _gets_r (struct _reent *, char *);
int	__attribute__((__cdecl__)) _iprintf_r (struct _reent *, const char *, ...)
 __attribute__ ((__format__(__printf__, 2, 3)));
int	__attribute__((__cdecl__)) _iscanf_r (struct _reent *, const char *, ...)
 __attribute__ ((__format__(__scanf__, 2, 3)));
FILE *	__attribute__((__cdecl__)) _open_memstream_r (struct _reent *, char **, size_t *);
void	__attribute__((__cdecl__)) _perror_r (struct _reent *, const char *);
int	__attribute__((__cdecl__)) _printf_r (struct _reent *, const char *, ...)
 __attribute__ ((__format__(__printf__, 2, 3)));
int	__attribute__((__cdecl__)) _putc_r (struct _reent *, int, FILE *);
int	__attribute__((__cdecl__)) _putc_unlocked_r (struct _reent *, int, FILE *);
int	__attribute__((__cdecl__)) _putchar_unlocked_r (struct _reent *, int);
int	__attribute__((__cdecl__)) _putchar_r (struct _reent *, int);
int	__attribute__((__cdecl__)) _puts_r (struct _reent *, const char *);
int	__attribute__((__cdecl__)) _remove_r (struct _reent *, const char *);
int	__attribute__((__cdecl__)) _rename_r (struct _reent *,
 const char *_old, const char *_new);
int	__attribute__((__cdecl__)) _scanf_r (struct _reent *, const char *, ...)
 __attribute__ ((__format__(__scanf__, 2, 3)));
int	__attribute__((__cdecl__)) _siprintf_r (struct _reent *, char *, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
int	__attribute__((__cdecl__)) _siscanf_r (struct _reent *, const char *, const char *, ...)
 __attribute__ ((__format__(__scanf__, 3, 4)));
int	__attribute__((__cdecl__)) _sniprintf_r (struct _reent *, char *, size_t, const char *, ...)
 __attribute__ ((__format__(__printf__, 4, 5)));
int	__attribute__((__cdecl__)) _snprintf_r (struct _reent *, char *, size_t, const char *, ...)
 __attribute__ ((__format__(__printf__, 4, 5)));
int	__attribute__((__cdecl__)) _sprintf_r (struct _reent *, char *, const char *, ...)
 __attribute__ ((__format__(__printf__, 3, 4)));
int	__attribute__((__cdecl__)) _sscanf_r (struct _reent *, const char *, const char *, ...)
 __attribute__ ((__format__(__scanf__, 3, 4)));
char *	__attribute__((__cdecl__)) _tempnam_r (struct _reent *, const char *, const char *);
FILE *	__attribute__((__cdecl__)) _tmpfile_r (struct _reent *);
char *	__attribute__((__cdecl__)) _tmpnam_r (struct _reent *, char *);
int	__attribute__((__cdecl__)) _ungetc_r (struct _reent *, int, FILE *);
int	__attribute__((__cdecl__)) _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
char *	__attribute__((__cdecl__)) _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 4, 0)));
char *	__attribute__((__cdecl__)) _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 4, 0)));
int	__attribute__((__cdecl__)) _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
int	__attribute__((__cdecl__)) _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
int	__attribute__((__cdecl__)) _vdprintf_r (struct _reent *, int, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
int	__attribute__((__cdecl__)) _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
int	__attribute__((__cdecl__)) _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 3, 0)));
int	__attribute__((__cdecl__)) _vfprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
int	__attribute__((__cdecl__)) _vfscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 3, 0)));
int	__attribute__((__cdecl__)) _viprintf_r (struct _reent *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 2, 0)));
int	__attribute__((__cdecl__)) _viscanf_r (struct _reent *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 2, 0)));
int	__attribute__((__cdecl__)) _vprintf_r (struct _reent *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 2, 0)));
int	__attribute__((__cdecl__)) _vscanf_r (struct _reent *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 2, 0)));
int	__attribute__((__cdecl__)) _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
int	__attribute__((__cdecl__)) _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 3, 0)));
int	__attribute__((__cdecl__)) _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 4, 0)));
int	__attribute__((__cdecl__)) _vsnprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 4, 0)));
int	__attribute__((__cdecl__)) _vsprintf_r (struct _reent *, char *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__printf__, 3, 0)));
int	__attribute__((__cdecl__)) _vsscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list)
 __attribute__ ((__format__(__scanf__, 3, 0)));

/* Other extensions.  */

int	__attribute__((__cdecl__)) fpurge (FILE *);
ssize_t __attribute__((__cdecl__)) __getdelim (char **, size_t *, int, FILE *);
ssize_t __attribute__((__cdecl__)) __getline (char **, size_t *, FILE *);






















/*
 * Routines internal to the implementation.
 */

int	__attribute__((__cdecl__)) __srget_r (struct _reent *, FILE *);
int	__attribute__((__cdecl__)) __swbuf_r (struct _reent *, int, FILE *);

/*
 * Stdio function-access interface.
 */



FILE	*__attribute__((__cdecl__)) funopen (const void * __cookie,
 int(*__readfn)(void * __c, char *__buf, int __n),
 int(*__writefn)(void * __c, const char *__buf, int __n),
 _fpos64_t(*__seekfn)(void * __c, _fpos64_t __off, int __whence),
 int(*__closefn)(void * __c));
FILE	*__attribute__((__cdecl__)) _funopen_r (struct _reent *, const void * __cookie,
 int(*__readfn)(void * __c, char *__buf, int __n),
 int(*__writefn)(void * __c, const char *__buf, int __n),
 _fpos64_t(*__seekfn)(void * __c, _fpos64_t __off, int __whence),
 int(*__closefn)(void * __c));


		
		
		
		

		
		
		
		






typedef ssize_t cookie_read_function_t(void *__cookie, char *__buf, size_t __n);
typedef ssize_t cookie_write_function_t(void *__cookie, const char *__buf,
					size_t __n);

typedef int cookie_seek_function_t(void *__cookie, _off64_t *__off,
				   int __whence);



typedef int cookie_close_function_t(void *__cookie);
typedef struct
{
  /* These four struct member names are dictated by Linux; hopefully,
     they don't conflict with any macros.  */
  cookie_read_function_t  *read;
  cookie_write_function_t *write;
  cookie_seek_function_t  *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
FILE *__attribute__((__cdecl__)) fopencookie (void *__cookie,
 const char *__mode, cookie_io_functions_t __functions);
FILE *__attribute__((__cdecl__)) _fopencookie_r (struct _reent *, void *__cookie,
 const char *__mode, cookie_io_functions_t __functions);


/*
 * The __sfoo macros are here so that we can 
 * define function versions in the C library.
 */



/*  For a platform with CR/LF, additional logic is required by
  __sgetc_r which would otherwise simply be a macro; therefore we
  use an inlined function.  The function is only meant to be inlined
  in place as used and the function body should never be emitted.  

  There are two possible means to this end when compiling with GCC,
  one when compiling with a standard C99 compiler, and for other
  compilers we're just stuck.  At the moment, this issue only
  affects the Cygwin target, so we'll most likely be using GCC. */

extern __inline__ __attribute__ ((__always_inline__)) int __sgetc_r(struct _reent *__ptr, FILE *__p);

extern __inline__ __attribute__ ((__always_inline__)) int __sgetc_r(struct _reent *__ptr, FILE *__p)
  {
    int __c = (--(__p)->_r < 0 ? __srget_r(__ptr, __p) : (int)(*(__p)->_p++));
    if ((__p->_flags & 0x4000) && (__c == '\r'))
      {
      int __c2 = (--(__p)->_r < 0 ? __srget_r(__ptr, __p) : (int)(*(__p)->_p++));
      if (__c2 == '\n')
        __c = __c2;
      else
        ungetc(__c2, __p);
      }
    return __c;
  }







	
		
	
		


/*
 * This has been tuned to generate reasonable code on the vax using pcc
 */





































/* fast always-buffered version, true iff error */















#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\stdlib.h" 1
/*
 * stdlib.h
 *
 * Definitions for common types, variables, and functions.
 */




#line 1 "C:\\cygwin\\usr\\include\\machine\\ieeefp.h" 1

















































































































































































































































































































#line 10 "C:\\cygwin\\usr\\include\\stdlib.h" 2
#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 11 "C:\\cygwin\\usr\\include\\stdlib.h" 2



#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */


































/* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   symbols in the _FOO_T_ family, stays defined even after its
   corresponding type is defined).  If we define wchar_t, then we
   must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   we undef _WCHAR_T_, then we must also define rune_t, since 
   headers like runetype.h assume that if machine/ansi.h is included,
   and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   the same type." */

















/* FreeBSD 5 can't be handled well using "traditional" logic above
   since it no longer defines _BSD_RUNE_T_ yet still desires to export
   rune_t in some cases... */














typedef short unsigned int wchar_t;































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 13 "C:\\cygwin\\usr\\include\\stdlib.h" 2

#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */





































  
  
  





  
  
  
  
  
  
  
  
  









	
	
	
	
	
	




	
	
	
        



	
	
	
	
        










	
	


































  
  
  
  
  
  
  

  


















  
  
  
  
  
  
  


  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  


  


  

  
  









  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  








  
  
  
























  
  
  

  
  



















  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  
















































































































































































  

  


  

  
  

  
  

  

  

  
  
  
  
  

  
  
  

  
    
      
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
	  
        
  


      
        

          
          
        
    

  
  
  

  
  

  


  
  










































































































































































  












#line 15 "C:\\cygwin\\usr\\include\\stdlib.h" 2
#line 1 "C:\\cygwin\\usr\\include\\machine\\stdlib.h" 1
/* machine/stdlib.h

  Copyright 2005 Red Hat, Inc.

  This file is part of Cygwin.

  This software is a copyrighted work licensed under the terms of the
  Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
  details. */






char *mkdtemp (char *);





#line 16 "C:\\cygwin\\usr\\include\\stdlib.h" 2

#line 1 "C:\\cygwin\\usr\\include\\alloca.h" 1
/* libc/include/alloca.h - Allocate memory on stack */

/* Written 2000 by Werner Almesberger */
/* Rearranged for general inclusion by stdlib.h.
   2001, Corinna Vinschen <vinschen@redhat.com> */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 10 "C:\\cygwin\\usr\\include\\alloca.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */





































  
  
  





  
  
  
  
  
  
  
  
  









	
	
	
	
	
	




	
	
	
        



	
	
	
	
        










	
	


































  
  
  
  
  
  
  

  


















  
  
  
  
  
  
  


  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  


  


  

  
  









  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  








  
  
  
























  
  
  

  
  



















  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  
















































































































































































  

  


  

  
  

  
  

  

  

  
  
  
  
  

  
  
  

  
    
      
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
	  
        
  


      
        

          
          
        
    

  
  
  

  
  

  


  
  










































































































































































  












#line 11 "C:\\cygwin\\usr\\include\\alloca.h" 2









#line 17 "C:\\cygwin\\usr\\include\\stdlib.h" 2


#line 1 "C:\\cygwin\\usr\\include\\cygwin\\stdlib.h" 1
/* stdlib.h

   Copyright 2005, 2006, 2007, 2008, 2009 Red Hat Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\cygwin\\wait.h" 1
/* cygwin/wait.h

   Copyright 2006, 2009 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */









/* A status looks like:
      <2 bytes info> <2 bytes code>

      <code> == 0, child has exited, info is the exit value
      <code> == 1..7e, child has exited, info is the signal number.
      <code> == 7f, child has stopped, info was the signal number.
      <code> == 80, there was a core dump.
*/











#line 14 "C:\\cygwin\\usr\\include\\cygwin\\stdlib.h" 2





const char *getprogname (void);
void	setprogname (const char *);


char *realpath (const char *, char *);
char *canonicalize_file_name (const char *);
int unsetenv (const char *);
char *initstate (unsigned seed, char *state, size_t size);
long random (void);
char *setstate (const char *state);
void srandom (unsigned);
char *ptsname (int);
int grantpt (int);
int unlockpt (int);

int posix_openpt (int);
int posix_memalign (void **, size_t, size_t);





extern void * memalign (size_t, size_t);
extern void * valloc (size_t);
































#line 19 "C:\\cygwin\\usr\\include\\stdlib.h" 2



typedef struct 
{
  int quot; /* quotient */
  int rem; /* remainder */
} div_t;

typedef struct 
{
  long quot; /* quotient */
  long rem; /* remainder */
} ldiv_t;


typedef struct
{
  long long int quot; /* quotient */
  long long int rem; /* remainder */
} lldiv_t;









int	__attribute__((__cdecl__)) __locale_mb_cur_max (void);



void	__attribute__((__cdecl__)) abort (void) __attribute__ ((noreturn));
int	__attribute__((__cdecl__)) abs (int);
int	__attribute__((__cdecl__)) atexit (void(*__func)(void));
double	__attribute__((__cdecl__)) atof (const char *__nptr);

float	__attribute__((__cdecl__)) atoff (const char *__nptr);

int	__attribute__((__cdecl__)) atoi (const char *__nptr);
int	__attribute__((__cdecl__)) _atoi_r (struct _reent *, const char *__nptr);
long	__attribute__((__cdecl__)) atol (const char *__nptr);
long	__attribute__((__cdecl__)) _atol_r (struct _reent *, const char *__nptr);
void *	__attribute__((__cdecl__)) bsearch (const void * __key,
 const void * __base,
 size_t __nmemb,
 size_t __size,
 int (__attribute__((__cdecl__)) * _compar) (const void *, const void *));
void *	__attribute__((__cdecl__)) calloc (size_t __nmemb, size_t __size) ;
div_t	__attribute__((__cdecl__)) div (int __numer, int __denom);
void	__attribute__((__cdecl__)) exit (int __status) __attribute__ ((noreturn));
void	__attribute__((__cdecl__)) free (void *) ;
char *  __attribute__((__cdecl__)) getenv (const char *__string);
char *	__attribute__((__cdecl__)) _getenv_r (struct _reent *, const char *__string);
char *	__attribute__((__cdecl__)) _findenv (const char *, int *);
char *	__attribute__((__cdecl__)) _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg;			/* getsubopt(3) external variable */
int	__attribute__((__cdecl__)) getsubopt (char **, char * const *, char **);

long	__attribute__((__cdecl__)) labs (long);
ldiv_t	__attribute__((__cdecl__)) ldiv (long __numer, long __denom);
void *	__attribute__((__cdecl__)) malloc (size_t __size) ;
int	__attribute__((__cdecl__)) mblen (const char *, size_t);
int	__attribute__((__cdecl__)) _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int	__attribute__((__cdecl__)) mbtowc (wchar_t *, const char *, size_t);
int	__attribute__((__cdecl__)) _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int	__attribute__((__cdecl__)) wctomb (char *, wchar_t);
int	__attribute__((__cdecl__)) _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t	__attribute__((__cdecl__)) mbstowcs (wchar_t *, const char *, size_t);
size_t	__attribute__((__cdecl__)) _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t	__attribute__((__cdecl__)) wcstombs (char *, const wchar_t *, size_t);
size_t	__attribute__((__cdecl__)) _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


char *	__attribute__((__cdecl__)) mkdtemp (char *);
int	__attribute__((__cdecl__)) mkostemp (char *, int);
int	__attribute__((__cdecl__)) mkostemps (char *, int, int);
int	__attribute__((__cdecl__)) mkstemp (char *);
int	__attribute__((__cdecl__)) mkstemps (char *, int);
char *	__attribute__((__cdecl__)) mktemp (char *) __attribute__ ((__warning__("the use of `mktemp' is dangerous; use `mkstemp' instead")));

char *	__attribute__((__cdecl__)) _mkdtemp_r (struct _reent *, char *);
int	__attribute__((__cdecl__)) _mkostemp_r (struct _reent *, char *, int);
int	__attribute__((__cdecl__)) _mkostemps_r (struct _reent *, char *, int, int);
int	__attribute__((__cdecl__)) _mkstemp_r (struct _reent *, char *);
int	__attribute__((__cdecl__)) _mkstemps_r (struct _reent *, char *, int);
char *	__attribute__((__cdecl__)) _mktemp_r (struct _reent *, char *) __attribute__ ((__warning__("the use of `mktemp' is dangerous; use `mkstemp' instead")));

void	__attribute__((__cdecl__)) qsort (void * __base, size_t __nmemb, size_t __size, int(*_compar)(const void *, const void *));
int	__attribute__((__cdecl__)) rand (void);
void *	__attribute__((__cdecl__)) realloc (void * __r, size_t __size) ;

void *	__attribute__((__cdecl__)) reallocf (void * __r, size_t __size);

void	__attribute__((__cdecl__)) srand (unsigned __seed);
double	__attribute__((__cdecl__)) strtod (const char *__n, char **__end_PTR);
double	__attribute__((__cdecl__)) _strtod_r (struct _reent *,const char *__n, char **__end_PTR);
float	__attribute__((__cdecl__)) strtof (const char *__n, char **__end_PTR);

/* the following strtodf interface is deprecated...use strtof instead */
#if !(defined(strtodf))

#endif

long	__attribute__((__cdecl__)) strtol (const char *__n, char **__end_PTR, int __base);
long	__attribute__((__cdecl__)) _strtol_r (struct _reent *,const char *__n, char **__end_PTR, int __base);
unsigned long __attribute__((__cdecl__)) strtoul (const char *__n, char **__end_PTR, int __base);
unsigned long __attribute__((__cdecl__)) _strtoul_r (struct _reent *,const char *__n, char **__end_PTR, int __base);

int	__attribute__((__cdecl__)) system (const char *__string);


long    __attribute__((__cdecl__)) a64l (const char *__input);
char *  __attribute__((__cdecl__)) l64a (long __input);
char *  __attribute__((__cdecl__)) _l64a_r (struct _reent *,long __input);
int	__attribute__((__cdecl__)) on_exit (void(*__func)(int, void *),void * __arg);
void	__attribute__((__cdecl__)) _Exit (int __status) __attribute__ ((noreturn));
int	__attribute__((__cdecl__)) putenv (char *__string);
int	__attribute__((__cdecl__)) _putenv_r (struct _reent *, char *__string);
void *	__attribute__((__cdecl__)) _reallocf_r (struct _reent *, void *, size_t);
int	__attribute__((__cdecl__)) setenv (const char *__string, const char *__value, int __overwrite);
int	__attribute__((__cdecl__)) _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);

char *	__attribute__((__cdecl__)) gcvt (double,int,char *);
char *	__attribute__((__cdecl__)) gcvtf (float,int,char *);
char *	__attribute__((__cdecl__)) fcvt (double,int,int *,int *);
char *	__attribute__((__cdecl__)) fcvtf (float,int,int *,int *);
char *	__attribute__((__cdecl__)) ecvt (double,int,int *,int *);
char *	__attribute__((__cdecl__)) ecvtbuf (double, int, int*, int*, char *);
char *	__attribute__((__cdecl__)) fcvtbuf (double, int, int*, int*, char *);
char *	__attribute__((__cdecl__)) ecvtf (float,int,int *,int *);
char *	__attribute__((__cdecl__)) dtoa (double, int, int, int *, int*, char**);
int	__attribute__((__cdecl__)) rand_r (unsigned *__seed);

double __attribute__((__cdecl__)) drand48 (void);
double __attribute__((__cdecl__)) _drand48_r (struct _reent *);
double __attribute__((__cdecl__)) erand48 (unsigned short [3]);
double __attribute__((__cdecl__)) _erand48_r (struct _reent *, unsigned short [3]);
long   __attribute__((__cdecl__)) jrand48 (unsigned short [3]);
long   __attribute__((__cdecl__)) _jrand48_r (struct _reent *, unsigned short [3]);
void  __attribute__((__cdecl__)) lcong48 (unsigned short [7]);
void  __attribute__((__cdecl__)) _lcong48_r (struct _reent *, unsigned short [7]);
long   __attribute__((__cdecl__)) lrand48 (void);
long   __attribute__((__cdecl__)) _lrand48_r (struct _reent *);
long   __attribute__((__cdecl__)) mrand48 (void);
long   __attribute__((__cdecl__)) _mrand48_r (struct _reent *);
long   __attribute__((__cdecl__)) nrand48 (unsigned short [3]);
long   __attribute__((__cdecl__)) _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       __attribute__((__cdecl__)) seed48 (unsigned short [3]);
unsigned short *
       __attribute__((__cdecl__)) _seed48_r (struct _reent *, unsigned short [3]);
void  __attribute__((__cdecl__)) srand48 (long);
void  __attribute__((__cdecl__)) _srand48_r (struct _reent *, long);
long long __attribute__((__cdecl__)) atoll (const char *__nptr);
long long __attribute__((__cdecl__)) _atoll_r (struct _reent *, const char *__nptr);
long long __attribute__((__cdecl__)) llabs (long long);
lldiv_t	__attribute__((__cdecl__)) lldiv (long long __numer, long long __denom);
long long __attribute__((__cdecl__)) strtoll (const char *__n, char **__end_PTR, int __base);
long long __attribute__((__cdecl__)) _strtoll_r (struct _reent *, const char *__n, char **__end_PTR, int __base);
unsigned long long __attribute__((__cdecl__)) strtoull (const char *__n, char **__end_PTR, int __base);
unsigned long long __attribute__((__cdecl__)) _strtoull_r (struct _reent *, const char *__n, char **__end_PTR, int __base);










char *	__attribute__((__cdecl__)) _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);







int	__attribute__((__cdecl__)) _system_r (struct _reent *, const char *);

void	__attribute__((__cdecl__)) __eprintf (const char *, const char *, unsigned int, const char *);

/* On platforms where long double equals double.  */







#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\string.h" 1
/*
 * string.h
 *
 * Definitions for memory and string functions.
 */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 10 "C:\\cygwin\\usr\\include\\string.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */





































  
  
  





  
  
  
  
  
  
  
  
  









	
	
	
	
	
	




	
	
	
        



	
	
	
	
        










	
	


































  
  
  
  
  
  
  

  


















  
  
  
  
  
  
  


  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  


  


  

  
  









  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  








  
  
  
























  
  
  

  
  



















  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  
















































































































































































  

  


  

  
  

  
  

  

  

  
  
  
  
  

  
  
  

  
    
      
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
	  
        
  


      
        

          
          
        
    

  
  
  

  
  

  


  
  










































































































































































  












#line 11 "C:\\cygwin\\usr\\include\\string.h" 2


#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 13 "C:\\cygwin\\usr\\include\\string.h" 2






void * 	 __attribute__((__cdecl__)) memchr (const void *, int, size_t);
int 	 __attribute__((__cdecl__)) memcmp (const void *, const void *, size_t);
void * 	 __attribute__((__cdecl__)) memcpy (void *, const void *, size_t);
void *	 __attribute__((__cdecl__)) memmove (void *, const void *, size_t);
void *	 __attribute__((__cdecl__)) memset (void *, int, size_t);
char 	*__attribute__((__cdecl__)) strcat (char *, const char *);
char 	*__attribute__((__cdecl__)) strchr (const char *, int);
int	 __attribute__((__cdecl__)) strcmp (const char *, const char *);
int	 __attribute__((__cdecl__)) strcoll (const char *, const char *);
char 	*__attribute__((__cdecl__)) strcpy (char *, const char *);
size_t	 __attribute__((__cdecl__)) strcspn (const char *, const char *);
char 	*__attribute__((__cdecl__)) strerror (int);
size_t	 __attribute__((__cdecl__)) strlen (const char *);
char 	*__attribute__((__cdecl__)) strncat (char *, const char *, size_t);
int	 __attribute__((__cdecl__)) strncmp (const char *, const char *, size_t);
char 	*__attribute__((__cdecl__)) strncpy (char *, const char *, size_t);
char 	*__attribute__((__cdecl__)) strpbrk (const char *, const char *);
char 	*__attribute__((__cdecl__)) strrchr (const char *, int);
size_t	 __attribute__((__cdecl__)) strspn (const char *, const char *);
char 	*__attribute__((__cdecl__)) strstr (const char *, const char *);


char 	*__attribute__((__cdecl__)) strtok (char *, const char *);

size_t	 __attribute__((__cdecl__)) strxfrm (char *, const char *, size_t);


char 	*__attribute__((__cdecl__)) strtok_r (char *, const char *, char **);

int	 __attribute__((__cdecl__)) bcmp (const void *, const void *, size_t);
void	 __attribute__((__cdecl__)) bcopy (const void *, void *, size_t);
void	 __attribute__((__cdecl__)) bzero (void *, size_t);
int	 __attribute__((__cdecl__)) ffs (int);
char 	*__attribute__((__cdecl__)) index (const char *, int);
void *	 __attribute__((__cdecl__)) memccpy (void *, const void *, int, size_t);
void *	 __attribute__((__cdecl__)) mempcpy (void *, const void *, size_t);
void *	 __attribute__((__cdecl__)) memmem (const void *, size_t, const void *, size_t);
char 	*__attribute__((__cdecl__)) rindex (const char *, int);
char 	*__attribute__((__cdecl__)) stpcpy (char *, const char *);
char 	*__attribute__((__cdecl__)) stpncpy (char *, const char *, size_t);
int	 __attribute__((__cdecl__)) strcasecmp (const char *, const char *);
char	*__attribute__((__cdecl__)) strcasestr (const char *, const char *);
char 	*__attribute__((__cdecl__)) strdup (const char *);
char 	*__attribute__((__cdecl__)) _strdup_r (struct _reent *, const char *);
char 	*__attribute__((__cdecl__)) strndup (const char *, size_t);
char 	*__attribute__((__cdecl__)) _strndup_r (struct _reent *, const char *, size_t);
char 	*__attribute__((__cdecl__)) strerror_r (int, char *, size_t);
size_t	 __attribute__((__cdecl__)) strlcat (char *, const char *, size_t);
size_t	 __attribute__((__cdecl__)) strlcpy (char *, const char *, size_t);
int	 __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
size_t	 __attribute__((__cdecl__)) strnlen (const char *, size_t);
char 	*__attribute__((__cdecl__)) strsep (char **, const char *);
char	*__attribute__((__cdecl__)) strlwr (char *);
char	*__attribute__((__cdecl__)) strupr (char *);

#if !(defined(DEFS_H))
char  *__attribute__((__cdecl__)) strsignal (int __signo);
#endif
int     __attribute__((__cdecl__)) strtosigno (const char *__name);

/* These function names are used on Windows and perhaps other systems.  */
#if !(defined(strcmpi))

#endif
#if !(defined(stricmp))

#endif
#if !(defined(strncmpi))

#endif
#if !(defined(strnicmp))

#endif

#line 1 "C:\\cygwin\\usr\\include\\sys\\string.h" 1
/* This is a dummy <sys/string.h> used as a placeholder for
   systems that need to have a special header file.  */
#line 76 "C:\\cygwin\\usr\\include\\string.h" 2




#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\netdb.h" 1
/* Original linux netdb.h merged with winsock.h types */

/*-
 * Copyright (c) 1980, 1983, 1988, 1993
 *     The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)netdb.h	8.1 (Berkeley) 6/2/93
 *      netdb.h,v 1.1.1.1 1995/02/18 05:34:07 hjl Exp
 * -
 * Portions Copyright (c) 1993 by Digital Equipment Corporation.
 *
 * Permission to use, copy, modify and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies, and that
 * the name of Digital Equipment Corporation not be used in advertising or
 * publicity pertaining to distribution of the document or software without
 * specific, written prior permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL EQUIPMENT
 * CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 * -
 * --Copyright--
 */







#line 1 "C:\\cygwin\\usr\\include\\inttypes.h" 1
/* inttypes.h - fixed size integer types

   Copyright 2003, 2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\stdint.h" 1
/* stdint.h - integer types

   Copyright 2003, 2006, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







































































































































































#line 14 "C:\\cygwin\\usr\\include\\inttypes.h" 2

#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 15 "C:\\cygwin\\usr\\include\\inttypes.h" 2

/* fprintf() macros for signed integers */





































/* fprintf() macros for unsigned integers */









































































/* fscanf() macros for signed integers */





































/* fscanf() macros for unsigned integers */


























































#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 225 "C:\\cygwin\\usr\\include\\inttypes.h" 2

typedef struct {
  intmax_t quot;
  intmax_t rem;
} imaxdiv_t;

intmax_t __attribute__((__cdecl__)) imaxabs (intmax_t);
imaxdiv_t __attribute__((__cdecl__)) imaxdiv (intmax_t, intmax_t);
intmax_t __attribute__((__cdecl__)) strtoimax (const char *, char **, int);
uintmax_t __attribute__((__cdecl__)) strtoumax (const char *, char **, int);
intmax_t __attribute__((__cdecl__)) wcstoimax (const wchar_t *, wchar_t **, int);
uintmax_t __attribute__((__cdecl__)) wcstoumax (const wchar_t *, wchar_t **, int);





#line 64 "C:\\cygwin\\usr\\include\\netdb.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\socket.h" 1
/* sys/socket.h

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006,
   2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\features.h" 1
/* features.h

   Copyright 2001, 2002, 2003, 2004 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\sys\\cdefs.h" 1
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD: src/sys/sys/cdefs.h,v 1.54 2002/05/11 03:58:24 alfred Exp $
 */














































































#line 14 "C:\\cygwin\\usr\\include\\features.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */




































































































































































  
    
   
    
   
    
   
    
  





#line 15 "C:\\cygwin\\usr\\include\\features.h" 2

/* Various options should be defined here, but the framework to do this
   is not laid down so far.  Especially notable are the following defines,
   which can be used by the application to switch on or off various
   datatypes and function prototypes:

     _BSD_SOURCE   to include pure BSD functions which are not defined
		   under POSIX.

     _POSIX_SOURCE if the application requests a POSIX compatible system.

     _XOPEN_SOURCE if X/Open functions and datatypes are requested.  This
		   option includes _POSIX_SOURCE.

     _GNU_SOURCE   to turn on GNU extensions which might collide with defines
		   used in application or library headers.  This option
		   includes _BSD_SOURCE, _XOPEN_SOURCE and _POSIX_SOURCE.
*/


#line 15 "C:\\cygwin\\usr\\include\\sys\\socket.h" 2
#line 1 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 1
/* cygwin/socket.h

   Copyright 1999, 2000, 2001, 2005, 2006, 2007, 2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







#line 1 "C:\\cygwin\\usr\\include\\stdint.h" 1
/* stdint.h - integer types

   Copyright 2003, 2006, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







































































































































































#line 17 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 2

/* Not unsigned for backward compatibility.  Keep #define for backward
   compatibility. */
#if !(defined(socklen_t))
typedef int socklen_t;

#endif
typedef uint16_t sa_family_t;

struct sockaddr {
  sa_family_t		sa_family;	/* address family, AF_xxx	*/
  char			sa_data[14];	/* 14 bytes of protocol address	*/
};

/* Definition of sockaddr_storage according to SUSv3. */






struct sockaddr_storage {
  sa_family_t		ss_family;
  char			_ss_pad1[((sizeof (int64_t)) - sizeof (sa_family_t))];
  int64_t		__ss_align;
  char			_ss_pad2[(128 - (sizeof (sa_family_t) + ((sizeof (int64_t)) - sizeof (sa_family_t)) + (sizeof (int64_t))))];
};

#line 1 "C:\\cygwin\\usr\\include\\asm\\socket.h" 1
/* asm/socket.h

   Copyright 1996, 1997, 1998, 2001, 2005, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\cygwin\\if.h" 1
/* cygwin/if.h

   Copyright 1996, 2001, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 17 "C:\\cygwin\\usr\\include\\cygwin\\if.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\socket.h" 1
/* sys/socket.h

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006,
   2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */


















  
  
  
  
  
  
  
  
  
		    
  
  
  
  
		  
  
		  
  
		  
  
  
  

  





#line 18 "C:\\cygwin\\usr\\include\\cygwin\\if.h" 2

/* Standard interface flags. */












struct if_nameindex {
  unsigned  if_index;
  char     *if_name;
};

/* This is the structure expected by ioctl when the application requests
   the friendly adapter name (>= XP SP1).  ifru_data should point to such
   a structure when ioctl is called with SIOCGIFFRNDLYNAM. */


struct ifreq_frndlyname {
  int  ifrf_len;
  char ifrf_friendlyname[260];
};

/*
 * Interface request structure used for socket
 * ioctl's.  All interface ioctl's must have parameter
 * definitions which begin with ifr_name.  The
 * remainder may be interface specific.
 */




struct ifreq {
  union {
    char    ifrn_name[44];   /* Unique Windows Adapter name (A GUID) */
  } ifr_ifrn;

  union {
    struct  sockaddr ifru_addr;
    struct  sockaddr ifru_broadaddr;
    struct  sockaddr ifru_dstaddr;
    struct  sockaddr ifru_netmask;
    struct  sockaddr ifru_hwaddr;
    int     ifru_flags;
    int     ifru_metric;
    int     ifru_mtu;
    int     ifru_ifindex;
    /* The space must be preallocated by the application. */
    void   *ifru_data;
    /* Pad to sizeof sockaddr_in6 for further extensions. */
    char    __ifru_pad[28];
  } ifr_ifru;
};














/*
 * Structure used in SIOCGIFCONF request.
 * Used to retrieve interface configuration
 * for machine (useful for programs which
 * must know all networks accessible).
 */

struct ifconf
{
  int     ifc_len;                        /* size of buffer       */
  union
  {
    caddr_t ifcu_buf;
    struct  ifreq *ifcu_req;
  } ifc_ifcu;
};




extern unsigned             if_nametoindex (const char *);
extern char                *if_indextoname (unsigned, char *);
extern struct if_nameindex *if_nameindex (void);
extern void                 if_freenameindex (struct if_nameindex *);





#line 14 "C:\\cygwin\\usr\\include\\asm\\socket.h" 2




















/* Needed for if queries */



























/*
 * Additional options.
 */










#line 44 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 2
#line 1 "C:\\cygwin\\usr\\include\\cygwin\\sockios.h" 1
/* sockios.h */
#line 45 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\uio.h" 1
/* sys/uio.h

   Copyright 1996, 2000, 2001, 2002 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




/* For size_t */
#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 15 "C:\\cygwin\\usr\\include\\sys\\uio.h" 2
/* For ssize_t */
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 17 "C:\\cygwin\\usr\\include\\sys\\uio.h" 2

#line 1 "C:\\cygwin\\usr\\include\\sys\\cdefs.h" 1
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD: src/sys/sys/cdefs.h,v 1.54 2002/05/11 03:58:24 alfred Exp $
 */














































































#line 19 "C:\\cygwin\\usr\\include\\sys\\uio.h" 2



/*
 * Define the uio buffers used for writev, readv.
 */

struct iovec
{
  void *iov_base;
  size_t iov_len;
};

extern ssize_t readv (int filedes, const struct iovec *vector, int count);
extern ssize_t writev (int filedes, const struct iovec *vector, int count);




#line 46 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 47 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 2

struct ucred {
  pid_t			pid;
  __uid32_t		uid;
  __gid32_t		gid;
};

struct linger {
  unsigned short	l_onoff;	/* Linger active	*/
  unsigned short	l_linger;	/* How long to linger for	*/
};

struct msghdr
{
  void *		msg_name;	/* Socket name			*/
  socklen_t		msg_namelen;	/* Length of name		*/
  struct iovec *	msg_iov;	/* Data blocks			*/
  int			msg_iovlen;	/* Number of blocks		*/
  void *		msg_control;	/* Ancillary data		*/
  socklen_t		msg_controllen;	/* Ancillary data buffer length	*/
  int			msg_flags;	/* Received flags on recvmsg	*/
};

struct cmsghdr
{
  socklen_t		cmsg_len;	/* Length of cmsghdr + data	*/
  int			cmsg_level;	/* Protocol			*/
  int			cmsg_type;	/* Protocol type		*/
};



























/* "Socket"-level control message types: */






  
  
  
  
  
  					
  


/* Socket types. */






/* GNU extension flags.  Or them to the type parameter in calls to
   socket(2) to mark socket as nonblocking and/or close-on-exec. */





/* Supported address families. */
/*
 * Address families.
 */























/*
 * Protocol families, same as address families for now.
 */
























/* Maximum queue length specificable by listen.  */


/* Flags we can use with send/ and recv. */









/* Setsockoptions(2) level. Thanks to BSD these must match IPPROTO_xxx */









/* IP options */
#if !(defined(IPTOS_LOWDELAY))



#endif
/* These need to appear somewhere around here */




/* IP options for use with getsockopt/setsockopt */
















/* IPv6 options for use with getsockopt/setsockopt */

















/* IP agnostic options for use with getsockopt/setsockopt */










/* Old WinSock1 values, needed internally */











/* IPX options */


/* TCP options - this way around because someone left a set in the c library includes */
#if !(defined(TCP_NODELAY))


#endif
/* The various priorities. */








#line 16 "C:\\cygwin\\usr\\include\\sys\\socket.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\time.h" 1
/* time.h -- An implementation of the standard Unix <sys/time.h> file.
   Written by Geoffrey Noer <noer@cygnus.com>
   Public domain; no rights reserved. */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 8 "C:\\cygwin\\usr\\include\\sys\\time.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 9 "C:\\cygwin\\usr\\include\\sys\\time.h" 2






struct timeval {
  time_t      tv_sec;
  suseconds_t tv_usec;
};

struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};


#line 1 "C:\\cygwin\\usr\\include\\cygwin\\sys_time.h" 1
/* sys_time.h

   Copyright 2005 Red Hat Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */



#line 1 "C:\\cygwin\\usr\\include\\sys\\select.h" 1
/* select.h
   Copyright 1998, 1999, 2000, 2001, 2009 Red Hat, Inc.

   Written by Geoffrey Noer <noer@cygnus.com>

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */





#line 1 "C:\\cygwin\\usr\\include\\sys\\cdefs.h" 1
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD: src/sys/sys/cdefs.h,v 1.54 2002/05/11 03:58:24 alfred Exp $
 */














































































#line 17 "C:\\cygwin\\usr\\include\\sys\\select.h" 2

/* Get fd_set, and macros like FD_SET */
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 20 "C:\\cygwin\\usr\\include\\sys\\select.h" 2

/* Get definition of timeval.  */
#line 1 "C:\\cygwin\\usr\\include\\sys\\time.h" 1
/* time.h -- An implementation of the standard Unix <sys/time.h> file.
   Written by Geoffrey Noer <noer@cygnus.com>
   Public domain; no rights reserved. */













  
  



  
  











  
  





































					





#line 23 "C:\\cygwin\\usr\\include\\sys\\select.h" 2
#line 1 "C:\\cygwin\\usr\\include\\time.h" 1
/*
 * time.h
 * 
 * Struct and function declarations for dealing with time.
 */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 10 "C:\\cygwin\\usr\\include\\time.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */





































  
  
  





  
  
  
  
  
  
  
  
  









	
	
	
	
	
	




	
	
	
        



	
	
	
	
        










	
	


































  
  
  
  
  
  
  

  


















  
  
  
  
  
  
  


  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  


  


  

  
  









  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  








  
  
  
























  
  
  

  
  



















  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  
















































































































































































  

  


  

  
  

  
  

  

  

  
  
  
  
  

  
  
  

  
    
      
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
	  
        
  


      
        

          
          
        
    

  
  
  

  
  

  


  
  










































































































































































  












#line 11 "C:\\cygwin\\usr\\include\\time.h" 2




/* Get _CLOCKS_PER_SEC_ */
#line 1 "C:\\cygwin\\usr\\include\\machine\\time.h" 1















#line 14 "C:\\cygwin\\usr\\include\\time.h" 2







#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 17 "C:\\cygwin\\usr\\include\\time.h" 2

#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 19 "C:\\cygwin\\usr\\include\\time.h" 2



struct tm
{
  int	tm_sec;
  int	tm_min;
  int	tm_hour;
  int	tm_mday;
  int	tm_mon;
  int	tm_year;
  int	tm_wday;
  int	tm_yday;
  int	tm_isdst;
};

clock_t	   __attribute__((__cdecl__)) clock (void);
double	   __attribute__((__cdecl__)) difftime (time_t _time2, time_t _time1);
time_t	   __attribute__((__cdecl__)) mktime (struct tm *_timeptr);
time_t	   __attribute__((__cdecl__)) time (time_t *_timer);

char	  *__attribute__((__cdecl__)) asctime (const struct tm *_tblock);
char	  *__attribute__((__cdecl__)) ctime (const time_t *_time);
struct tm *__attribute__((__cdecl__)) gmtime (const time_t *_timer);
struct tm *__attribute__((__cdecl__)) localtime (const time_t *_timer);

size_t	   __attribute__((__cdecl__)) strftime (char *_s, size_t _maxsize, const char *_fmt, const struct tm *_t);

char	  *__attribute__((__cdecl__)) asctime_r (const struct tm *, char *);
char	  *__attribute__((__cdecl__)) ctime_r (const time_t *, char *);
struct tm *__attribute__((__cdecl__)) gmtime_r (const time_t *, struct tm *);
struct tm *__attribute__((__cdecl__)) localtime_r (const time_t *, struct tm *);







char      *__attribute__((__cdecl__)) strptime (const char *, const char *, struct tm *);
void      __attribute__((__cdecl__)) tzset (void);
void      __attribute__((__cdecl__)) _tzset_r (struct _reent *);

typedef struct __tzrule_struct
{
  char ch;
  int m;
  int n;
  int d;
  int s;
  time_t change;
  long offset; /* Match type of _timezone. */
} __tzrule_type;

typedef struct __tzinfo_struct
{
  int __tznorth;
  int __tzyear;
  __tzrule_type __tzrule[2];
} __tzinfo_type;

__tzinfo_type *__attribute__((__cdecl__)) __gettzinfo (void);

/* getdate functions */

#if defined(HAVE_GETDATE)


int *__attribute__((__cdecl__)) __getdate_err (void);

struct tm *	__attribute__((__cdecl__)) getdate (const char *);
/* getdate_err is set to one of the following values to indicate the error.
     1  the DATEMSK environment variable is null or undefined,
     2  the template file cannot be opened for reading,
     3  failed to get file status information,
     4  the template file is not a regular file,
     5  an error is encountered while reading the template file,
     6  memory allication failed (not enough memory available),
     7  there is no line in the template that matches the input,
     8  invalid input specification  */

/* getdate_r returns the error code as above */
int		__attribute__((__cdecl__)) getdate_r (const char *, struct tm *);
#endif
/* defines for the opengroup specifications Derived from Issue 1 of the SVID.  */
extern __attribute__((dllimport)) long _timezone;
extern __attribute__((dllimport)) int _daylight;
extern __attribute__((dllimport)) char *_tzname[2];

/* POSIX defines the external tzname being defined in time.h */
#if !(defined(tzname))

#endif




#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */




































































































































































  
    
   
    
   
    
   
    
  





#line 105 "C:\\cygwin\\usr\\include\\time.h" 2


#line 1 "C:\\cygwin\\usr\\include\\cygwin\\time.h" 1
/* time.h

   Copyright 2005, 2007 Red Hat Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







/* Not defined in main time.h */
int __attribute__((__cdecl__)) clock_setres (clockid_t, struct timespec *);

/* GNU extensions. */
time_t __attribute__((__cdecl__)) timelocal (struct tm *);
time_t __attribute__((__cdecl__)) timegm (struct tm *);




extern int daylight __asm__ ("__daylight");


extern long timezone __asm__ ("__timezone");






#line 107 "C:\\cygwin\\usr\\include\\time.h" 2


#line 1 "C:\\cygwin\\usr\\include\\signal.h" 1



#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 4 "C:\\cygwin\\usr\\include\\signal.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\signal.h" 1
/* sys/signal.h */






#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 7 "C:\\cygwin\\usr\\include\\sys\\signal.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */




































































































































































  
    
   
    
   
    
   
    
  





#line 8 "C:\\cygwin\\usr\\include\\sys\\signal.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 9 "C:\\cygwin\\usr\\include\\sys\\signal.h" 2

/* #ifndef __STRICT_ANSI__*/

typedef unsigned long sigset_t;







                        

                        
                        

                        






  
  



  
  
  


  
                                               
  













  
  
  






                         












  
  
                              
                              
  
    

    

  







#line 1 "C:\\cygwin\\usr\\include\\cygwin\\signal.h" 1
/* signal.h

  Copyright 2004, 2005, 2006 Red Hat, Inc.

  This file is part of Cygwin.

  This software is a copyrighted work licensed under the terms of the
  Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
  details. */







struct _fpstate
{
  unsigned long cw;
  unsigned long sw;
  unsigned long tag;
  unsigned long ipoff;
  unsigned long cssel;
  unsigned long dataoff;
  unsigned long datasel;
  unsigned char _st[80];
  unsigned long nxst;
};

struct ucontext
{
  unsigned long cr2;
  unsigned long dr0;
  unsigned long dr1;
  unsigned long dr2;
  unsigned long dr3;
  unsigned long dr6;
  unsigned long dr7;
  struct _fpstate fpstate;
  unsigned long gs;
  unsigned long fs;
  unsigned long es;
  unsigned long ds;
  unsigned long edi;
  unsigned long esi;
  unsigned long ebx;
  unsigned long edx;
  unsigned long ecx;
  unsigned long eax;
  unsigned long ebp;
  unsigned long eip;
  unsigned long cs;
  unsigned long eflags;
  unsigned long esp;
  unsigned long ss;
  unsigned char _internal;
  unsigned long oldmask;
};



typedef union sigval
{
  int sival_int;			/* integer signal value */
  void  *sival_ptr;			/* pointer signal value */
} sigval_t;

typedef struct sigevent
{
  sigval_t sigev_value;			/* signal value */
  int sigev_signo;			/* signal number */
  int sigev_notify;			/* notification type */
  void (*sigev_notify_function) (sigval_t); /* notification function */
  pthread_attr_t *sigev_notify_attributes; /* notification attributes */
} sigevent_t;


struct _sigcommune
{
  __uint32_t _si_code;
  void *_si_read_handle;
  void *_si_write_handle;
  void *_si_process_handle;
  __extension__ union
  {
    int _si_fd;
    void *_si_pipe_fhandler;
    char *_si_str;
  };
};

typedef struct
{
  int si_signo;				/* signal number */
  int si_code;				/* signal code */
  pid_t si_pid;				/* sender's pid */
  uid_t si_uid;				/* sender's uid */
  int si_errno;				/* errno associated with signal */

  __extension__ union
  {
    __uint32_t __pad[32];		/* plan for future growth */
    struct _sigcommune _si_commune;	/* cygwin ipc */
    __extension__ union
    {
      /* timers */
      struct
      {
	union
	{
	  struct
	  {
	    timer_t si_tid;		/* timer id */
	    unsigned int si_overrun;	/* overrun count */
	  };
	  sigval_t si_sigval;		/* signal value */
	  sigval_t si_value;		/* signal value */
	};
      };
    };

    /* SIGCHLD */
    __extension__ struct
    {
      int si_status;			/* exit code */
      clock_t si_utime;			/* user time */
      clock_t si_stime;			/* system time */
    };

    /* core dumping signals */
    void *si_addr;			/* faulting address */
  };
} siginfo_t;


enum
{
  SI_USER = 0,				/* sent by kill, raise, pthread_kill */
  SI_ASYNCIO = 2,			/* sent by AIO completion (currently
					   unimplemented) */
  SI_MESGQ,				/* sent by real time mesq state change
					   (currently unimplemented) */
  SI_TIMER,				/* sent by timer expiration */
  SI_QUEUE,				/* sent by sigqueue (currently
					   unimplemented) */
  SI_KERNEL,				/* sent by system */

  ILL_ILLOPC,				/* illegal opcode */
  ILL_ILLOPN,				/* illegal operand */
  ILL_ILLADR,				/* illegal addressing mode */
  ILL_ILLTRP,				/* illegal trap*/
  ILL_PRVOPC,				/* privileged opcode */
  ILL_PRVREG,				/* privileged register */
  ILL_COPROC,				/* coprocessor error */
  ILL_BADSTK,				/* internal stack error */

  FPE_INTDIV,				/* integer divide by zero */
  FPE_INTOVF,				/* integer overflow */
  FPE_FLTDIV,				/* floating point divide by zero */
  FPE_FLTOVF,				/* floating point overflow */
  FPE_FLTUND,				/* floating point underflow */
  FPE_FLTRES,				/* floating point inexact result */
  FPE_FLTINV,				/* floating point invalid operation */
  FPE_FLTSUB,				/* subscript out of range */

  SEGV_MAPERR,				/* address not mapped to object */
  SEGV_ACCERR,				/* invalid permissions for mapped object */

  BUS_ADRALN,				/* invalid address alignment.  */
  BUS_ADRERR,				/* non-existant physical address.  */
  BUS_OBJERR,				/* object specific hardware error.  */

  CLD_EXITED,				/* child has exited */
  CLD_KILLED,				/* child was killed */
  CLD_DUMPED,				/* child terminated abnormally */
  CLD_TRAPPED,				/* traced child has trapped */
  CLD_STOPPED,				/* child has stopped */
  CLD_CONTINUED				/* stopped child has continued */
};

enum
{
  SIGEV_SIGNAL = 0,			/* a queued signal, with an application
					   defined value, is generated when the
					   event of interest occurs */
  SIGEV_NONE,				/* no asynchronous notification is
					   delivered when the event of interest
					   occurs */
  SIGEV_THREAD				/* a notification function is called to
					   perform notification */
};

typedef void (*_sig_func_ptr)(int);

struct sigaction
{
  __extension__ union
  {
    _sig_func_ptr sa_handler;  		/* SIG_DFL, SIG_IGN, or pointer to a function */
    void  (*sa_sigaction) ( int, siginfo_t *, void * );
  };
  sigset_t sa_mask;
  int sa_flags;
};









/* Used internally by cygwin.  Included here to group everything in one place.
   Do not use.  */





































/* Real-Time signals per SUSv3.  RT_SIGMAX is defined as 8 in limits.h */






int sigwait (const sigset_t *, int *);
int sigwaitinfo (const sigset_t *, siginfo_t *);
int sighold (int);
int sigignore (int);
int sigrelse (int);
_sig_func_ptr sigset (int, _sig_func_ptr);

int sigqueue(pid_t, int, const union sigval);
int siginterrupt (int, int);



extern const char __attribute__((dllimport)) *sys_sigabbrev[];





#line 96 "C:\\cygwin\\usr\\include\\sys\\signal.h" 2







	
	
	






/* These depend upon the type of sigset_t, which right now 
   is always a long.. They're in the POSIX namespace, but
   are not ANSI. */






int __attribute__((__cdecl__)) sigprocmask (int how, const sigset_t *set, sigset_t *oset);


int __attribute__((__cdecl__)) pthread_sigmask (int how, const sigset_t *set, sigset_t *oset);

/* protos for functions found in winsup sources for CYGWIN */







int __attribute__((__cdecl__)) kill (pid_t, int);
int __attribute__((__cdecl__)) killpg (pid_t, int);
int __attribute__((__cdecl__)) sigaction (int, const struct sigaction *, struct sigaction *);
int __attribute__((__cdecl__)) sigaddset (sigset_t *, const int);
int __attribute__((__cdecl__)) sigdelset (sigset_t *, const int);
int __attribute__((__cdecl__)) sigismember (const sigset_t *, int);
int __attribute__((__cdecl__)) sigfillset (sigset_t *);
int __attribute__((__cdecl__)) sigemptyset (sigset_t *);
int __attribute__((__cdecl__)) sigpending (sigset_t *);
int __attribute__((__cdecl__)) sigsuspend (const sigset_t *);
int __attribute__((__cdecl__)) sigpause (int);







int __attribute__((__cdecl__)) pthread_kill (pthread_t thread, int sig);


/*  3.3.8 Synchronously Accept a Signal, P1003.1b-1993, p. 76
    NOTE: P1003.1c/D10, p. 39 adds sigwait().  */

int __attribute__((__cdecl__)) sigwaitinfo (const sigset_t *set, siginfo_t *info);
int __attribute__((__cdecl__)) sigtimedwait 
(const sigset_t *set, siginfo_t *info, const struct timespec *timeout)
;
int __attribute__((__cdecl__)) sigwait (const sigset_t *set, int *sig);

/*  3.3.9 Queue a Signal to a Process, P1003.1b-1993, p. 78 */
int __attribute__((__cdecl__)) sigqueue (pid_t pid, int signo, const union sigval value);



/* #endif __STRICT_ANSI__ */




























































































































#line 5 "C:\\cygwin\\usr\\include\\signal.h" 2



typedef int	sig_atomic_t;		/* Atomic entity type (ANSI) */

typedef _sig_func_ptr sighandler_t;	/* glibc naming */





struct _reent;

_sig_func_ptr __attribute__((__cdecl__)) _signal_r (struct _reent *, int, _sig_func_ptr);
int	__attribute__((__cdecl__)) _raise_r (struct _reent *, int);


_sig_func_ptr __attribute__((__cdecl__)) signal (int, _sig_func_ptr);
int	__attribute__((__cdecl__)) raise (int);




#line 112 "C:\\cygwin\\usr\\include\\time.h" 2




/* Clocks, P1003.1b-1993, p. 263 */

int __attribute__((__cdecl__)) clock_settime (clockid_t clock_id, const struct timespec *tp);
int __attribute__((__cdecl__)) clock_gettime (clockid_t clock_id, struct timespec *tp);
int __attribute__((__cdecl__)) clock_getres (clockid_t clock_id, struct timespec *res);

/* Create a Per-Process Timer, P1003.1b-1993, p. 264 */

int __attribute__((__cdecl__)) timer_create 
(clockid_t clock_id, struct sigevent *evp, timer_t *timerid);

/* Delete a Per_process Timer, P1003.1b-1993, p. 266 */

int __attribute__((__cdecl__)) timer_delete (timer_t timerid);

/* Per-Process Timers, P1003.1b-1993, p. 267 */

int __attribute__((__cdecl__)) timer_settime 
(timer_t timerid, int flags, const struct itimerspec *value,
 struct itimerspec *ovalue);
int __attribute__((__cdecl__)) timer_gettime (timer_t timerid, struct itimerspec *value);
int __attribute__((__cdecl__)) timer_getoverrun (timer_t timerid);

/* High Resolution Sleep, P1003.1b-1993, p. 269 */

int __attribute__((__cdecl__)) nanosleep (const struct timespec *rqtp, struct timespec *rmtp);








/* CPU-time Clock Attributes, P1003.4b/D8, p. 54 */

/* values for the clock enable attribute */




/* values for the pthread cputime_clock_allowed attribute */


                           /*   CPU-time clock attached to that thread */
                           /*   shall be accessible. */

                           /*   thread shall not have a CPU-time clock */
                           /*   accessible. */

/* Manifest Constants, P1003.1b-1993, p. 262 */



/* Flag indicating time is "absolute" with respect to the clock
   associated with a time.  */



/* Manifest Constants, P1003.4b/D8, p. 55 */


















/*  The identifier for the system-wide monotonic clock, which is defined
 *      as a clock whose value cannot be set via clock_settime() and which 
 *          cannot have backward clock jumps. */





















#line 24 "C:\\cygwin\\usr\\include\\sys\\select.h" 2

/* Get definition of sigset_t. */
#line 1 "C:\\cygwin\\usr\\include\\signal.h" 1




























#line 27 "C:\\cygwin\\usr\\include\\sys\\select.h" 2



int select (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds,
 _types_fd_set *__exceptfds, struct timeval *__timeout);
int pselect (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds,
 _types_fd_set *__exceptfds, const struct timespec *__timeout,
 const sigset_t *__set);





#line 13 "C:\\cygwin\\usr\\include\\cygwin\\sys_time.h" 2





int futimes (int, const struct timeval *);
int lutimes (const char *, const struct timeval *);






#line 23 "C:\\cygwin\\usr\\include\\sys\\time.h" 2






struct  itimerval {
  struct  timeval it_interval;
  struct  timeval it_value;
};

/* BSD time macros used by RTEMS code */

/* Convenience macros for operations on timevals.
   NOTE: `timercmp' does not work for >= or <=.  */


























int __attribute__((__cdecl__)) gettimeofday (struct timeval *__p, void *__tz);
int __attribute__((__cdecl__)) settimeofday (const struct timeval *, const struct timezone *);
int __attribute__((__cdecl__)) utimes (const char *__path, const struct timeval *__tvp);
int __attribute__((__cdecl__)) getitimer (int __which, struct itimerval *__value);
int __attribute__((__cdecl__)) setitimer (int __which, const struct itimerval *__value,
 struct itimerval *__ovalue);





#line 17 "C:\\cygwin\\usr\\include\\sys\\socket.h" 2





/* SUS symbolic values for the second parm to shutdown(2) */





  int accept (int, struct sockaddr *__peer, socklen_t *);
  int accept4 (int, struct sockaddr *__peer, socklen_t *, int flags);
  int bind (int, const struct sockaddr *__my_addr, socklen_t __addrlen);
  int connect (int, const struct sockaddr *, socklen_t);
  int getpeername (int, struct sockaddr *__peer, socklen_t *);
  int getsockname (int, struct sockaddr *__addr, socklen_t *);
  int listen (int, int __n);
  ssize_t recv (int, void *__buff, size_t __len, int __flags);
  ssize_t recvfrom (int, void *__buff, size_t __len, int __flags,
		    struct sockaddr *__from, socklen_t *__fromlen);
  ssize_t recvmsg(int s, struct msghdr *msg, int flags);
  ssize_t send (int, const void *__buff, size_t __len, int __flags);
  ssize_t sendmsg(int s, const struct msghdr *msg, int flags);
  ssize_t sendto (int, const void *, size_t __len, int __flags,
		  const struct sockaddr *__to, socklen_t __tolen);
  int setsockopt (int __s, int __level, int __optname, const void *optval,
		  socklen_t __optlen);
  int getsockopt (int __s, int __level, int __optname, void *__optval,
		  socklen_t *__optlen);
  int shutdown (int, int);
  int socket (int __family, int __type, int __protocol);
  int socketpair (int __domain, int __type, int __protocol, int *__socket_vec);

  struct servent *getservbyname (const char *__name, const char *__proto);





#line 65 "C:\\cygwin\\usr\\include\\netdb.h" 2

#line 1 "C:\\cygwin\\usr\\include\\netinet\\in.h" 1
/* netinet/in.h

   Copyright 1998, 2001, 2006 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\cygwin\\in.h" 1
/*
 * INET		An implementation of the TCP/IP protocol suite for the LINUX
 *		operating system.  INET is implemented using the  BSD Socket
 *		interface as the means of communication with the user level.
 *
 *		Definitions of the Internet Protocol.
 *
 * Version:	@(#)in.h	1.0.1	04/21/93
 *
 * Authors:	Original taken from the GNU Project <netinet/in.h> file.
 *		Fred N. van Kempen, <waltje@uWalt.NL.Mugnet.ORG>
 *
 *		This program is free software; you can redistribute it and/or
 *		modify it under the terms of the GNU General Public License
 *		as published by the Free Software Foundation; either version
 *		2 of the License, or (at your option) any later version.
 */



#line 1 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 1
/* cygwin/socket.h

   Copyright 1999, 2000, 2001, 2005, 2006, 2007, 2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */


















  
  










  
  
  
  








  
  
  



  
  




  
  
  
  
  
  
  




  
  
  



































  
  
  
  
  
  					
  



















































































































































































#line 21 "C:\\cygwin\\usr\\include\\cygwin\\in.h" 2

typedef uint16_t in_port_t;
typedef uint32_t in_addr_t;

/* Standard well-defined IP protocols.  If you ever add one here, don't
   forget to define it below. */
enum
{
  IPPROTO_IP = 0,		/* Dummy protocol for TCP		*/
  IPPROTO_HOPOPTS = 0,		/* IPv6 Hop-by-Hop options		*/
  IPPROTO_ICMP = 1,		/* Internet Control Message Protocol	*/
  IPPROTO_IGMP = 2,		/* Internet Gateway Management Protocol */
  IPPROTO_IPIP = 4,		/* IPIP tunnels (older KA9Q tunnels use 94) */
  IPPROTO_TCP = 6,		/* Transmission Control Protocol	*/
  IPPROTO_EGP = 8,		/* Exterior Gateway Protocol		*/
  IPPROTO_PUP = 12,		/* PUP protocol				*/
  IPPROTO_UDP = 17,		/* User Datagram Protocol		*/
  IPPROTO_IDP = 22,		/* XNS IDP protocol			*/
  IPPROTO_IPV6 = 41,		/* IPv6 header				*/
  IPPROTO_ROUTING = 43,		/* IPv6 Routing header			*/
  IPPROTO_FRAGMENT = 44,	/* IPv6 fragmentation header		*/
  IPPROTO_ESP = 50,		/* encapsulating security payload	*/
  IPPROTO_AH = 51,		/* authentication header		*/
  IPPROTO_ICMPV6 = 58,		/* ICMPv6				*/
  IPPROTO_NONE = 59,		/* IPv6 no next header			*/
  IPPROTO_DSTOPTS = 60,		/* IPv6 Destination options		*/
  IPPROTO_RAW = 255,		/* Raw IP packets			*/
  IPPROTO_MAX
};

/* Define IPPROTO_xxx values to accomodate SUSv3 */




















/* Standard well-known ports.  *//* from winsup/include/netinet/in.h */
enum
{
  IPPORT_ECHO = 7,		/* Echo service.  */
  IPPORT_DISCARD = 9,		/* Discard transmissions service.  */
  IPPORT_SYSTAT = 11,		/* System status service.  */
  IPPORT_DAYTIME = 13,	/* Time of day service.  */
  IPPORT_NETSTAT = 15,	/* Network status service.  */
  IPPORT_FTP = 21,		/* File Transfer Protocol.  */
  IPPORT_TELNET = 23,		/* Telnet protocol.  */
  IPPORT_SMTP = 25,		/* Simple Mail Transfer Protocol.  */
  IPPORT_TIMESERVER = 37,	/* Timeserver service.  */
  IPPORT_NAMESERVER = 42,	/* Domain Name Service.  */
  IPPORT_WHOIS = 43,		/* Internet Whois service.  */
  IPPORT_MTP = 57,

  IPPORT_TFTP = 69,		/* Trivial File Transfer Protocol.  */
  IPPORT_RJE = 77,
  IPPORT_FINGER = 79,		/* Finger service.  */
  IPPORT_TTYLINK = 87,
  IPPORT_SUPDUP = 95,		/* SUPDUP protocol.  */


  IPPORT_EXECSERVER = 512,	/* execd service.  */
  IPPORT_LOGINSERVER = 513,	/* rlogind service.  */
  IPPORT_CMDSERVER = 514,
  IPPORT_EFSSERVER = 520,

  /* UDP ports.  */
  IPPORT_BIFFUDP = 512,
  IPPORT_WHOSERVER = 513,
  IPPORT_ROUTESERVER = 520,

  /* Ports less than this value are reserved for privileged processes.  */
  IPPORT_RESERVED = 1024,

  /* Ports greater this value are reserved for (non-privileged) servers.  */
  IPPORT_USERRESERVED = 5000
};

/* Internet address. */
struct in_addr
{
  in_addr_t s_addr;
};

/* Request struct for IPv4 multicast socket ops */

struct ip_mreq
{
  struct in_addr imr_multiaddr;	/* IP multicast address of group */
  struct in_addr imr_interface;	/* local IP address of interface */
};

struct ip_mreq_source
{
  struct in_addr imr_multiaddr;
  struct in_addr imr_sourceaddr;
  struct in_addr imr_interface;
};

struct ip_msfilter
{
  struct in_addr imsf_multiaddr;
  struct in_addr imsf_interface;
  uint32_t       imsf_fmode;
  uint32_t       imsf_numsrc;
  struct in_addr imsf_slist[1];
};





struct in_pktinfo
{
  struct in_addr ipi_addr;
  uint32_t       ipi_ifindex;
};

/* Request struct for IP agnostic multicast socket ops */

struct group_req
{
  uint32_t                gr_interface;
  struct sockaddr_storage gr_group;
};

struct group_source_req
{
  uint32_t                gsr_interface;
  struct sockaddr_storage gsr_group;
  struct sockaddr_storage gsr_source;
};

struct group_filter
{
  uint32_t                gf_interface;
  struct sockaddr_storage gf_group;
  uint32_t                gf_fmode;
  uint32_t                gf_numsrc;
  struct sockaddr_storage gf_slist[1];
};





/* Structure describing an Internet (IP) socket address. */

struct sockaddr_in
{
  sa_family_t	 sin_family;	/* Address family		*/
  in_port_t	 sin_port;	/* Port number			*/
  struct in_addr sin_addr;	/* Internet address		*/

  /* Pad to size of `struct sockaddr'. */
  unsigned char  __pad[16 - sizeof(short int)
			- sizeof(unsigned short int) - sizeof(struct in_addr)];
};


/*
 * Definitions of the bits in an Internet address integer.
 * On subnets, host and network parts are found according
 * to the subnet mask, not these masks.
 */
























/* Address to accept any incoming messages. */


/* Address to send to all hosts. */


/* Address indicating an error return. */


/* Network number for local host loopback. */


/* Address to loopback in software to local host.  */



/* Defines for Multicast INADDR */







/* <asm/byteorder.h> contains the htonl type stuff.. */

#line 1 "C:\\cygwin\\usr\\include\\asm\\byteorder.h" 1
/* asm/byteorder.h

   Copyright 1996, 1998, 2001, 2006, 2009 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 14 "C:\\cygwin\\usr\\include\\asm\\byteorder.h" 2
#line 1 "C:\\cygwin\\usr\\include\\stdint.h" 1
/* stdint.h - integer types

   Copyright 2003, 2006, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







































































































































































#line 15 "C:\\cygwin\\usr\\include\\asm\\byteorder.h" 2










extern uint32_t	ntohl(uint32_t);
extern uint16_t	ntohs(uint16_t);
extern uint32_t	htonl(uint32_t);
extern uint16_t	htons(uint16_t);

extern __inline__ __attribute__ ((__always_inline__)) uint32_t __ntohl(uint32_t);
extern __inline__ __attribute__ ((__always_inline__)) uint16_t __ntohs(uint16_t);

extern __inline__ __attribute__ ((__always_inline__)) uint32_t
__ntohl(uint32_t x)
{
	__asm__("xchgb %b0,%h0\n\t"	/* swap lower bytes	*/
		"rorl $16,%0\n\t"	/* swap words		*/
		"xchgb %b0,%h0"		/* swap higher bytes	*/
		:"=q" (x)
		: "0" (x));
	return x;
}







extern __inline__ __attribute__ ((__always_inline__)) uint16_t
__ntohs(uint16_t x)
{
	__asm__("xchgb %b0,%h0"		/* swap bytes		*/
		: "=q" (x)
		:  "0" (x));
	return x;
}
































#line 206 "C:\\cygwin\\usr\\include\\cygwin\\in.h" 2

/* Some random defines to make it easier in the kernel.. */






#line 1 "C:\\cygwin\\usr\\include\\cygwin\\in6.h" 1
/* cygwin/in6.h

   Copyright 2006, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

/* NOTE:  This file is NOT for direct inclusion.  Use netinet/in.h. */































































struct in6_addr
{
  union
    {
      uint8_t 	  __s6_addr[16];
      uint16_t 	  __s6_addr16[8];
      uint32_t 	  __s6_addr32[4];
    } __u6;



};

struct ipv6_mreq
{
  struct in6_addr ipv6mr_multiaddr;
  uint32_t        ipv6mr_interface;
};

struct in6_pktinfo
{
  struct in6_addr ipi6_addr;
  uint32_t        ipi6_ifindex;
};




struct sockaddr_in6
{
  sa_family_t	  sin6_family;		/* AF_INET6 */
  in_port_t	  sin6_port;		/* Port number. */
  uint32_t	  sin6_flowinfo;	/* Traffic class and flow inf. */
  struct in6_addr sin6_addr;		/* IPv6 address. */
  uint32_t	  sin6_scope_id;	/* Set of interfaces for a scope. */
};




extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;


#line 214 "C:\\cygwin\\usr\\include\\cygwin\\in.h" 2


#line 14 "C:\\cygwin\\usr\\include\\netinet\\in.h" 2





extern int bindresvport (int, struct sockaddr_in *);
extern int bindresvport_sa (int, struct sockaddr *);





#line 66 "C:\\cygwin\\usr\\include\\netdb.h" 2

/*
 * Structures returned by network data base library.  All addresses are
 * supplied in host order, and returned in network order (suitable for
 * use in system calls).
 */

  /* Different from the linux versions - note the shorts.. */
struct	hostent {
	const char	*h_name;	/* official name of host */
	char	**h_aliases;	/* alias list */
	short	h_addrtype;	/* host address type */
	short	h_length;	/* length of address */
	char	**h_addr_list;	/* list of addresses from name server */

};

/*
 * Assumption here is that a network number
 * fits in an unsigned long -- probably a poor one.
 */

struct	netent {
	char		*n_name;	/* official name of net */
	char		**n_aliases;	/* alias list */
	short		n_addrtype;	/* net address type */
	uint32_t	n_net;		/* network # */
};

struct	servent {
	char	*s_name;	/* official service name */
	char	**s_aliases;	/* alias list */
	short   s_port;		/* port # */
	char	*s_proto;	/* protocol to use */
};

struct	protoent
{
  char	*p_name;	/* official protocol name */
  char	**p_aliases;	/* alias list */
  short	p_proto;	/* protocol # */
};

struct rpcent {
	char	*r_name;	/* name of server for this rpc program */
	char	**r_aliases;	/* alias list */
	int	r_number;	/* rpc program number */
};

struct addrinfo {
  int             ai_flags;		/* input flags */
  int             ai_family;		/* address family of socket */
  int             ai_socktype;		/* socket type */
  int             ai_protocol;		/* ai_protocol */
  socklen_t       ai_addrlen;		/* length of socket address */
  char            *ai_canonname;	/* canonical name of service location */
  struct sockaddr *ai_addr;		/* socket address of socket */
  struct addrinfo *ai_next;		/* pointer to next in list */
};

/*
 * Error return codes from gethostbyname() and gethostbyaddr()
 * (left in extern int h_errno).
 */




extern __attribute__((dllimport)) int h_errno;










































void		endhostent (void);
void		endnetent (void);
void		endprotoent (void);
void		endservent (void);
void		endrpcent  (void);
struct hostent	*gethostbyaddr (const char *, int, int);
struct hostent	*gethostbyname (const char *);
struct hostent	*gethostent (void);
struct netent	*getnetbyaddr (long, int); /* u_long? */
struct netent	*getnetbyname (const char *);
struct netent	*getnetent (void);
struct protoent	*getprotobyname (const char *);
struct protoent	*getprotobynumber (int);
struct protoent	*getprotoent (void);
struct servent	*getservbyname (const char *, const char *);
struct servent	*getservbyport (int, const char *);
struct servent	*getservent (void);
struct rpcent	*getrpcent (void);
struct rpcent	*getrpcbyname (const char *);
struct rpcent	*getrpcbynumber (int);
const char      *hstrerror (int);
void		herror (const char *);
void		sethostent (int);
void		setnetent (int);
void		setprotoent (int);
void		setservent (int);
void		setrpcent (int);
void		freeaddrinfo (struct addrinfo *);
const char	*gai_strerror (int);
int		getaddrinfo (const char *, const char *,
			     const struct addrinfo *, struct addrinfo **);
int		getnameinfo (const struct sockaddr *, socklen_t, char *,
			     socklen_t, char *, socklen_t, int);

int		rcmd (char **, uint16_t, const char *, const char *,
		      const char *, int *);
int		rcmd_af (char **, uint16_t, const char *, const char *,
			 const char *, int *, int);
int		rexec (char **, uint16_t rport, char *, char *, char *, int *);
int		rresvport (int *);
int		rresvport_af (int *, int);
int		iruserok (unsigned long, int, const char *, const char *);
int		iruserok_sa (const void *, int, int, const char *,
			     const char *);
int		ruserok (const char *, int, const char *, const char *);





#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\unistd.h" 1



#line 1 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 1






#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 6 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 7 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\_types.h" 1
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  This file lives in the `sys' directory so targets can provide
   their own if desired (or they can put target dependant conditionals here).
*/

































				




















  
  
  
    
    
  










#line 8 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2


#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */




















typedef int ptrdiff_t;








/* If this symbol has done its job, get rid of it.  */



/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 9 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2

extern char **environ;

void	__attribute__((__cdecl__)) _exit (int __status) __attribute__ ((noreturn));

int	__attribute__((__cdecl__)) access (const char *__path, int __amode);
unsigned  __attribute__((__cdecl__)) alarm (unsigned __secs);
int     __attribute__((__cdecl__)) chdir (const char *__path);
int     __attribute__((__cdecl__)) chmod (const char *__path, mode_t __mode);

int     __attribute__((__cdecl__)) chown (const char *__path, uid_t __owner, gid_t __group);


int     __attribute__((__cdecl__)) chroot (const char *__path);

int     __attribute__((__cdecl__)) close (int __fildes);

size_t	__attribute__((__cdecl__)) confstr (int __name, char *__buf, size_t __len);

char *  __attribute__((__cdecl__)) ctermid (char *__s);
char *  __attribute__((__cdecl__)) cuserid (char *__s);

int	__attribute__((__cdecl__)) daemon (int nochdir, int noclose);

int     __attribute__((__cdecl__)) dup (int __fildes);
int     __attribute__((__cdecl__)) dup2 (int __fildes, int __fildes2);

int     __attribute__((__cdecl__)) dup3 (int __fildes, int __fildes2, int flags);
int	__attribute__((__cdecl__)) eaccess (const char *__path, int __mode);
void	__attribute__((__cdecl__)) endusershell (void);
int	__attribute__((__cdecl__)) euidaccess (const char *__path, int __mode);

int     __attribute__((__cdecl__)) execl (const char *__path, const char *, ...);
int     __attribute__((__cdecl__)) execle (const char *__path, const char *, ...);
int     __attribute__((__cdecl__)) execlp (const char *__file, const char *, ...);
int     __attribute__((__cdecl__)) execv (const char *__path, char * const __argv[]);
int     __attribute__((__cdecl__)) execve (const char *__path, char * const __argv[], char * const __envp[]);
int     __attribute__((__cdecl__)) execvp (const char *__file, char * const __argv[]);

int     __attribute__((__cdecl__)) execvpe (const char *__file, char * const __argv[], char * const __envp[]);
int	__attribute__((__cdecl__)) faccessat (int __dirfd, const char *__path, int __mode, int __flags);


int     __attribute__((__cdecl__)) fchdir (int __fildes);

int     __attribute__((__cdecl__)) fchmod (int __fildes, mode_t __mode);

int     __attribute__((__cdecl__)) fchown (int __fildes, uid_t __owner, gid_t __group);


int	__attribute__((__cdecl__)) fchownat (int __dirfd, const char *__path, uid_t __owner, gid_t __group, int __flags);
int	__attribute__((__cdecl__)) fexecve (int __fd, char * const __argv[], char * const __envp[]);

pid_t   __attribute__((__cdecl__)) fork (void);
long    __attribute__((__cdecl__)) fpathconf (int __fd, int __name);
int     __attribute__((__cdecl__)) fsync (int __fd);
int     __attribute__((__cdecl__)) fdatasync (int __fd);
char *  __attribute__((__cdecl__)) getcwd (char *__buf, size_t __size);

int	__attribute__((__cdecl__)) getdomainname (char *__name, size_t __len);


gid_t   __attribute__((__cdecl__)) getegid (void);
uid_t   __attribute__((__cdecl__)) geteuid (void);
gid_t   __attribute__((__cdecl__)) getgid (void);

int     __attribute__((__cdecl__)) getgroups (int __gidsetsize, gid_t __grouplist[]);

long    __attribute__((__cdecl__)) gethostid (void);

char *  __attribute__((__cdecl__)) getlogin (void);

int __attribute__((__cdecl__)) getlogin_r (char *name, size_t namesize);

char *  __attribute__((__cdecl__)) getpass (const char *__prompt);
int	__attribute__((__cdecl__)) getpagesize (void);

int    __attribute__((__cdecl__)) getpeereid (int, uid_t *, gid_t *);

pid_t   __attribute__((__cdecl__)) getpgid (pid_t);
pid_t   __attribute__((__cdecl__)) getpgrp (void);
pid_t   __attribute__((__cdecl__)) getpid (void);
pid_t   __attribute__((__cdecl__)) getppid (void);

pid_t   __attribute__((__cdecl__)) getsid (pid_t);


uid_t   __attribute__((__cdecl__)) getuid (void);


char *	__attribute__((__cdecl__)) getusershell (void);
char *  __attribute__((__cdecl__)) getwd (char *__buf);
int	__attribute__((__cdecl__)) iruserok (unsigned long raddr, int superuser, const char *ruser, const char *luser);

int     __attribute__((__cdecl__)) isatty (int __fildes);

int     __attribute__((__cdecl__)) lchown (const char *__path, uid_t __owner, gid_t __group);

int     __attribute__((__cdecl__)) link (const char *__path1, const char *__path2);

int     __attribute__((__cdecl__)) linkat (int __dirfd1, const char *__path1, int __dirfd2, const char *__path2, int __flags);

int	__attribute__((__cdecl__)) nice (int __nice_value);

off_t   __attribute__((__cdecl__)) lseek (int __fildes, off_t __offset, int __whence);






int     __attribute__((__cdecl__)) lockf (int __fd, int __cmd, off_t __len);

long    __attribute__((__cdecl__)) pathconf (const char *__path, int __name);
int     __attribute__((__cdecl__)) pause (void);

int	__attribute__((__cdecl__)) pthread_atfork (void(*)(void), void(*)(void), void(*)(void));

int     __attribute__((__cdecl__)) pipe (int __fildes[2]);

int     __attribute__((__cdecl__)) pipe2 (int __fildes[2], int flags);

ssize_t __attribute__((__cdecl__)) pread (int __fd, void *__buf, size_t __nbytes, off_t __offset);
ssize_t __attribute__((__cdecl__)) pwrite (int __fd, const void *__buf, size_t __nbytes, off_t __offset);
_ssize_t __attribute__((__cdecl__)) read (int __fd, void *__buf, size_t __nbyte);

int	__attribute__((__cdecl__)) rresvport (int *__alport);
int	__attribute__((__cdecl__)) revoke (char *__path);

int     __attribute__((__cdecl__)) rmdir (const char *__path);

int	__attribute__((__cdecl__)) ruserok (const char *rhost, int superuser, const char *ruser, const char *luser);

void *  __attribute__((__cdecl__)) sbrk (ptrdiff_t __incr);


int     __attribute__((__cdecl__)) setegid (gid_t __gid);
int     __attribute__((__cdecl__)) seteuid (uid_t __uid);

int     __attribute__((__cdecl__)) setgid (gid_t __gid);


int	__attribute__((__cdecl__)) setgroups (int ngroups, const gid_t *grouplist);

int     __attribute__((__cdecl__)) setpgid (pid_t __pid, pid_t __pgid);
int     __attribute__((__cdecl__)) setpgrp (void);

int	__attribute__((__cdecl__)) setregid (gid_t __rgid, gid_t __egid);
int	__attribute__((__cdecl__)) setreuid (uid_t __ruid, uid_t __euid);

pid_t   __attribute__((__cdecl__)) setsid (void);

int     __attribute__((__cdecl__)) setuid (uid_t __uid);


void	__attribute__((__cdecl__)) setusershell (void);

unsigned __attribute__((__cdecl__)) sleep (unsigned int __seconds);
void    __attribute__((__cdecl__)) swab (const void *, void *, ssize_t);
long    __attribute__((__cdecl__)) sysconf (int __name);
pid_t   __attribute__((__cdecl__)) tcgetpgrp (int __fildes);
int     __attribute__((__cdecl__)) tcsetpgrp (int __fildes, pid_t __pgrp_id);
char *  __attribute__((__cdecl__)) ttyname (int __fildes);

int     __attribute__((__cdecl__)) ttyname_r (int, char *, size_t); 

int     __attribute__((__cdecl__)) unlink (const char *__path);
int 	__attribute__((__cdecl__)) usleep (useconds_t __useconds);
int     __attribute__((__cdecl__)) vhangup (void);
_ssize_t __attribute__((__cdecl__)) write (int __fd, const void *__buf, size_t __nbyte);



#line 1 "C:\\cygwin\\usr\\include\\getopt.h" 1
/*
 * Copyright (c) 1987, 1993, 1994, 1996
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by the University of
 *  California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */











extern int __attribute__((dllimport)) opterr;	/* if error message should be printed */
extern int __attribute__((dllimport)) optind;	/* index into parent argv vector */
extern int __attribute__((dllimport)) optopt;	/* character checked for validity */
extern int __attribute__((dllimport)) optreset;	/* reset getopt */
extern char __attribute__((dllimport)) *optarg;	/* argument associated with option */

int getopt (int, char * const *, const char *);













	
	
	
	


















#line 139 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2








pid_t   __attribute__((__cdecl__)) vfork (void);





















int     __attribute__((__cdecl__)) ftruncate (int __fd, off_t __length);
int     __attribute__((__cdecl__)) truncate (const char *, off_t __length);



int	__attribute__((__cdecl__)) getdtablesize (void);
int	__attribute__((__cdecl__)) setdtablesize (int);
useconds_t __attribute__((__cdecl__)) ualarm (useconds_t __useconds, useconds_t __interval);

/* winsock[2].h defines as __stdcall, and with int as 2nd arg */
 int	__attribute__((__cdecl__)) gethostname (char *__name, size_t __len);

char *	__attribute__((__cdecl__)) mktemp (char *);


void    __attribute__((__cdecl__)) sync (void);

ssize_t __attribute__((__cdecl__)) readlink (const char *__path, char *__buf, size_t __buflen);

ssize_t	__attribute__((__cdecl__)) readlinkat (int __dirfd1, const char *__path, char *__buf, size_t __buflen);

int     __attribute__((__cdecl__)) symlink (const char *__name1, const char *__name2);

int	__attribute__((__cdecl__)) symlinkat (const char *, int, const char *);
int	__attribute__((__cdecl__)) unlinkat (int, const char *, int);










#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */




































































































































































  
    
   
    
   
    
   
    
  





#line 188 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2





/*
 *  sysconf values per IEEE Std 1003.1, 2008 Edition
 */











/* These are non-POSIX values we accidentally introduced in 2000 without
   guarding them.  Keeping them unguarded for backward compatibility. */




/* End of non-POSIX values. */


































/* _SC_THREAD_PRIO_PROTECT was _SC_THREAD_PRIO_CEILING in early drafts */
























































































/*
 *  pathconf values per IEEE Std 1003.1, 2008 Edition
 */























/* Ask for POSIX permission bits support. */

/* Ask for full POSIX permission support including uid/gid settings. */


/*
 *  confstr values per IEEE Std 1003.1, 2004 Edition
 */

























































#line 4 "C:\\cygwin\\usr\\include\\unistd.h" 2


#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\fcntl.h" 1
/* fcntl.h

   Copyright 1996, 1998, 2001, 2005, 2006, 2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\sys\\fcntl.h" 1


#line 1 "C:\\cygwin\\usr\\include\\sys\\_default_fcntl.h" 1






#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 5 "C:\\cygwin\\usr\\include\\sys\\_default_fcntl.h" 2




















/*
 * Flag values for open(2) and fcntl(2)
 * The kernel adds 1 to the open modes to turn it into some
 * combination of FREAD and FWRITE.
 */








/*	O_NDELAY	_FNDELAY 	set in include/fcntl.h */
/*	O_NDELAY	_FNBIO 		set in include/fcntl.h */


/* For machines which care - */








/* O_CLOEXEC is the Linux equivalent to O_NOINHERIT */


/* The windows header files define versions with a leading underscore.  */













/*
 * Flags that work for fcntl(fd, F_SETFL, FXXXX)
 */







/*
 * Flags that are disallowed for fcntl's (FCNTLCANT);
 * used for opens, internal state, or locking.
 */







/*
 * The rest of the flags, used only for opens
 */







/* XXX close on exec request; must match UF_EXCLOSE in user.h */


/* fcntl(2) requests */





















/* fcntl(2) flags (l_type field of flock structure) */







/* Special descriptor value to denote the cwd in calls to openat(2) etc. */


/* Flag values for faccessat2) et al. */





/*#include <sys/stdtypes.h>*/




	
	
	
	
	
	



/* extended file segment locking set data type */
struct eflock {
	short	l_type;		/* F_RDLCK, F_WRLCK, or F_UNLCK */
	short	l_whence;	/* flag to choose starting offset */
	long	l_start;	/* relative offset, in bytes */
	long	l_len;		/* length, in bytes; 0 means lock to EOF */
	short	l_pid;		/* returned with F_GETLK */
	short	l_xxx;		/* reserved for future use */
	long	l_rpid;		/* Remote process id wanting this lock */
	long	l_rsys;		/* Remote system id wanting this lock */
};

#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 120 "C:\\cygwin\\usr\\include\\sys\\_default_fcntl.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\stat.h" 1






#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 6 "C:\\cygwin\\usr\\include\\sys\\stat.h" 2
#line 1 "C:\\cygwin\\usr\\include\\time.h" 1
/*
 * time.h
 * 
 * Struct and function declarations for dealing with time.
 */



























  
  
  
  
  
  
  
  
  































  
  
  
  
  
  
  




  
  
  


























































  








  
   
























                           
                           

                           
                           





















































#line 7 "C:\\cygwin\\usr\\include\\sys\\stat.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 8 "C:\\cygwin\\usr\\include\\sys\\stat.h" 2

/* dj's stat defines _STAT_H_ */

/* It is intended that the layout of this structure not change when the
   sizes of any of the basic types change (short, int, long) [via a compile
   time option].  */


#line 1 "C:\\cygwin\\usr\\include\\cygwin\\stat.h" 1
/* cygwin/stat.h

   Copyright 2002, 2007, 2010 Red Hat Inc.
   Written by Corinna Vinschen <corinna@vinschen.de>

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */










  
  
  
  
  
  
  
  
  
  
  
  
  
  




  
  
  
  
  
  
  
  
  
  
  
  
  
  







struct stat
{
  dev_t         st_dev;
  ino_t         st_ino;
  mode_t        st_mode;
  nlink_t       st_nlink;
  uid_t         st_uid;
  gid_t         st_gid;
  dev_t         st_rdev;
  off_t         st_size;
  timestruc_t   st_atim;
  timestruc_t   st_mtim;
  timestruc_t   st_ctim;
  blksize_t     st_blksize;
  blkcnt_t      st_blocks;
  timestruc_t   st_birthtim;
};






/* POSIX IPC objects are not implemented as distinct file types, so the
   below macros have to return 0.  The expression is supposed to catch
   illegal usage with non-stat parameters. */








#line 16 "C:\\cygwin\\usr\\include\\sys\\stat.h" 2






  
  
  
  
  
  
  
  

  
  
  
  
  

  

  
  
  

  
  
  
  
  
  
  
  
  














































































/* Special tv_nsec values for futimens(2) and utimensat(2). */



int	__attribute__((__cdecl__)) chmod ( const char *__path, mode_t __mode);
int     __attribute__((__cdecl__)) fchmod (int __fd, mode_t __mode);
int	__attribute__((__cdecl__)) fstat ( int __fd, struct stat *__sbuf);
int	__attribute__((__cdecl__)) mkdir ( const char *_path, mode_t __mode);
int	__attribute__((__cdecl__)) mkfifo ( const char *__path, mode_t __mode);
int	__attribute__((__cdecl__)) stat ( const char *__path, struct stat *__sbuf);
mode_t	__attribute__((__cdecl__)) umask ( mode_t __mask);


int	__attribute__((__cdecl__)) lstat ( const char *__path, struct stat *__buf);
int	__attribute__((__cdecl__)) mknod ( const char *__path, mode_t __mode, dev_t __dev);


int	__attribute__((__cdecl__)) fchmodat (int, const char *, mode_t, int);
int	__attribute__((__cdecl__)) fstatat (int, const char *, struct stat *, int);
int	__attribute__((__cdecl__)) mkdirat (int, const char *, mode_t);
int	__attribute__((__cdecl__)) mkfifoat (int, const char *, mode_t);
int	__attribute__((__cdecl__)) mknodat (int, const char *, mode_t, dev_t);
int	__attribute__((__cdecl__)) utimensat (int, const char *, const struct timespec *, int);
int	__attribute__((__cdecl__)) futimens (int, const struct timespec *);

/* Provide prototypes for most of the _<systemcall> names that are
   provided in newlib for some compilers.  */













#line 121 "C:\\cygwin\\usr\\include\\sys\\_default_fcntl.h" 2

extern int open (const char *, int, ...);
extern int creat (const char *, mode_t);
extern int fcntl (int, int, ...);

#line 1 "C:\\cygwin\\usr\\include\\sys\\time.h" 1
/* time.h -- An implementation of the standard Unix <sys/time.h> file.
   Written by Geoffrey Noer <noer@cygnus.com>
   Public domain; no rights reserved. */













  
  



  
  











  
  





































					





#line 126 "C:\\cygwin\\usr\\include\\sys\\_default_fcntl.h" 2
extern int futimesat (int, const char *, const struct timeval *);
extern int openat (int, const char *, int, ...);

/* Provide _<systemcall> prototypes for functions provided by some versions
   of newlib.  */











#line 3 "C:\\cygwin\\usr\\include\\sys\\fcntl.h" 2

#line 14 "C:\\cygwin\\usr\\include\\fcntl.h" 2


/* sys/fcntl defines values up to 0x40000 (O_NOINHERIT). */





/* POSIX-1.2008 requires this flag and allows to set it to 0 if its
   functionality is not required. */




















extern int posix_fadvise (int, off_t, off_t, int);
extern int posix_fallocate (int, off_t, off_t);




#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\stat.h" 1
























  
  
  
  
  
  
  
  

  
  
  
  
  

  

  
  
  

  
  
  
  
  
  
  
  
  






















































































































#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\socket.h" 1
/* sys/socket.h

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006,
   2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */


















  
  
  
  
  
  
  
  
  
		    
  
  
  
  
		  
  
		  
  
		  
  
  
  

  





#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\netinet\\in.h" 1
/* netinet/in.h

   Copyright 1998, 2001, 2006 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

















#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2
#line 1 "C:\\cygwin\\usr\\include\\arpa\\inet.h" 1
/* arpa/inet.h

   Copyright 1997, 1998, 2001, 2002, 2003 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\netinet\\in.h" 1
/* netinet/in.h

   Copyright 1998, 2001, 2006 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

















#line 14 "C:\\cygwin\\usr\\include\\arpa\\inet.h" 2






in_addr_t inet_addr (const char *);
int inet_aton (const char *, struct in_addr *);
in_addr_t inet_lnaof (struct in_addr);
struct in_addr inet_makeaddr (unsigned long , unsigned long);
in_addr_t inet_netof (struct in_addr);
in_addr_t inet_network (const char *);
char *inet_ntoa (struct in_addr);
int inet_pton (int, const char *, void *);
const char *inet_ntop (int, const void *, char *, socklen_t);





#line 20 "d:\\work\\TypeChef\\boa\\src\\sublog.c" 2

int open_pipe_fd(char *command);
int open_net_fd(char *spec);
int open_gen_fd(char *spec);

/* Like popen, but gives fd instead of FILE * */
int open_pipe_fd(char *command)
{
    int pipe_fds[2];
    int pid;
    /* "man pipe" says "filedes[0] is for reading,
     * filedes[1] is for writing. */
    if (pipe(pipe_fds) == -1)
        return -1;
    pid = fork();
    if (pid == 0) {             /* child */
        close(pipe_fds[1]);
        if (pipe_fds[0] != 0) {
            dup2(pipe_fds[0], 0);
            close(pipe_fds[0]);
        }
        execl("/bin/sh", "sh", "-c", command, (char *) 0);
        exit(127);
    }
    close(pipe_fds[0]);
    if (pid < 0) {
        close(pipe_fds[1]);
        return -1;
    }
    return pipe_fds[1];
}

int open_net_fd(char *spec)
{
    char *p;
    int fd, port;
    struct sockaddr_in sa;
    struct hostent *he;
    p = strchr(spec, ':');
    if (!p)
        return -1;
    *p++ = '\0';
    port = strtol(p, 0, 10);
    /* printf("Host %s, port %d\n",spec,port); */
    sa.sin_family = 2;
    sa.sin_port = htons(port);
    he = gethostbyname(spec);
    if (!he) {
        herror("open_net_fd");
        return -1;
    }
    memcpy(&sa.sin_addr, he->h_addr_list[0], he->h_length);
    /* printf("using ip %s\n",inet_ntoa(sa.sin_addr)); */
    fd = socket(2, 1, IPPROTO_TCP);
    if (fd < 0)
        return fd;
    if (connect(fd, (struct sockaddr *) &sa, sizeof (sa)) < 0)
        return -1;
    return fd;
}

int open_gen_fd(char *spec)
{
    int fd;
    if (*spec == '|') {
        fd = open_pipe_fd(spec + 1);
    } else if (*spec == ':') {
        fd = open_net_fd(spec + 1);
    } else {
        fd = open(spec,
                  1 | 0x0200 | 0x0008,
                  0000400 | 0000200 | 0000004 | 0000040);
    }
    return fd;
}

#if defined(STANDALONE_TEST)
int main(int argc, char *argv[])
{
    char buff[1024];
    int fd, nr, nw;
    if (argc < 2) {
        fprintf(((__getreent())->_stderr),
                "usage: %s output-filename\n"
                "       %s |output-command\n"
                "       %s :host:port\n", argv[0], argv[0], argv[0]);
        return 1;
    }
    fd = open_gen_fd(argv[1]);
    if (fd < 0) {
        perror("open_gen_fd");
        exit(1);
    }
    while ((nr = read(0, buff, sizeof (buff))) != 0) {
        if (nr < 0) {
            if ((*__errno()) == 4)
                continue;
            perror("read");
            exit(1);
        }
        nw = write(fd, buff, nr);
        if (nw < 0) {
            perror("write");
            exit(1);
        }
    }
    return 0;
}
#endif
