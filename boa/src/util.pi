#line 1 "W:\\work\\TypeChef\\boa\\src\\util.c" 1
/*
 *  Boa, an http server
 *  Copyright (C) 1995 Paul Phillips <paulp@go2net.com>
 *  Some changes Copyright (C) 1996,97 Larry Doolittle <ldoolitt@boa.org>
 *  Some changes Copyright (C) 1996 Charles F. Randall <crandall@goldsys.com>
 *  Some changes Copyright (C) 1996-99 Jon Nelson <jnelson@boa.org>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 1, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

/* $Id: util.c,v 1.61.2.3 2002/07/07 23:22:18 jnelson Exp $ */

#line 1 "W:\\work\\TypeChef\\boa\\src\\boa.h" 1
/*
 *  Boa, an http server
 *  Copyright (C) 1995 Paul Phillips <paulp@go2net.com>
 *  Some changes Copyright (C) 1996-99 Larry Doolittle <ldoolitt@jlab.org>
 *  Some changes Copyright (C) 1997-99 Jon Nelson <jnelson@boa.org>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 1, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

/* $Id: boa.h,v 1.63.2.2 2002/07/26 03:03:44 jnelson Exp $*/




#line 1 "C:\\cygwin\\usr\\include\\errno.h" 1




typedef int error_t;


#line 1 "C:\\cygwin\\usr\\include\\sys\\errno.h" 1
/* errno is not a global variable, because that would make using it
   non-reentrant.  Instead, its address is returned by the function
   __errno.  */







#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */







#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




#line 1 "C:\\cygwin\\usr\\include\\newlib.h" 1
/* newlib.h.  Generated from newlib.hin by configure.  */
/* newlib.hin.  Manually edited from the output of autoheader to
   remove all PACKAGE_ macros which will collide with any user
   package using newlib header files and having its own package name,
   version, etc...  */



/* EL/IX level */
/* #undef _ELIX_LEVEL */

/* Newlib version */


/* C99 formats support (such as %a, %zu, ...) in IO functions like
 * printf/scanf enabled */


/* long long type support in IO functions like printf/scanf enabled */


/* Register application finalization function using atexit. */
/* #undef _WANT_REGISTER_FINI */

/* long double type support in IO functions like printf/scanf enabled */


/* Positional argument support in printf functions enabled.  */


/* Optional reentrant struct support.  Used mostly on platforms with
   very restricted storage.  */
/* #undef _WANT_REENT_SMALL */

/* Multibyte supported */


/* MB_LEN_MAX */


/* ICONV enabled */
/* #undef _ICONV_ENABLED */

/* Enable ICONV external CCS files loading capabilities */
/* #undef _ICONV_ENABLE_EXTERNAL_CCS */

/* Define if the linker supports .preinit_array/.init_array/.fini_array
 * sections.  */
/* #undef HAVE_INITFINI_ARRAY */

/* True if atexit() may dynamically allocate space for cleanup
   functions.  */


/* True if long double supported.  */


/* True if long double supported and it is equal to double.  */
/* #undef _LDBL_EQ_DBL */

/*
 * Iconv encodings enabled ("to" direction)
 */
/* #undef _ICONV_TO_ENCODING_BIG5 */
/* #undef _ICONV_TO_ENCODING_CP775 */
/* #undef _ICONV_TO_ENCODING_CP850 */
/* #undef _ICONV_TO_ENCODING_CP852 */
/* #undef _ICONV_TO_ENCODING_CP855 */
/* #undef _ICONV_TO_ENCODING_CP866 */
/* #undef _ICONV_TO_ENCODING_EUC_JP */
/* #undef _ICONV_TO_ENCODING_EUC_TW */
/* #undef _ICONV_TO_ENCODING_EUC_KR */
/* #undef _ICONV_TO_ENCODING_ISO_8859_1 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_10 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_11 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_13 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_14 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_15 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_2 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_3 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_4 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_5 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_6 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_7 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_8 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_9 */
/* #undef _ICONV_TO_ENCODING_ISO_IR_111 */
/* #undef _ICONV_TO_ENCODING_KOI8_R */
/* #undef _ICONV_TO_ENCODING_KOI8_RU */
/* #undef _ICONV_TO_ENCODING_KOI8_U */
/* #undef _ICONV_TO_ENCODING_KOI8_UNI */
/* #undef _ICONV_TO_ENCODING_UCS_2 */
/* #undef _ICONV_TO_ENCODING_UCS_2_INTERNAL */
/* #undef _ICONV_TO_ENCODING_UCS_2BE */
/* #undef _ICONV_TO_ENCODING_UCS_2LE */
/* #undef _ICONV_TO_ENCODING_UCS_4 */
/* #undef _ICONV_TO_ENCODING_UCS_4_INTERNAL */
/* #undef _ICONV_TO_ENCODING_UCS_4BE */
/* #undef _ICONV_TO_ENCODING_UCS_4LE */
/* #undef _ICONV_TO_ENCODING_US_ASCII */
/* #undef _ICONV_TO_ENCODING_UTF_16 */
/* #undef _ICONV_TO_ENCODING_UTF_16BE */
/* #undef _ICONV_TO_ENCODING_UTF_16LE */
/* #undef _ICONV_TO_ENCODING_UTF_8 */
/* #undef _ICONV_TO_ENCODING_WIN_1250 */
/* #undef _ICONV_TO_ENCODING_WIN_1251 */
/* #undef _ICONV_TO_ENCODING_WIN_1252 */
/* #undef _ICONV_TO_ENCODING_WIN_1253 */
/* #undef _ICONV_TO_ENCODING_WIN_1254 */
/* #undef _ICONV_TO_ENCODING_WIN_1255 */
/* #undef _ICONV_TO_ENCODING_WIN_1256 */
/* #undef _ICONV_TO_ENCODING_WIN_1257 */
/* #undef _ICONV_TO_ENCODING_WIN_1258 */

/*
 * Iconv encodings enabled ("from" direction)
 */
/* #undef _ICONV_FROM_ENCODING_BIG5 */
/* #undef _ICONV_FROM_ENCODING_CP775 */
/* #undef _ICONV_FROM_ENCODING_CP850 */
/* #undef _ICONV_FROM_ENCODING_CP852 */
/* #undef _ICONV_FROM_ENCODING_CP855 */
/* #undef _ICONV_FROM_ENCODING_CP866 */
/* #undef _ICONV_FROM_ENCODING_EUC_JP */
/* #undef _ICONV_FROM_ENCODING_EUC_TW */
/* #undef _ICONV_FROM_ENCODING_EUC_KR */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_1 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_10 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_11 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_13 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_14 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_15 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_2 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_3 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_4 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_5 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_6 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_7 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_8 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_9 */
/* #undef _ICONV_FROM_ENCODING_ISO_IR_111 */
/* #undef _ICONV_FROM_ENCODING_KOI8_R */
/* #undef _ICONV_FROM_ENCODING_KOI8_RU */
/* #undef _ICONV_FROM_ENCODING_KOI8_U */
/* #undef _ICONV_FROM_ENCODING_KOI8_UNI */
/* #undef _ICONV_FROM_ENCODING_UCS_2 */
/* #undef _ICONV_FROM_ENCODING_UCS_2_INTERNAL */
/* #undef _ICONV_FROM_ENCODING_UCS_2BE */
/* #undef _ICONV_FROM_ENCODING_UCS_2LE */
/* #undef _ICONV_FROM_ENCODING_UCS_4 */
/* #undef _ICONV_FROM_ENCODING_UCS_4_INTERNAL */
/* #undef _ICONV_FROM_ENCODING_UCS_4BE */
/* #undef _ICONV_FROM_ENCODING_UCS_4LE */
/* #undef _ICONV_FROM_ENCODING_US_ASCII */
/* #undef _ICONV_FROM_ENCODING_UTF_16 */
/* #undef _ICONV_FROM_ENCODING_UTF_16BE */
/* #undef _ICONV_FROM_ENCODING_UTF_16LE */
/* #undef _ICONV_FROM_ENCODING_UTF_8 */
/* #undef _ICONV_FROM_ENCODING_WIN_1250 */
/* #undef _ICONV_FROM_ENCODING_WIN_1251 */
/* #undef _ICONV_FROM_ENCODING_WIN_1252 */
/* #undef _ICONV_FROM_ENCODING_WIN_1253 */
/* #undef _ICONV_FROM_ENCODING_WIN_1254 */
/* #undef _ICONV_FROM_ENCODING_WIN_1255 */
/* #undef _ICONV_FROM_ENCODING_WIN_1256 */
/* #undef _ICONV_FROM_ENCODING_WIN_1257 */
/* #undef _ICONV_FROM_ENCODING_WIN_1258 */


#line 15 "C:\\cygwin\\usr\\include\\_ansi.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\config.h" 1



#line 1 "C:\\cygwin\\usr\\include\\machine\\ieeefp.h" 1


/* This file can define macros to choose variations of the IEEE float
   format:

   _FLT_LARGEST_EXPONENT_IS_NORMAL

	Defined if the float format uses the largest exponent for finite
	numbers rather than NaN and infinity representations.  Such a
	format cannot represent NaNs or infinities at all, but it's FLT_MAX
	is twice the IEEE value.

   _FLT_NO_DENORMALS

	Defined if the float format does not support IEEE denormals.  Every
	float with a zero exponent is taken to be a zero representation.
 
   ??? At the moment, there are no equivalent macros above for doubles and
   the macros are not fully supported by --enable-newlib-hw-fp.

   __IEEE_BIG_ENDIAN

        Defined if the float format is big endian.  This is mutually exclusive
        with __IEEE_LITTLE_ENDIAN.

   __IEEE_LITTLE_ENDIAN
 
        Defined if the float format is little endian.  This is mutually exclusive
        with __IEEE_BIG_ENDIAN.

   Note that one of __IEEE_BIG_ENDIAN or __IEEE_LITTLE_ENDIAN must be specified for a
   platform or error will occur.

   __IEEE_BYTES_LITTLE_ENDIAN

        This flag is used in conjunction with __IEEE_BIG_ENDIAN to describe a situation 
	whereby multiple words of an IEEE floating point are in big endian order, but the
	words themselves are little endian with respect to the bytes.

   _DOUBLE_IS_32BITS 

        This is used on platforms that support double by using the 32-bit IEEE
        float type.

   _FLOAT_ARG

        This represents what type a float arg is passed as.  It is used when the type is
        not promoted to double.
	
*/



















































































































/* necv70 was __IEEE_LITTLE_ENDIAN. */






































































































































#error Endianess not declared!!



#line 4 "C:\\cygwin\\usr\\include\\sys\\config.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */







/* RTEMS adheres to POSIX -- 1003.1b with some features from annexes.  */



















































/* XMK loosely adheres to POSIX -- 1003.1 */
































































































/* Per the permission given in POSIX.1-2008 section 2.2.1, define
 * _POSIX_C_SOURCE if _XOPEN_SOURCE is defined and _POSIX_C_SOURCE is not.
 * (_XOPEN_SOURCE indicates that XSI extensions are desired by an application.)
 * This permission is first granted in 2008, but use it for older ones, also.
 * Allow for _XOPEN_SOURCE to be empty (from the earliest form of it, before it
 * was required to have specific values).
 */

  
    
   
    
   
    
   
    
  





#line 5 "C:\\cygwin\\usr\\include\\sys\\config.h" 2

/* exceptions first */






/* 16 bit integer machines */
































































/* For the PowerPC eabi, force the _impure_ptr to be in .sdata */








/* Configure small REENT structure for Xilinx MicroBlaze platforms */










































/* This block should be kept in sync with GCC's limits.h.  The point
   of having these definitions here is to not include limits.h, which
   would pollute the user namespace, while still using types of the
   the correct widths when deciding how to define __int32_t and
   __int64_t.  */

#if defined(INT_MAX)

#endif
#if !(defined(INT_MAX))

#endif


#if defined(LONG_MAX)

#endif
#if !(defined(LONG_MAX))


#if 1

#endif
#endif

/* End of block that should be kept in sync with GCC's limits.h.  */





























/* Define return type of read/write routines.  In POSIX, the return type
   for read()/write() is "ssize_t" but legacy newlib code has been using
   "int" for some time.  If not specified, "int" is defaulted.  */








/* See if small reent asked for at configuration time and
   is not chosen by the platform by default.  */





/* If _MB_EXTENDED_CHARSETS_ALL is set, we want all of the extended
   charsets.  The extended charsets add a few functions and a couple
   of tables of a few K each. */





#line 16 "C:\\cygwin\\usr\\include\\_ansi.h" 2

/* First try to figure out whether we really are in an ANSI C environment.  */
/* FIXME: This probably needs some work.  Perhaps sys/config.h can be
   prevailed upon to give us a clue.  */




/*  ISO C++.  */









































































/* Support gcc's __attribute__ facility.  */






/*  The traditional meaning of 'extern inline' for GCC is not
  to emit the function body unless the address is explicitly
  taken.  However this behaviour is changing to match the C99
  standard, which uses 'extern inline' to indicate that the
  function body *must* be emitted.  If we are using GCC, but do
  not have the new behaviour, we need to use extern inline; if
  we are using a new GCC with the C99-compatible behaviour, or
  a non-GCC compiler (which we will have to hope is C99, since
  there is no other way to achieve the effect of omitting the
  function if it isn't referenced) we just use plain 'inline',
  which c99 defines to mean more-or-less the same as the Gnu C
  'extern inline'.  */




/* We're using GCC in C99 mode, or an unknown compiler which 
  we just have to hope obeys the C99 semantics of inline.  */



#line 11 "C:\\cygwin\\usr\\include\\sys\\reent.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\_types.h" 1
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  This file lives in the `sys' directory so targets can provide
   their own if desired (or they can put target dependant conditionals here).
*/




#line 1 "C:\\cygwin\\usr\\include\\machine\\_types.h" 1
/*
 *  $Id: _types.h,v 1.3 2007/09/07 21:16:25 jjohnstn Exp $
 */



#line 1 "C:\\cygwin\\usr\\include\\machine\\_default_types.h" 1
/*
 *  $Id: _default_types.h,v 1.2 2008/06/11 22:14:54 jjohnstn Exp $
 */







/*
 * Guess on types by examining *_MIN / *_MAX defines.
 */




/* Fall back to POSIX versions from <limits.h> */

#line 1 "C:\\cygwin\\usr\\include\\limits.h" 1
/* limits.h

   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
   2008 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */


#line 1 "C:\\cygwin\\usr\\include\\features.h" 1
/* features.h

   Copyright 2001, 2002, 2003, 2004 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\sys\\cdefs.h" 1
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD: src/sys/sys/cdefs.h,v 1.54 2002/05/11 03:58:24 alfred Exp $
 */





/*
 * Note: the goal here is not compatibility to K&R C. Since we know that we
 * have GCC which understands ANSI C perfectly well, we make use of this.
 */





































































#line 14 "C:\\cygwin\\usr\\include\\features.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */




































































































































































  
    
   
    
   
    
   
    
  





#line 15 "C:\\cygwin\\usr\\include\\features.h" 2

/* Various options should be defined here, but the framework to do this
   is not laid down so far.  Especially notable are the following defines,
   which can be used by the application to switch on or off various
   datatypes and function prototypes:

     _BSD_SOURCE   to include pure BSD functions which are not defined
		   under POSIX.

     _POSIX_SOURCE if the application requests a POSIX compatible system.

     _XOPEN_SOURCE if X/Open functions and datatypes are requested.  This
		   option includes _POSIX_SOURCE.

     _GNU_SOURCE   to turn on GNU extensions which might collide with defines
		   used in application or library headers.  This option
		   includes _BSD_SOURCE, _XOPEN_SOURCE and _POSIX_SOURCE.
*/


#line 15 "C:\\cygwin\\usr\\include\\limits.h" 2


/* _MACH_MACHLIMITS_H_ is used on OSF/1.  */




/* Numerical limits */

/* Number of bits in a `char'.  */



/* Maximum length of a multibyte character.  */
#if !(defined(MB_LEN_MAX))
/* TODO: This is newlib's max value.  We should probably rather define our
   own _mbtowc_r and _wctomb_r functions which are only codepage dependent. */

#endif
/* Minimum and maximum values a `signed char' can hold.  */





/* Maximum value an `unsigned char' can hold.  (Minimum is 0).  */



/* Minimum and maximum values a `char' can hold.  */











/* Minimum and maximum values a `signed short int' can hold.  */





/* Maximum value an `unsigned short int' can hold.  (Minimum is 0).  */



/* Minimum and maximum values a `signed int' can hold.  */








/* Maximum value an `unsigned int' can hold.  (Minimum is 0).  */



/* Minimum and maximum values a `signed long int' can hold.
   (Same as `int').  */












/* Maximum value an `unsigned long int' can hold.  (Minimum is 0).  */



/* Minimum and maximum values a `signed long long int' can hold.  */









/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */



/* Minimum and maximum values a `signed long long int' can hold.  */





/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */



/* Maximum size of ssize_t */




/* Runtime Invariant Values */

/* Please note that symbolic names shall be ommited, on specific
   implementations where the corresponding value is equal to or greater
   than the stated minimum, but is unspecified.  This indetermination
   might depend on the amount of available memory space on a specific
   instance of a specific implementation. The actual value supported by
   a specific instance shall be provided by the sysconf() function. */

/* Maximum number of I/O operations in a single list I/O call supported by
   the implementation.  Not yet implemented. */

/* #define AIO_LISTIO_MAX >= _POSIX_AIO_LISTIO_MAX */

/* Maximum number of outstanding asynchronous I/O operations supported by
   the implementation.  Not yet implemented. */

/*  #define AIO_MAX >= _POSIX_AIO_MAX */

/* The maximum amount by which a process can decrease its asynchronous I/O
   priority level from its own scheduling priority. */

/* #define AIO_PRIO_DELTA_MAX >= 0 */

/* Maximum number of bytes in arguments and environment passed in an exec
   call.  32000 is the safe value used for Windows processes when called
   from Cygwin processes. */



/* Maximum number of functions that may be registered with atexit(). */



/* Maximum number of simultaneous processes per real user ID. */



/* Maximum number of timer expiration overruns.  Not yet implemented. */

/* #define DELAYTIMER_MAX >= _POSIX_DELAYTIMER_MAX */

/* Maximum length of a host name. */



/* Maximum number of iovcnt in a writev (an arbitrary number) */



/* Maximum number of characters in a login name. */



/* The maximum number of open message queue descriptors a process may hold. */



/* The maximum number of message priorities supported by the implementation. */



/* # of open files per process. Actually it can be more since Cygwin
   grows the dtable as necessary. We define a reasonable limit here
   which is returned by getdtablesize(), sysconf(_SC_OPEN_MAX) and
   getrlimit(RLIMIT_NOFILE). */



/* Size in bytes of a page. */





/* Maximum number of attempts made to destroy a thread's thread-specific
   data values on thread exit. */
/* FIXME: I really don't understand this value.  Why should multiple
   attempts be necessary to destroy thread-specific data?!?  Anyway, the
   current value here is 1, taken originally from our pthread.h file,
   where it was mistakenly defined first.  Unfortunately this value is
   lower than the POSIX defined minimum value, which is 4. */



/* Maximum number of data keys that can be created by a process. */
/* Tls has 64 items for pre win2000 - and we don't want to use them all :] */



/* Minimum size in bytes of thread stack storage. */
/* Actually the minimum stack size is somewhat of a split personality.
   The size parameter in a CreateThread call is the size of the initially
   commited stack size, which can be specified as low as 4K.  However, the
   default *reserved* stack size is 1 Meg, unless the .def file specifies
   another STACKSIZE value.  And even if you specify a stack size below 64K,
   the allocation granularity is in the way.  You can never squeeze multiple
   threads in the same allocation granularity slot.  Oh well. */



/* Maximum number of threads that can be created per process. */
/* Windows allows any arbitrary number of threads per process. */

/* #define PTHREAD_THREADS_MAX unspecified */

/* Maximum number of realtime signals reserved for application use. */
/* FIXME: We only support one realtime signal but _POSIX_RTSIG_MAX is 8. */



/* Maximum number of semaphores that a process may have. */
/* Windows allows any arbitrary number of semaphores per process. */

/* #define SEM_NSEMS_MAX unspecified */

/* The maximum value a semaphore may have. */



/* Maximum number of queued signals that a process may send and have pending
   at the receiver(s) at any time. */



/* The maximum number of replenishment operations that may be simultaneously
   pending for a particular sporadic server scheduler.  Not implemented. */

/* #define SS_REPL_MAX >= _POSIX_SS_REPL_MAX */

/* Number of streams that one process can have open at one time. */



/* Maximum number of nested symbolic links. */



/* Maximum number of timer expiration overruns. */



/* Maximum length of the trace event name.  Not implemented. */

/* #define TRACE_EVENT_NAME_MAX >= _POSIX_TRACE_EVENT_NAME_MAX */

/* Maximum length of the trace generation version string or of the trace
   stream name.  Not implemented. */

/* #define TRACE_NAME_MAX >= _POSIX_TRACE_NAME_MAX */

/* Maximum number of trace streams that may simultaneously exist in the
   system.  Not implemented. */

/* #define TRACE_SYS_MAX >= _POSIX_TRACE_SYS_MAX */

/* Maximum number of user trace event type identifiers that may simultaneously
   exist in a traced process, including the predefined user trace event
   POSIX_TRACE_UNNAMED_USER_EVENT.  Not implemented. */

/* #define TRACE_USER_EVENT_MAX >= _POSIX_TRACE_USER_EVENT_MAX */

/* Maximum number of characters in a tty name. */



/* Maximum number of bytes supported for the name of a timezone (not of the TZ variable).  Not implemented. */

/* #define TZNAME_MAX >= _POSIX_TZNAME_MAX */


/* Pathname Variable Values */

/* Minimum bits needed to represent the maximum size of a regular file. */



/* Maximum number of hardlinks to a file. */



/* Maximum number of bytes in a terminal canonical input line. */



/* Minimum number of bytes available in a terminal input queue. */



/* Maximum length of a path component. */



/* Maximum length of a path given to API functions including trailing NUL.
   Deliberately set to the same default value as on Linux.  Internal paths
   may be longer. */
/* Keep in sync with __PATHNAME_MAX__ in cygwin/config.h */



/* # of bytes in a pipe buf. This is the max # of bytes which can be
   written to a pipe in one atomic operation. */



/* Minimum number of bytes of storage actually allocated for any portion
   of a file.  Not implemented. */

/* #define POSIX_ALLOC_SIZE_MIN unspecifed */

/* Recommended increment for file transfer sizes between the
   {POSIX_REC_MIN_XFER_SIZE} and {POSIX_REC_MAX_XFER_SIZE} values.
   Not implemented. */

/* #define POSIX_REC_INCR_XFER_SIZE unspecifed */

/* Maximum recommended file transfer size.  Not implemented. */

/* #define POSIX_REC_MAX_XFER_SIZE unspecifed */

/* Minimum recommended file transfer size.  Not implemented. */

/* #define POSIX_REC_MIN_XFER_SIZE unspecifed */

/* Recommended file transfer buffer alignment.  Not implemented. */

/* #define POSIX_REC_XFER_ALIGN unspecifed */

/* Maximum number of bytes in a symbolic link. */




/* Runtime Increasable Values */

/* Maximum obase values allowed by the bc utility. */



/* Maximum number of elements permitted in an array by the bc utility. */



/* Maximum scale value allowed by the bc utility. */



/* Maximum length of a string constant accepted by the bc utility. */



/* Maximum number of bytes in a character class name.  Not implemented. */

/* #define CHARCLASS_NAME_MAX >= _POSIX2_CHARCLASS_NAME_MAX */

/* Maximum number of weights that can be assigned to an entry of the
   LC_COLLATE order keyword in the locale definition file. */
/* FIXME: We don't support this at all right now, so this value is
   misleading at best.  It's also lower than _POSIX2_COLL_WEIGHTS_MAX
   which is not good.  So, for now we deliberately not define it even
   though it was defined in the former syslimits.h file. */

/* #define COLL_WEIGHTS_MAX >= _POSIX2_COLL_WEIGHTS_MAX */

/* Maximum number of expressions that can be nested within parentheses
   by the expr utility. */



/* Maximum bytes of a text utility's input line */



/* Max num groups for a user, value taken from NT documentation */
/* Must match <sys/param.h> NGROUPS */



/* Maximum number of repeated occurrences of a regular expression when
   using the interval notation \{m,n\} */




/* POSIX values */
/* These should never vary from one system type to another */
/* They represent the minimum values that POSIX systems must support.
   POSIX-conforming apps must not require larger values. */

/* Maximum Values */



/* Minimum Values */




















































/* Other Invariant Values */








/* Default process priority. */





#line 17 "C:\\cygwin\\usr\\include\\machine\\_default_types.h" 2



























































































#line 7 "C:\\cygwin\\usr\\include\\machine\\_types.h" 2

#line 12 "C:\\cygwin\\usr\\include\\sys\\_types.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\lock.h" 1
/* sys/lock.h

   Copyright 2004 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




typedef void *_LOCK_T;


/*
 * This must match cygwins PTHREAD_XXX_MUTEX_INITIALIZER_NP which are
 * defined in <pthread.h>
 */























void __cygwin_lock_init(_LOCK_T *);
void __cygwin_lock_init_recursive(_LOCK_T *);
void __cygwin_lock_fini(_LOCK_T *);
void __cygwin_lock_lock(_LOCK_T *);
int __cygwin_lock_trylock(_LOCK_T *);
void __cygwin_lock_unlock(_LOCK_T *);




#line 13 "C:\\cygwin\\usr\\include\\sys\\_types.h" 2


typedef long _off_t;






typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;


__extension__ typedef long long _off64_t;

/*
 * We need fpos_t for the following, but it doesn't have a leading "_",
 * so we use _fpos_t instead.
 */

typedef long _fpos_t;		/* XXX must match off_t in <sys/types.h> */
				/* (and must be `long' for now) */










typedef long _ssize_t;



#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */










































































































typedef unsigned int wint_t;



/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 39 "C:\\cygwin\\usr\\include\\sys\\_types.h" 2


/* Conversion state information.  */
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;		/* Value so far.  */
} _mbstate_t;


typedef _LOCK_T _flock_t;


/* Iconv descriptor type */
typedef void *_iconv_t;


#line 12 "C:\\cygwin\\usr\\include\\sys\\reent.h" 2













#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */


#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 21 "C:\\cygwin\\usr\\include\\sys\\types.h" 2




#line 1 "C:\\cygwin\\usr\\include\\machine\\_types.h" 1
/*
 *  $Id: _types.h,v 1.3 2007/09/07 21:16:25 jjohnstn Exp $
 */





#line 24 "C:\\cygwin\\usr\\include\\sys\\types.h" 2






























#line 1 "C:\\cygwin\\usr\\include\\sys\\_types.h" 1
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  This file lives in the `sys' directory so targets can provide
   their own if desired (or they can put target dependant conditionals here).
*/

































				




















  
  
  
    
    
  










#line 49 "C:\\cygwin\\usr\\include\\sys\\types.h" 2






#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 53 "C:\\cygwin\\usr\\include\\sys\\types.h" 2
#line 1 "C:\\cygwin\\usr\\include\\machine\\types.h" 1



/*
 *  The following section is RTEMS specific and is needed to more
 *  closely match the types defined in the BSD machine/types.h.
 *  This is needed to let the RTEMS/BSD TCP/IP stack compile.
 */









typedef long int __off_t;
typedef int __pid_t;



typedef long int __loff_t;



#line 54 "C:\\cygwin\\usr\\include\\sys\\types.h" 2

/* To ensure the stat struct's layout doesn't change when sizeof(int), etc.
   changes, we assume sizeof short and long never change and have all types
   used to define struct stat use them and not int where possible.
   Where not possible, _ST_INTxx are used.  It would be preferable to not have
   such assumptions, but until the extra fluff is necessary, it's avoided.
   No 64 bit targets use stat yet.  What to do about them is postponed
   until necessary.  */










/* also defined in mingw/gmon.h and in w32api/winsock[2].h */
typedef	unsigned char	u_char;
typedef	unsigned short	u_short;
typedef	unsigned int	u_int;
typedef	unsigned long	u_long;


typedef	unsigned short	ushort;		/* System V compatibility */
typedef	unsigned int	uint;		/* System V compatibility */


typedef unsigned long clock_t;



typedef long time_t;


/* Time Value Specification Structures, P1003.1b-1993, p. 261 */

struct timespec {
  time_t  tv_sec;   /* Seconds */
  long    tv_nsec;  /* Nanoseconds */
};

struct itimerspec {
  struct timespec  it_interval;  /* Timer period */
  struct timespec  it_value;     /* Timer expiration */
};

typedef	long	daddr_t;
typedef	char *	caddr_t;





typedef	unsigned short	ino_t;


















/*
 * All these should be machine specific - right now they are all broken.
 * However, for all of Cygnus' embedded targets, we want them to all be
 * the same.  Otherwise things like sizeof (struct stat) might depend on
 * how the file was compiled (e.g. -mint16 vs -mint32, etc.).
 */


typedef _off_t	off_t;
typedef __dev_t dev_t;
typedef __uid_t uid_t;
typedef __gid_t gid_t;




typedef int pid_t;


typedef	long key_t;

typedef _ssize_t ssize_t;













typedef unsigned int mode_t ;



typedef unsigned short nlink_t;

/* We don't define fd_set and friends if we are compiling POSIX
   source, or if we have included (or may include as indicated
   by __USE_W32_SOCKETS) the W32api winsock[2].h header which
   defines Windows versions of them.   Note that a program which
   includes the W32api winsock[2].h header must know what it is doing;
   it must not call the cygwin32 select function.
*/



/*
 * Select uses bit masks of file descriptors in longs.
 * These macros manipulate such bit fields (the filesystem macros use chars).
 * FD_SETSIZE may be defined by the user, but the default here
 * should be >= NOFILE (param.h).
 */
#if !(defined(FD_SETSIZE))

#endif
typedef	long	fd_mask;

#if !(defined(howmany))

#endif
/* We use a macro for fd_set so that including Sockets.h afterwards
   can work.  */
typedef	struct _types_fd_set {
	fd_mask	fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;



















typedef unsigned long clockid_t;



typedef unsigned long timer_t;


typedef unsigned long useconds_t;
typedef long suseconds_t;

#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */




































































































































































  
    
   
    
   
    
   
    
  





#line 195 "C:\\cygwin\\usr\\include\\sys\\types.h" 2


/* Cygwin will probably never have full posix compliance due to little things
 * like an inability to set the stackaddress. Cygwin is also using void *  
 * pointers rather than structs to ensure maximum binary compatability with
 * previous releases.
 * This means that we don't use the types defined here, but rather in
 * <cygwin/types.h>
 */


















                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  






/* POSIX Barrier Types */




  

  



/* POSIX Spin Lock Types */




/* POSIX Reader/Writer Lock Types */





  

  








#line 18 "C:\\cygwin\\usr\\include\\sys\\reent.h" 2



typedef __uint32_t __ULong;

struct _reent;

/*
 * If _REENT_SMALL is defined, we make struct _reent as small as possible,
 * by having nearly everything possible allocated at first use.
 */

struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};

/* needed by reentrant structure */
struct __tm
{
  int   __tm_sec;
  int   __tm_min;
  int   __tm_hour;
  int   __tm_mday;
  int   __tm_mon;
  int   __tm_year;
  int   __tm_wday;
  int   __tm_yday;
  int   __tm_isdst;
};

/*
 * atexit() support.
 */



struct _on_exit_args {
	void *  _fnargs[32];	        /* user fn args */
	void *	_dso_handle[32];
	/* Bitmask is set if user function takes arguments.  */
	__ULong _fntypes;           	        /* type of exit routine -
				   Must have at least _ATEXIT_SIZE bits */
	/* Bitmask is set if function was registered via __cxa_atexit.  */
	__ULong _is_cxa;
};



	
	
	
        


struct _atexit {
	struct	_atexit *_next;			/* next in list */
	int	_ind;				/* next index in this table */
	/* Some entries may already have been called, and will be NULL.  */
	void	(*_fns[32])(void);	/* the table itself */
        struct _on_exit_args _on_exit_args;
};

/*
 * Stdio buffers.
 *
 * This and __FILE are defined here because we need them for struct _reent,
 * but we don't want stdio.h included when stdlib.h is.
 */

struct __sbuf {
	unsigned char *_base;
	int	_size;
};

/*
 * Stdio state variables.
 *
 * The following always hold:
 *
 *	if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
 *		_lbfsize is -_bf._size, else _lbfsize is 0
 *	if _flags&__SRD, _w is 0
 *	if _flags&__SWR, _r is 0
 *
 * This ensures that the getc and putc macros (or inline functions) never
 * try to write or read from a file that is in `read' or `write' mode.
 * (Moreover, they can, and do, automatically switch from read mode to
 * write mode, and back, on "r+" and "w+" files.)
 *
 * _lbfsize is used only to make the inline line-buffered output stream
 * code as compact as possible.
 *
 * _ub, _up, and _ur are used when ungetc() pushes back more characters
 * than fit in the current _bf, or when ungetc() pushes back a character
 * that does not match the previous one in _bf.  When this happens,
 * _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
 * _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
 */








  
  
  
  
  
  
  

  

















struct __sFILE {
  unsigned char *_p;	/* current position in (some) buffer */
  int	_r;		/* read space left for getc() */
  int	_w;		/* write space left for putc() */
  short	_flags;		/* flags, below; this FILE is free if 0 */
  short	_file;		/* fileno, if Unix descriptor, else -1 */
  struct __sbuf _bf;	/* the buffer (at least 1 byte, if !NULL) */
  int	_lbfsize;	/* 0 or -_bf._size, for inline putc */


  

  /* operations */
  char *	_cookie;	/* cookie passed to io functions */

  int _EXFNPTR(_read, (struct _reent *, char *,
					   char *, int));
  int _EXFNPTR(_write, (struct _reent *, char *,
					    const char *, int));
  _fpos_t _EXFNPTR(_seek, (struct _reent *, char *, _fpos_t, int));
  int _EXFNPTR(_close, (struct _reent *, char *));

  /* separate buffer for long sequences of ungetc() */
  struct __sbuf _ub;	/* ungetc buffer */
  unsigned char *_up;	/* saved _p when _p is doing ungetc data */
  int	_ur;		/* saved _r when _r is counting ungetc data */

  /* tricks to meet minimum requirements even when malloc() fails */
  unsigned char _ubuf[3];	/* guarantee an ungetc() buffer */
  unsigned char _nbuf[1];	/* guarantee a getc() buffer */

  /* separate buffer for fgetline() when line crosses buffer boundary */
  struct __sbuf _lb;	/* buffer for fgetline() */

  /* Unix stdio files get aligned to block boundaries on fseek() */
  int	_blksize;	/* stat.st_blksize (may be != _bf._size) */
  int	_offset;	/* current lseek offset */


  struct _reent *_data;	/* Here for binary compatibility? Remove? */


  _flock_t _lock;	/* for thread-safety locking */

  _mbstate_t _mbstate;	/* for wide char stdio functions. */
  int   _flags2;        /* for future use */
};








  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  



typedef struct __sFILE   __FILE;


struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};

/*
 * rand48 family support
 *
 * Copyright (c) 1993 Martin Birgmeier
 * All rights reserved.
 *
 * You may redistribute unmodified or modified versions of this source
 * code provided that the above copyright notice and this and the
 * following conditions are retained.
 *
 * This software is provided ``as is'', and comes with no warranties
 * of any kind. I shall in no event be liable for anything that happens
 * to anyone/anything when using this software.
 */







struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;

  
  

};

/* How big the some arrays are.  */




/*
 * struct _reent
 *
 * This structure contains *all* globals needed by the library.
 * It's raison d'etre is to facilitate threads by making all library routines
 * reentrant.  IE: All state information is contained here.
 */




  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  














































































































































































struct _reent
{
  int _errno;			/* local copy of errno */

  /* FILE is a big struct and may change over time.  To try to achieve binary
     compatibility with future versions, put stdin,stdout,stderr here.
     These are pointers into member __sf defined below.  */
  __FILE *_stdin, *_stdout, *_stderr;

  int  _inc;			/* used by tmpnam */
  char _emergency[25];

  int _current_category;	/* used by setlocale */
   char *_current_locale;

  int __sdidinit;		/* 1 means stdio has been init'd */

  void _EXFNPTR(__cleanup, (struct _reent *));

  /* used by mprec routines */
  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;

  /* used by some fp conversion routines */
  int _cvtlen;			/* should be size_t */
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
	  int _h_errno;
        } _reent;
  /* Two next two fields were once used by malloc.  They are no longer
     used. They are used to preserve the space used before so as to
     allow addition of new reent fields and keep binary compatibility.   */
      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;

  /* atexit stuff */
  struct _atexit *_atexit;	/* points to head of LIFO stack */
  struct _atexit _atexit0;	/* one guaranteed table, required by ANSI */

  /* signal info */
  void (**(_sig_func))(int);

  /* These are here last so that __FILE can grow without changing the offsets
     of the above members (on the off chance that future binary compatibility
     would be broken otherwise).  */
  struct _glue __sglue;		/* root of glue chain */
  __FILE __sf[3];  		/* first three file descriptors */
};


















































































































































/* This value is used in stdlib/misc.c.  reent/reent.c has to know it
   as well to make sure the freelist is correctly free'd.  Therefore
   we define it here, rather than in stdlib/misc.c, as before. */


/*
 * All references to struct _reent are via this pointer.
 * Internally, newlib routines that need to reference it should use _REENT.
 */




extern struct _reent *_impure_ptr ;
extern struct _reent * _global_impure_ptr ;

void _reclaim_reent ();

/* #define _REENT_ONLY define this to get only reentrant routines */




  












#line 9 "C:\\cygwin\\usr\\include\\sys\\errno.h" 2



extern int *__errno ();

/* Please don't use these variables directly.
   Use strerror instead. */
extern   char *  _sys_errlist[];
extern  int _sys_nerr;








































































































































































#line 6 "C:\\cygwin\\usr\\include\\errno.h" 2


#line 28 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\stdlib.h" 1
/*
 * stdlib.h
 *
 * Definitions for common types, variables, and functions.
 */




#line 1 "C:\\cygwin\\usr\\include\\machine\\ieeefp.h" 1


/* This file can define macros to choose variations of the IEEE float
   format:

   _FLT_LARGEST_EXPONENT_IS_NORMAL

	Defined if the float format uses the largest exponent for finite
	numbers rather than NaN and infinity representations.  Such a
	format cannot represent NaNs or infinities at all, but it's FLT_MAX
	is twice the IEEE value.

   _FLT_NO_DENORMALS

	Defined if the float format does not support IEEE denormals.  Every
	float with a zero exponent is taken to be a zero representation.
 
   ??? At the moment, there are no equivalent macros above for doubles and
   the macros are not fully supported by --enable-newlib-hw-fp.

   __IEEE_BIG_ENDIAN

        Defined if the float format is big endian.  This is mutually exclusive
        with __IEEE_LITTLE_ENDIAN.

   __IEEE_LITTLE_ENDIAN
 
        Defined if the float format is little endian.  This is mutually exclusive
        with __IEEE_BIG_ENDIAN.

   Note that one of __IEEE_BIG_ENDIAN or __IEEE_LITTLE_ENDIAN must be specified for a
   platform or error will occur.

   __IEEE_BYTES_LITTLE_ENDIAN

        This flag is used in conjunction with __IEEE_BIG_ENDIAN to describe a situation 
	whereby multiple words of an IEEE floating point are in big endian order, but the
	words themselves are little endian with respect to the bytes.

   _DOUBLE_IS_32BITS 

        This is used on platforms that support double by using the 32-bit IEEE
        float type.

   _FLOAT_ARG

        This represents what type a float arg is passed as.  It is used when the type is
        not promoted to double.
	
*/



















































































































/* necv70 was __IEEE_LITTLE_ENDIAN. */






































































































































#error Endianess not declared!!



#line 10 "C:\\cygwin\\usr\\include\\stdlib.h" 2
#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 11 "C:\\cygwin\\usr\\include\\stdlib.h" 2



#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */











































typedef long unsigned int size_t;























/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */


































/* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   symbols in the _FOO_T_ family, stays defined even after its
   corresponding type is defined).  If we define wchar_t, then we
   must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   we undef _WCHAR_T_, then we must also define rune_t, since 
   headers like runetype.h assume that if machine/ansi.h is included,
   and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   the same type." */

















/* FreeBSD 5 can't be handled well using "traditional" logic above
   since it no longer defines _BSD_RUNE_T_ yet still desires to export
   rune_t in some cases... */














typedef int wchar_t;































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 13 "C:\\cygwin\\usr\\include\\stdlib.h" 2

#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */





































  
  
  





  
  
  
  
  
  
  
  
  









	
	
	
	
	
	




	
	
	
        



	
	
	
	
        










	
	


































  
  
  
  
  
  
  

  


















  
  
  
  
  
  
  


  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  


  


  

  
  









  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  








  
  
  
























  
  
  

  
  



















  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  
















































































































































































  

  


  

  
  

  
  

  

  

  
  
  
  
  

  
  
  

  
    
      
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
	  
        
  


      
        

          
          
        
    

  
  
  

  
  

  


  
  










































































































































































  












#line 15 "C:\\cygwin\\usr\\include\\stdlib.h" 2
#line 1 "C:\\cygwin\\usr\\include\\machine\\stdlib.h" 1
/* machine/stdlib.h

  Copyright 2005 Red Hat, Inc.

  This file is part of Cygwin.

  This software is a copyrighted work licensed under the terms of the
  Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
  details. */






char *mkdtemp (char *);





#line 16 "C:\\cygwin\\usr\\include\\stdlib.h" 2

#line 1 "C:\\cygwin\\usr\\include\\alloca.h" 1
/* libc/include/alloca.h - Allocate memory on stack */

/* Written 2000 by Werner Almesberger */
/* Rearranged for general inclusion by stdlib.h.
   2001, Corinna Vinschen <vinschen@redhat.com> */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 10 "C:\\cygwin\\usr\\include\\alloca.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */





































  
  
  





  
  
  
  
  
  
  
  
  









	
	
	
	
	
	




	
	
	
        



	
	
	
	
        










	
	


































  
  
  
  
  
  
  

  


















  
  
  
  
  
  
  


  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  


  


  

  
  









  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  








  
  
  
























  
  
  

  
  



















  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  
















































































































































































  

  


  

  
  

  
  

  

  

  
  
  
  
  

  
  
  

  
    
      
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
	  
        
  


      
        

          
          
        
    

  
  
  

  
  

  


  
  










































































































































































  












#line 11 "C:\\cygwin\\usr\\include\\alloca.h" 2






void * alloca();


#line 17 "C:\\cygwin\\usr\\include\\stdlib.h" 2






typedef struct 
{
  int quot; /* quotient */
  int rem; /* remainder */
} div_t;

typedef struct 
{
  long quot; /* quotient */
  long rem; /* remainder */
} ldiv_t;


typedef struct
{
  long long int quot; /* quotient */
  long long int rem; /* remainder */
} lldiv_t;

#if !(defined(NULL))

#endif





int	__locale_mb_cur_max();



void	abort();
int	abs();
int	atexit();
double	atof();

float	atoff();

int	atoi();
int	_atoi_r();
long	atol();
long	_atol_r();
char *	bsearch();
char *	calloc();
div_t	div();
void	exit();
void	free();
char *  getenv();
char *	_getenv_r();
char *	_findenv();
char *	_findenv_r();

extern char *suboptarg;			/* getsubopt(3) external variable */
int	getsubopt();

long	labs();
ldiv_t	ldiv();
char *	malloc();
int	mblen();
int	_mblen_r();
int	mbtowc();
int	_mbtowc_r();
int	wctomb();
int	_wctomb_r();
size_t	mbstowcs();
size_t	_mbstowcs_r();
size_t	wcstombs();
size_t	_wcstombs_r();


char *	mkdtemp();
int	mkostemp();
int	mkostemps();
int	mkstemp();
int	mkstemps();
char *	mktemp();

char *	_mkdtemp_r();
int	_mkostemp_r();
int	_mkostemps_r();
int	_mkstemp_r();
int	_mkstemps_r();
char *	_mktemp_r();

void	qsort();
int	rand();
char *	realloc();

char *	reallocf();

void	srand();
double	strtod();
double	_strtod_r();
float	strtof();

/* the following strtodf interface is deprecated...use strtof instead */
#if !(defined(strtodf))

#endif

long	strtol();
long	_strtol_r();
unsigned long strtoul();
unsigned long _strtoul_r();

int	system();


long    a64l();
char *  l64a();
char *  _l64a_r();
int	on_exit();
void	_Exit();
int	putenv();
int	_putenv_r();
char *	_reallocf_r();
int	setenv();
int	_setenv_r();

char *	gcvt();
char *	gcvtf();
char *	fcvt();
char *	fcvtf();
char *	ecvt();
char *	ecvtbuf();
char *	fcvtbuf();
char *	ecvtf();
char *	dtoa();
int	rand_r();

double drand48();
double _drand48_r();
double erand48();
double _erand48_r();
long   jrand48();
long   _jrand48_r();
void  lcong48();
void  _lcong48_r();
long   lrand48();
long   _lrand48_r();
long   mrand48();
long   _mrand48_r();
long   nrand48();
long   _nrand48_r();
unsigned short *
       seed48();
unsigned short *
       _seed48_r();
void  srand48();
void  _srand48_r();
long long atoll();
long long _atoll_r();
long long llabs();
lldiv_t	lldiv();
long long strtoll();
long long _strtoll_r();
unsigned long long strtoull();
unsigned long long _strtoull_r();


void	cfree();
int	unsetenv();
int	_unsetenv_r();





char *	_dtoa_r();

char *	_malloc_r();
char *	_calloc_r();
void	_free_r();
char *	_realloc_r();
void	_mstats_r();

int	_system_r();

void	__eprintf();

/* On platforms where long double equals double.  */







#line 29 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\stdio.h" 1
/*
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	@(#)stdio.h	5.3 (Berkeley) 3/15/86
 */

/*
 * NB: to fit things in six character monocase externals, the
 * stdio code uses the prefix `__s' for stdio objects, typically
 * followed by a three-character attempt at a mnemonic.
 */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 29 "C:\\cygwin\\usr\\include\\stdio.h" 2




#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 33 "C:\\cygwin\\usr\\include\\stdio.h" 2


#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stdarg.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.15  Variable arguments  <stdarg.h>
 */



#if !(defined(RC_INVOKED))






/* Define __gnuc_va_list.  */



typedef __builtin_va_list __gnuc_va_list;

/* Define the standard macros for the user,
   if this invocation was from the user program.  */












































































#endif


#line 35 "C:\\cygwin\\usr\\include\\stdio.h" 2

/*
 * <sys/reent.h> defines __FILE, _fpos_t.
 * They must be defined there because struct _reent needs them (and we don't
 * want reent.h to include this file.
 */

#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */





































  
  
  





  
  
  
  
  
  
  
  
  









	
	
	
	
	
	




	
	
	
        



	
	
	
	
        










	
	


































  
  
  
  
  
  
  

  


















  
  
  
  
  
  
  


  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  


  


  

  
  









  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  








  
  
  
























  
  
  

  
  



















  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  
















































































































































































  

  


  

  
  

  
  

  

  

  
  
  
  
  

  
  
  

  
    
      
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
	  
        
  


      
        

          
          
        
    

  
  
  

  
  

  


  
  










































































































































































  












#line 43 "C:\\cygwin\\usr\\include\\stdio.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 44 "C:\\cygwin\\usr\\include\\stdio.h" 2



typedef __FILE FILE;




typedef _fpos_t fpos_t;




#line 1 "C:\\cygwin\\usr\\include\\sys\\stdio.h" 1
/* sys/stdio.h

   Copyright 2004, 2005, 2006, 2007, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\sys\\cdefs.h" 1
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD: src/sys/sys/cdefs.h,v 1.54 2002/05/11 03:58:24 alfred Exp $
 */














































































#line 14 "C:\\cygwin\\usr\\include\\sys\\stdio.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\lock.h" 1
/* sys/lock.h

   Copyright 2004 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */












































#line 15 "C:\\cygwin\\usr\\include\\sys\\stdio.h" 2

/* These definitions should be kept in sync with those in the newlib
   header of the same name (newlib/libc/include/sys/stdio.h).  */

















ssize_t	getline();
ssize_t	getdelim();




#line 54 "C:\\cygwin\\usr\\include\\stdio.h" 2





	/* RD and WR are never simultaneously asserted */















/* _flags2 flags */


/*
 * The following three definitions are for ANSI C, which took them
 * from System V, which stupidly took internal interface macros and
 * made them official arguments to setvbuf(), without renaming them.
 * Hence, these ugly _IOxxx names are *supposed* to appear in user code.
 *
 * Although these happen to match their counterparts above, the
 * implementation does not rely on that (so these could be renumbered).
 */
































#if !(defined(SEEK_SET))

#endif
#if !(defined(SEEK_CUR))

#endif
#if !(defined(SEEK_END))

#endif















/*
 * Functions defined in ANSI C standard.
 */








FILE *	tmpfile();
char *	tmpnam();
int	fclose();
int	fflush();
FILE *	freopen();
void	setbuf();
int	setvbuf();
int	fprintf();
int	fscanf();
int	printf();
int	scanf();
int	sscanf();
int	vfprintf();
int	vprintf();
int	vsprintf();
int	fgetc();
char *  fgets();
int	fputc();
int	fputs();
int	getc();
int	getchar();
char *  gets();
int	putc();
int	putchar();
int	puts();
int	ungetc();
size_t	fread();
size_t	fwrite();



int	fgetpos();

int	fseek();



int	fsetpos();

long	ftell();
void	rewind();
void	clearerr();
int	feof();
int	ferror();
void    perror();

FILE *	fopen();
int	sprintf();
int	remove();
int	rename();






int	fseeko();
off_t	ftello();




int	asiprintf();
char *	asniprintf();
char *	asnprintf();
int	asprintf();
#if !(defined(diprintf))
int	diprintf();
#endif
int	fcloseall();
int	fiprintf();
int	fiscanf();
int	iprintf();
int	iscanf();
int	siprintf();
int	siscanf();
int	snprintf();
int	sniprintf();
char *	tempnam();
int	vasiprintf();
char *	vasniprintf();
char *	vasnprintf();
int	vasprintf();
int	vdiprintf();
int	vfiprintf();
int	vfiscanf();
int	vfscanf();
int	viprintf();
int	viscanf();
int	vscanf();
int	vsiprintf();
int	vsiscanf();
int	vsniprintf();
int	vsnprintf();
int	vsscanf();


/*
 * Routines in POSIX 1003.1:2001.
 */



FILE *	fdopen();

int	fileno();
int	getw();
int	pclose();
FILE *  popen();
int	putw();
void    setbuffer();
int	setlinebuf();
int	getc_unlocked();
int	getchar_unlocked();
void	flockfile();
int	ftrylockfile();
void	funlockfile();
int	putc_unlocked();
int	putchar_unlocked();

/*
 * Routines in POSIX 1003.1:200x.
 */



#if !(defined(dprintf))
int	dprintf();
#endif
FILE *	fmemopen();
/* getdelim - see __getdelim for now */
/* getline - see __getline for now */
FILE *	open_memstream();



int	vdprintf();


/*
 * Recursive versions of the above.
 */

int	_asiprintf_r();
char *	_asniprintf_r();
char *	_asnprintf_r();
int	_asprintf_r();
int	_diprintf_r();
int	_dprintf_r();
int	_fclose_r();
int	_fcloseall_r();
FILE *	_fdopen_r();
int	_fflush_r();
int	_fgetc_r();
char *  _fgets_r();




int	_fgetpos_r();
int	_fsetpos_r();

int	_fiprintf_r();
int	_fiscanf_r();
FILE *	_fmemopen_r();
FILE *	_fopen_r();
FILE *	_freopen_r();
int	_fprintf_r();
int	_fpurge_r();
int	_fputc_r();
int	_fputs_r();
size_t	_fread_r();
int	_fscanf_r();
int	_fseek_r();
int	_fseeko_r();
long	_ftell_r();
_off_t	_ftello_r();
void	_rewind_r();
size_t	_fwrite_r();
int	_getc_r();
int	_getc_unlocked_r();
int	_getchar_r();
int	_getchar_unlocked_r();
char *	_gets_r();
int	_iprintf_r();
int	_iscanf_r();
FILE *	_open_memstream_r();
void	_perror_r();
int	_printf_r();
int	_putc_r();
int	_putc_unlocked_r();
int	_putchar_unlocked_r();
int	_putchar_r();
int	_puts_r();
int	_remove_r();
int	_rename_r();
int	_scanf_r();
int	_siprintf_r();
int	_siscanf_r();
int	_sniprintf_r();
int	_snprintf_r();
int	_sprintf_r();
int	_sscanf_r();
char *	_tempnam_r();
FILE *	_tmpfile_r();
char *	_tmpnam_r();
int	_ungetc_r();
int	_vasiprintf_r();
char *	_vasniprintf_r();
char *	_vasnprintf_r();
int	_vasprintf_r();
int	_vdiprintf_r();
int	_vdprintf_r();
int	_vfiprintf_r();
int	_vfiscanf_r();
int	_vfprintf_r();
int	_vfscanf_r();
int	_viprintf_r();
int	_viscanf_r();
int	_vprintf_r();
int	_vscanf_r();
int	_vsiprintf_r();
int	_vsiscanf_r();
int	_vsniprintf_r();
int	_vsnprintf_r();
int	_vsprintf_r();
int	_vsscanf_r();

/* Other extensions.  */

int	fpurge();
ssize_t __getdelim();
ssize_t __getline();






















/*
 * Routines internal to the implementation.
 */

int	__srget_r();
int	__swbuf_r();

/*
 * Stdio function-access interface.
 */




		
		
		
		

		
		
		
		

FILE	*funopen();
FILE	*_funopen_r();






typedef ssize_t cookie_read_function_t(void *__cookie, char *__buf, size_t __n);
typedef ssize_t cookie_write_function_t(void *__cookie, const char *__buf,
					size_t __n);


				   

typedef int cookie_seek_function_t(void *__cookie, off_t *__off, int __whence);

typedef int cookie_close_function_t(void *__cookie);
typedef struct
{
  /* These four struct member names are dictated by Linux; hopefully,
     they don't conflict with any macros.  */
  cookie_read_function_t  *read;
  cookie_write_function_t *write;
  cookie_seek_function_t  *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
FILE *fopencookie();
FILE *_fopencookie_r();


/*
 * The __sfoo macros are here so that we can 
 * define function versions in the C library.
 */
















  
    
    
      
      
      
        
      
        
      
    
  







	
		
	
		


/*
 * This has been tuned to generate reasonable code on the vax using pcc
 */































#if !(defined(lint))


#endif


/* fast always-buffered version, true iff error */















#line 30 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\string.h" 1
/*
 * string.h
 *
 * Definitions for memory and string functions.
 */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 10 "C:\\cygwin\\usr\\include\\string.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */





































  
  
  





  
  
  
  
  
  
  
  
  









	
	
	
	
	
	




	
	
	
        



	
	
	
	
        










	
	


































  
  
  
  
  
  
  

  


















  
  
  
  
  
  
  


  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  


  


  

  
  









  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  








  
  
  
























  
  
  

  
  



















  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  
















































































































































































  

  


  

  
  

  
  

  

  

  
  
  
  
  

  
  
  

  
    
      
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
	  
        
  


      
        

          
          
        
    

  
  
  

  
  

  


  
  










































































































































































  












#line 11 "C:\\cygwin\\usr\\include\\string.h" 2


#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 13 "C:\\cygwin\\usr\\include\\string.h" 2






char * 	 memchr();
int 	 memcmp();
char * 	 memcpy();
char *	 memmove();
char *	 memset();
char 	*strcat();
char 	*strchr();
int	 strcmp();
int	 strcoll();
char 	*strcpy();
size_t	 strcspn();
char 	*strerror();
size_t	 strlen();
char 	*strncat();
int	 strncmp();
char 	*strncpy();
char 	*strpbrk();
char 	*strrchr();
size_t	 strspn();
char 	*strstr();


char 	*strtok();

size_t	 strxfrm();


char 	*strtok_r();

int	 bcmp();
void	 bcopy();
void	 bzero();
int	 ffs();
char 	*index();
char *	 memccpy();
char *	 mempcpy();
char *	 memmem();
char 	*rindex();
char 	*stpcpy();
char 	*stpncpy();
int	 strcasecmp();
char	*strcasestr();
char 	*strdup();
char 	*_strdup_r();
char 	*strndup();
char 	*_strndup_r();
char 	*strerror_r();
size_t	 strlcat();
size_t	 strlcpy();
int	 strncasecmp();
size_t	 strnlen();
char 	*strsep();
char	*strlwr();
char	*strupr();






/* These function names are used on Windows and perhaps other systems.  */
#if !(defined(strcmpi))

#endif
#if !(defined(stricmp))

#endif
#if !(defined(strncmpi))

#endif
#if !(defined(strnicmp))

#endif

#line 1 "C:\\cygwin\\usr\\include\\sys\\string.h" 1
/* This is a dummy <sys/string.h> used as a placeholder for
   systems that need to have a special header file.  */
#line 76 "C:\\cygwin\\usr\\include\\string.h" 2




#line 31 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\ctype.h" 1



#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 4 "C:\\cygwin\\usr\\include\\ctype.h" 2



int isalnum();
int isalpha();
int iscntrl();
int isdigit();
int isgraph();
int islower();
int isprint();
int ispunct();
int isspace();
int isupper();
int isxdigit();
int tolower();
int toupper();


int isblank();


int isascii();
int toascii();















extern	 char	*__ctype_ptr__;


/* These macros are intentionally written in a manner that will trigger
   a gcc -Wall warning if the user mistakenly passes a 'char' instead
   of an int containing an 'unsigned char'.  Note that the sizeof will
   always be 1, which is what we want for mapping EOF to __ctype_ptr__[0];
   the use of a raw index inside the sizeof triggers the gcc warning if
   __c was of type char, and sizeof masks side effects of the extra __c.
   Meanwhile, the real index to __ctype_ptr__+1 must be cast to int,
   since isalpha(0x100000001LL) must equal isalpha(1), rather than being
   an out-of-bounds reference on a 64-bit machine.  */



















/* Non-gcc versions will get the library versions, and will be
   slightly slower.  These macros are not NLS-aware so they are
   disabled if the system supports the extended character sets. */
























/* For C++ backward-compatibility only.  */
extern	  char	_ctype_[];




#line 32 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\time.h" 1
/*
 * time.h
 * 
 * Struct and function declarations for dealing with time.
 */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 10 "C:\\cygwin\\usr\\include\\time.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\reent.h" 1
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */





































  
  
  





  
  
  
  
  
  
  
  
  









	
	
	
	
	
	




	
	
	
        



	
	
	
	
        










	
	


































  
  
  
  
  
  
  

  


















  
  
  
  
  
  
  


  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  


  


  

  
  









  
  
  
  
  
  
  

  

  
  

  
					   
  
					    
  
  

  
  
  
  

  
  
  

  
  

  
  
  

  
  


  

  








  
  
  
























  
  
  

  
  



















  
  
  
  
  





  
  
  
  
  
  
  
  
  
  
  
  






  

  

  


  

  

  

  

  
  

  

  

  

  
  
  

  
  
  

  
  

  
  
  

  
  
  
  
















































































































































































  

  


  

  
  

  
  

  

  

  
  
  
  
  

  
  
  

  
    
      
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
	  
        
  


      
        

          
          
        
    

  
  
  

  
  

  


  
  










































































































































































  












#line 11 "C:\\cygwin\\usr\\include\\time.h" 2




/* Get _CLOCKS_PER_SEC_ */
#line 1 "C:\\cygwin\\usr\\include\\machine\\time.h" 1















#line 14 "C:\\cygwin\\usr\\include\\time.h" 2







#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */

































/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 17 "C:\\cygwin\\usr\\include\\time.h" 2

#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 19 "C:\\cygwin\\usr\\include\\time.h" 2



struct tm
{
  int	tm_sec;
  int	tm_min;
  int	tm_hour;
  int	tm_mday;
  int	tm_mon;
  int	tm_year;
  int	tm_wday;
  int	tm_yday;
  int	tm_isdst;
};

clock_t	   clock();
double	   difftime();
time_t	   mktime();
time_t	   time();

char	  *asctime();
char	  *ctime();
struct tm *gmtime();
struct tm *localtime();

size_t	   strftime();

char	  *asctime_r();
char	  *ctime_r();
struct tm *gmtime_r();
struct tm *localtime_r();







char      *strptime();
void      tzset();
void      _tzset_r();

typedef struct __tzrule_struct
{
  char ch;
  int m;
  int n;
  int d;
  int s;
  time_t change;
  long offset; /* Match type of _timezone. */
} __tzrule_type;

typedef struct __tzinfo_struct
{
  int __tznorth;
  int __tzyear;
  __tzrule_type __tzrule[2];
} __tzinfo_type;

__tzinfo_type *__gettzinfo();

/* getdate functions */

#if defined(HAVE_GETDATE)


int *__getdate_err();

struct tm *	getdate();
/* getdate_err is set to one of the following values to indicate the error.
     1  the DATEMSK environment variable is null or undefined,
     2  the template file cannot be opened for reading,
     3  failed to get file status information,
     4  the template file is not a regular file,
     5  an error is encountered while reading the template file,
     6  memory allication failed (not enough memory available),
     7  there is no line in the template that matches the input,
     8  invalid input specification  */

/* getdate_r returns the error code as above */
int		getdate_r();
#endif
/* defines for the opengroup specifications Derived from Issue 1 of the SVID.  */
extern  long _timezone;
extern  int _daylight;
extern  char *_tzname[2];

/* POSIX defines the external tzname being defined in time.h */
#if !(defined(tzname))

#endif




#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */




































































































































































  
    
   
    
   
    
   
    
  





#line 105 "C:\\cygwin\\usr\\include\\time.h" 2



















  








  
   














/* CPU-time Clock Attributes, P1003.4b/D8, p. 54 */

/* values for the clock enable attribute */




/* values for the pthread cputime_clock_allowed attribute */


                           /*   CPU-time clock attached to that thread */
                           /*   shall be accessible. */

                           /*   thread shall not have a CPU-time clock */
                           /*   accessible. */

/* Manifest Constants, P1003.1b-1993, p. 262 */



/* Flag indicating time is "absolute" with respect to the clock
   associated with a time.  */



/* Manifest Constants, P1003.4b/D8, p. 55 */










































#line 33 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\pwd.h" 1
/*-
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)pwd.h	5.13 (Berkeley) 5/28/91
 */







#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 40 "C:\\cygwin\\usr\\include\\pwd.h" 2






struct passwd {
	char	*pw_name;		/* user name */
	char	*pw_passwd;		/* encrypted password */
	uid_t	pw_uid;			/* user uid */
	gid_t	pw_gid;			/* user gid */
	char	*pw_comment;		/* comment */
	char	*pw_gecos;		/* Honeywell login info */
	char	*pw_dir;		/* home directory */
	char	*pw_shell;		/* default shell */
};


struct passwd	*getpwuid (uid_t);
struct passwd	*getpwnam (const char *);
int 		 getpwnam_r (const char *, struct passwd *,
			char *, size_t , struct passwd **);
int		 getpwuid_r (uid_t, struct passwd *, char *,
			size_t, struct passwd **);

struct passwd	*getpwent (void);
void		 setpwent (void);
void		 endpwent (void);






#line 34 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\grp.h" 1
/*	$NetBSD: grp.h,v 1.7 1995/04/29 05:30:40 cgd Exp $	*/

/*-
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)grp.h	8.2 (Berkeley) 1/21/94
 */




#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 46 "C:\\cygwin\\usr\\include\\grp.h" 2






struct group {
	char	*gr_name;		/* group name */
	char	*gr_passwd;		/* group password */
	gid_t	gr_gid;			/* group id */
	char	**gr_mem;		/* group members */
};





struct group	*getgrgid (gid_t);
struct group	*getgrnam (const char *);
int		 getgrnam_r (const char *, struct group *,
			char *, size_t, struct group **);
int		 getgrgid_r (gid_t, struct group *,
			char *, size_t, struct group **);

struct group	*getgrent (void);
void		 setgrent (void);
void		 endgrent (void);

void		 setgrfile (const char *);



char		*group_from_gid (gid_t, int);
int		 setgroupent (int);

int		 initgroups (const char *, gid_t);







#line 35 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\unistd.h" 1



#line 1 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 1






#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 6 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 7 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\_types.h" 1
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  This file lives in the `sys' directory so targets can provide
   their own if desired (or they can put target dependant conditionals here).
*/

































				




















  
  
  
    
    
  










#line 8 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2


#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */




















typedef long int ptrdiff_t;








/* If this symbol has done its job, get rid of it.  */



/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 9 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2

extern char **environ;

void	_exit();

int	access();
unsigned  alarm();
int     chdir();
int     chmod();

int     chown();




int     close();



char *  ctermid();
char *  cuserid();



int     dup();
int     dup2();






int     execl();
int     execle();
int     execlp();
int     execv();
int     execve();
int     execvp();







int     fchmod();

int     fchown();





pid_t   fork();
long    fpathconf();
int     fsync();
int     fdatasync();
char *  getcwd();




gid_t   getegid();
uid_t   geteuid();
gid_t   getgid();

int     getgroups();



char *  getlogin();



char *  getpass();
int	getpagesize();



pid_t   getpgid();
pid_t   getpgrp();
pid_t   getpid();
pid_t   getppid();




uid_t   getuid();






int     isatty();

int     lchown();

int     link();



int	nice();

off_t   lseek();








long    pathconf();
int     pause();



int     pipe();



ssize_t pread();
ssize_t pwrite();
int read();




int     rmdir();



void *  sbrk();





int     setgid();




int     setpgid();
int     setpgrp();




pid_t   setsid();

int     setuid();




unsigned sleep();
void    swab();
long    sysconf();
pid_t   tcgetpgrp();
int     tcsetpgrp();
char *  ttyname();



int     unlink();
int 	usleep();
int     vhangup();
int write();






extern char *optarg;			/* getopt(3) external variables */
extern int optind, opterr, optopt;
int	 getopt(int, char * const [], const char *);
extern int optreset;			/* getopt(3) external variable */


pid_t   vfork();































 






ssize_t readlink();



int     symlink();













#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */




































































































































































  
    
   
    
   
    
   
    
  





#line 187 "C:\\cygwin\\usr\\include\\sys\\unistd.h" 2





/*
 *  sysconf values per IEEE Std 1003.1, 2008 Edition
 */











/* These are non-POSIX values we accidentally introduced in 2000 without
   guarding them.  Keeping them unguarded for backward compatibility. */




/* End of non-POSIX values. */


































/* _SC_THREAD_PRIO_PROTECT was _SC_THREAD_PRIO_CEILING in early drafts */
























































































/*
 *  pathconf values per IEEE Std 1003.1, 2008 Edition
 */




























/*
 *  confstr values per IEEE Std 1003.1, 2004 Edition
 */

























































#line 4 "C:\\cygwin\\usr\\include\\unistd.h" 2


#line 36 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\fcntl.h" 1
/* fcntl.h

   Copyright 1996, 1998, 2001, 2005, 2006, 2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\sys\\fcntl.h" 1


#line 1 "C:\\cygwin\\usr\\include\\sys\\_default_fcntl.h" 1






#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 5 "C:\\cygwin\\usr\\include\\sys\\_default_fcntl.h" 2




















/*
 * Flag values for open(2) and fcntl(2)
 * The kernel adds 1 to the open modes to turn it into some
 * combination of FREAD and FWRITE.
 */








/*	O_NDELAY	_FNDELAY 	set in include/fcntl.h */
/*	O_NDELAY	_FNBIO 		set in include/fcntl.h */


/* For machines which care - */

























/*
 * Flags that work for fcntl(fd, F_SETFL, FXXXX)
 */







/*
 * Flags that are disallowed for fcntl's (FCNTLCANT);
 * used for opens, internal state, or locking.
 */







/*
 * The rest of the flags, used only for opens
 */







/* XXX close on exec request; must match UF_EXCLOSE in user.h */


/* fcntl(2) requests */





















/* fcntl(2) flags (l_type field of flock structure) */
















/*#include <sys/stdtypes.h>*/


/* file segment locking set data type - information passed to system by user */
struct flock {
	short	l_type;		/* F_RDLCK, F_WRLCK, or F_UNLCK */
	short	l_whence;	/* flag to choose starting offset */
	long	l_start;	/* relative offset, in bytes */
	long	l_len;		/* length, in bytes; 0 means lock to EOF */
	short	l_pid;		/* returned with F_GETLK */
	short	l_xxx;		/* reserved for future use */
};


/* extended file segment locking set data type */
struct eflock {
	short	l_type;		/* F_RDLCK, F_WRLCK, or F_UNLCK */
	short	l_whence;	/* flag to choose starting offset */
	long	l_start;	/* relative offset, in bytes */
	long	l_len;		/* length, in bytes; 0 means lock to EOF */
	short	l_pid;		/* returned with F_GETLK */
	short	l_xxx;		/* reserved for future use */
	long	l_rpid;		/* Remote process id wanting this lock */
	long	l_rsys;		/* Remote system id wanting this lock */
};

#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 120 "C:\\cygwin\\usr\\include\\sys\\_default_fcntl.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\stat.h" 1






#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 6 "C:\\cygwin\\usr\\include\\sys\\stat.h" 2
#line 1 "C:\\cygwin\\usr\\include\\time.h" 1
/*
 * time.h
 * 
 * Struct and function declarations for dealing with time.
 */



























  
  
  
  
  
  
  
  
  































  
  
  
  
  
  
  




  
  
  


























































  








  
   
























                           
                           

                           
                           





















































#line 7 "C:\\cygwin\\usr\\include\\sys\\stat.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 8 "C:\\cygwin\\usr\\include\\sys\\stat.h" 2

/* dj's stat defines _STAT_H_ */

/* It is intended that the layout of this structure not change when the
   sizes of any of the basic types change (short, int, long) [via a compile
   time option].  */







struct	stat 
{
  dev_t		st_dev;
  ino_t		st_ino;
  mode_t	st_mode;
  nlink_t	st_nlink;
  uid_t		st_uid;
  gid_t		st_gid;
  dev_t		st_rdev;
  off_t		st_size;

  
  
  
  
  

  /* SysV/sco doesn't have the rest... But Solaris, eabi does.  */

  
  
  

  time_t	st_atime;
  long		st_spare1;
  time_t	st_mtime;
  long		st_spare2;
  time_t	st_ctime;
  long		st_spare3;
  long		st_blksize;
  long		st_blocks;
  long	st_spare4[2];


};















































































int	chmod();
int     fchmod();
int	fstat();
int	mkdir();
int	mkfifo();
int	stat();
mode_t	umask();














/* Provide prototypes for most of the _<systemcall> names that are
   provided in newlib for some compilers.  */













#line 121 "C:\\cygwin\\usr\\include\\sys\\_default_fcntl.h" 2

extern int open ();
extern int creat ();
extern int fcntl ();





/* Provide _<systemcall> prototypes for functions provided by some versions
   of newlib.  */











#line 3 "C:\\cygwin\\usr\\include\\sys\\fcntl.h" 2

#line 14 "C:\\cygwin\\usr\\include\\fcntl.h" 2


/* sys/fcntl defines values up to 0x40000 (O_NOINHERIT). */





/* POSIX-1.2008 requires this flag and allows to set it to 0 if its
   functionality is not required. */




















extern int posix_fadvise ();
extern int posix_fallocate ();




#line 37 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\limits.h" 1
/* limits.h

   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
   2008 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */



























































































































































































































































































































































































































































































#line 38 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\setjmp.h" 1
/*
	setjmp.h
	stubs for future use.
*/




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 9 "C:\\cygwin\\usr\\include\\setjmp.h" 2
#line 1 "C:\\cygwin\\usr\\include\\machine\\setjmp.h" 1























/* necv70 was 9 as well. */












































































































































































































































































#line 10 "C:\\cygwin\\usr\\include\\setjmp.h" 2



void	longjmp();
int	setjmp();




#line 39 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2

#line 1 "C:\\cygwin\\usr\\include\\netdb.h" 1
/* Original linux netdb.h merged with winsock.h types */

/*-
 * Copyright (c) 1980, 1983, 1988, 1993
 *     The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)netdb.h	8.1 (Berkeley) 6/2/93
 *      netdb.h,v 1.1.1.1 1995/02/18 05:34:07 hjl Exp
 * -
 * Portions Copyright (c) 1993 by Digital Equipment Corporation.
 *
 * Permission to use, copy, modify and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies, and that
 * the name of Digital Equipment Corporation not be used in advertising or
 * publicity pertaining to distribution of the document or software without
 * specific, written prior permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL EQUIPMENT
 * CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 * -
 * --Copyright--
 */







#line 1 "C:\\cygwin\\usr\\include\\inttypes.h" 1
/* inttypes.h - fixed size integer types

   Copyright 2003, 2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\stdint.h" 1
/* stdint.h - integer types

   Copyright 2003, 2006, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




/* Exact-width integer types */



typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;


typedef unsigned int uint32_t;

typedef unsigned long long uint64_t;

/* Minimum-width integer types */

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;

typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

/* Fastest minimum-width integer types */

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;

typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;

/* Integer types capable of holding object pointers */



typedef int intptr_t;

typedef unsigned int uintptr_t;

/* Greatest-width integer types */

typedef long long intmax_t;
typedef unsigned long long uintmax_t;

/* Limits of exact-width integer types */
















/* Limits of minimum-width integer types */
















/* Limits of fastest minimum-width integer types */
















/* Limits of integer types capable of holding object pointers */





/* Limits of greatest-width integer types */





/* Limits of other integer types */

#if !(defined(PTRDIFF_MIN))


#endif
#if !(defined(SIG_ATOMIC_MIN))

#endif
#if !(defined(SIG_ATOMIC_MAX))

#endif
#if !(defined(SIZE_MAX))

#endif
#if !(defined(WCHAR_MIN))



#if 1


#endif
#endif
#if !(defined(WINT_MIN))


#endif
/* Macros for minimum-width integer constant expressions */











/* Macros for greatest-width integer constant expressions */





#line 14 "C:\\cygwin\\usr\\include\\inttypes.h" 2

#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */





























/* If this symbol has done its job, get rid of it.  */



/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 15 "C:\\cygwin\\usr\\include\\inttypes.h" 2

/* fprintf() macros for signed integers */





































/* fprintf() macros for unsigned integers */









































































/* fscanf() macros for signed integers */





































/* fscanf() macros for unsigned integers */


























































#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 225 "C:\\cygwin\\usr\\include\\inttypes.h" 2

typedef struct {
  intmax_t quot;
  intmax_t rem;
} imaxdiv_t;

intmax_t imaxabs();
imaxdiv_t imaxdiv();
intmax_t strtoimax();
uintmax_t strtoumax();
intmax_t wcstoimax();
uintmax_t wcstoumax();





#line 64 "C:\\cygwin\\usr\\include\\netdb.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\socket.h" 1
/* sys/socket.h

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006,
   2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\features.h" 1
/* features.h

   Copyright 2001, 2002, 2003, 2004 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */


























#line 15 "C:\\cygwin\\usr\\include\\sys\\socket.h" 2
#line 1 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 1
/* cygwin/socket.h

   Copyright 1999, 2000, 2001, 2005, 2006, 2007, 2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







#line 1 "C:\\cygwin\\usr\\include\\stdint.h" 1
/* stdint.h - integer types

   Copyright 2003, 2006, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







































































































































































#line 17 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 2

/* Not unsigned for backward compatibility.  Keep #define for backward
   compatibility. */
#if !(defined(socklen_t))
typedef int socklen_t;

#endif
typedef uint16_t sa_family_t;

struct sockaddr {
  sa_family_t		sa_family;	/* address family, AF_xxx	*/
  char			sa_data[14];	/* 14 bytes of protocol address	*/
};

/* Definition of sockaddr_storage according to SUSv3. */






struct sockaddr_storage {
  sa_family_t		ss_family;
  char			_ss_pad1[((sizeof (int64_t)) - sizeof (sa_family_t))];
  int64_t		__ss_align;
  char			_ss_pad2[(128 - (sizeof (sa_family_t) + ((sizeof (int64_t)) - sizeof (sa_family_t)) + (sizeof (int64_t))))];
};

#line 1 "C:\\cygwin\\usr\\include\\asm\\socket.h" 1
/* asm/socket.h

   Copyright 1996, 1997, 1998, 2001, 2005, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\cygwin\\if.h" 1
/* cygwin/if.h

   Copyright 1996, 2001, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 17 "C:\\cygwin\\usr\\include\\cygwin\\if.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\socket.h" 1
/* sys/socket.h

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006,
   2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */


















  
  
  
  
  
  
  
  
  
		    
  
  
  
  
		  
  
		  
  
		  
  
  
  

  





#line 18 "C:\\cygwin\\usr\\include\\cygwin\\if.h" 2

/* Standard interface flags. */












struct if_nameindex {
  unsigned  if_index;
  char     *if_name;
};

/* This is the structure expected by ioctl when the application requests
   the friendly adapter name (>= XP SP1).  ifru_data should point to such
   a structure when ioctl is called with SIOCGIFFRNDLYNAM. */


struct ifreq_frndlyname {
  int  ifrf_len;
  char ifrf_friendlyname[260];
};

/*
 * Interface request structure used for socket
 * ioctl's.  All interface ioctl's must have parameter
 * definitions which begin with ifr_name.  The
 * remainder may be interface specific.
 */




struct ifreq {
  union {
    char    ifrn_name[44];   /* Unique Windows Adapter name (A GUID) */
  } ifr_ifrn;

  union {
    struct  sockaddr ifru_addr;
    struct  sockaddr ifru_broadaddr;
    struct  sockaddr ifru_dstaddr;
    struct  sockaddr ifru_netmask;
    struct  sockaddr ifru_hwaddr;
    int     ifru_flags;
    int     ifru_metric;
    int     ifru_mtu;
    int     ifru_ifindex;
    /* The space must be preallocated by the application. */
    void   *ifru_data;
    /* Pad to sizeof sockaddr_in6 for further extensions. */
    char    __ifru_pad[28];
  } ifr_ifru;
};














/*
 * Structure used in SIOCGIFCONF request.
 * Used to retrieve interface configuration
 * for machine (useful for programs which
 * must know all networks accessible).
 */

struct ifconf
{
  int     ifc_len;                        /* size of buffer       */
  union
  {
    caddr_t ifcu_buf;
    struct  ifreq *ifcu_req;
  } ifc_ifcu;
};




extern unsigned             if_nametoindex (const char *);
extern char                *if_indextoname (unsigned, char *);
extern struct if_nameindex *if_nameindex (void);
extern void                 if_freenameindex (struct if_nameindex *);





#line 14 "C:\\cygwin\\usr\\include\\asm\\socket.h" 2




















/* Needed for if queries */



























/*
 * Additional options.
 */










#line 44 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 2
#line 1 "C:\\cygwin\\usr\\include\\cygwin\\sockios.h" 1
/* sockios.h */
#line 45 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\uio.h" 1
/* sys/uio.h

   Copyright 1996, 2000, 2001, 2002 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




/* For size_t */
#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */





























/* If this symbol has done its job, get rid of it.  */



/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 15 "C:\\cygwin\\usr\\include\\sys\\uio.h" 2
/* For ssize_t */
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 17 "C:\\cygwin\\usr\\include\\sys\\uio.h" 2

#line 1 "C:\\cygwin\\usr\\include\\sys\\cdefs.h" 1
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD: src/sys/sys/cdefs.h,v 1.54 2002/05/11 03:58:24 alfred Exp $
 */














































































#line 19 "C:\\cygwin\\usr\\include\\sys\\uio.h" 2



/*
 * Define the uio buffers used for writev, readv.
 */

struct iovec
{
  void *iov_base;
  size_t iov_len;
};

extern ssize_t readv (int filedes, const struct iovec *vector, int count);
extern ssize_t writev (int filedes, const struct iovec *vector, int count);




#line 46 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 47 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 2

struct ucred {
  pid_t			pid;
  __uid32_t		uid;
  __gid32_t		gid;
};

struct linger {
  unsigned short	l_onoff;	/* Linger active	*/
  unsigned short	l_linger;	/* How long to linger for	*/
};

struct msghdr
{
  void *		msg_name;	/* Socket name			*/
  socklen_t		msg_namelen;	/* Length of name		*/
  struct iovec *	msg_iov;	/* Data blocks			*/
  int			msg_iovlen;	/* Number of blocks		*/
  void *		msg_control;	/* Ancillary data		*/
  socklen_t		msg_controllen;	/* Ancillary data buffer length	*/
  int			msg_flags;	/* Received flags on recvmsg	*/
};

struct cmsghdr
{
  socklen_t		cmsg_len;	/* Length of cmsghdr + data	*/
  int			cmsg_level;	/* Protocol			*/
  int			cmsg_type;	/* Protocol type		*/
};



























/* "Socket"-level control message types: */






  
  
  
  
  
  					
  


/* Socket types. */






/* GNU extension flags.  Or them to the type parameter in calls to
   socket(2) to mark socket as nonblocking and/or close-on-exec. */





/* Supported address families. */
/*
 * Address families.
 */























/*
 * Protocol families, same as address families for now.
 */
























/* Maximum queue length specificable by listen.  */


/* Flags we can use with send/ and recv. */









/* Setsockoptions(2) level. Thanks to BSD these must match IPPROTO_xxx */









/* IP options */
#if !(defined(IPTOS_LOWDELAY))



#endif
/* These need to appear somewhere around here */




/* IP options for use with getsockopt/setsockopt */
















/* IPv6 options for use with getsockopt/setsockopt */

















/* IP agnostic options for use with getsockopt/setsockopt */










/* Old WinSock1 values, needed internally */











/* IPX options */


/* TCP options - this way around because someone left a set in the c library includes */
#if !(defined(TCP_NODELAY))


#endif
/* The various priorities. */








#line 16 "C:\\cygwin\\usr\\include\\sys\\socket.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\time.h" 1
/* time.h -- An implementation of the standard Unix <sys/time.h> file.
   Written by Geoffrey Noer <noer@cygnus.com>
   Public domain; no rights reserved. */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 8 "C:\\cygwin\\usr\\include\\sys\\time.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 9 "C:\\cygwin\\usr\\include\\sys\\time.h" 2






struct timeval {
  time_t      tv_sec;
  suseconds_t tv_usec;
};

struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};









struct  itimerval {
  struct  timeval it_interval;
  struct  timeval it_value;
};

/* BSD time macros used by RTEMS code */





























int gettimeofday();
int settimeofday();
int utimes();
int getitimer();
int setitimer();





#line 17 "C:\\cygwin\\usr\\include\\sys\\socket.h" 2





/* SUS symbolic values for the second parm to shutdown(2) */





  int accept (int, struct sockaddr *__peer, socklen_t *);
  int accept4 (int, struct sockaddr *__peer, socklen_t *, int flags);
  int bind (int, const struct sockaddr *__my_addr, socklen_t __addrlen);
  int connect (int, const struct sockaddr *, socklen_t);
  int getpeername (int, struct sockaddr *__peer, socklen_t *);
  int getsockname (int, struct sockaddr *__addr, socklen_t *);
  int listen (int, int __n);
  ssize_t recv (int, void *__buff, size_t __len, int __flags);
  ssize_t recvfrom (int, void *__buff, size_t __len, int __flags,
		    struct sockaddr *__from, socklen_t *__fromlen);
  ssize_t recvmsg(int s, struct msghdr *msg, int flags);
  ssize_t send (int, const void *__buff, size_t __len, int __flags);
  ssize_t sendmsg(int s, const struct msghdr *msg, int flags);
  ssize_t sendto (int, const void *, size_t __len, int __flags,
		  const struct sockaddr *__to, socklen_t __tolen);
  int setsockopt (int __s, int __level, int __optname, const void *optval,
		  socklen_t __optlen);
  int getsockopt (int __s, int __level, int __optname, void *__optval,
		  socklen_t *__optlen);
  int shutdown (int, int);
  int socket (int __family, int __type, int __protocol);
  int socketpair (int __domain, int __type, int __protocol, int *__socket_vec);

  struct servent *getservbyname (const char *__name, const char *__proto);





#line 65 "C:\\cygwin\\usr\\include\\netdb.h" 2

#line 1 "C:\\cygwin\\usr\\include\\netinet\\in.h" 1
/* netinet/in.h

   Copyright 1998, 2001, 2006 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\cygwin\\in.h" 1
/*
 * INET		An implementation of the TCP/IP protocol suite for the LINUX
 *		operating system.  INET is implemented using the  BSD Socket
 *		interface as the means of communication with the user level.
 *
 *		Definitions of the Internet Protocol.
 *
 * Version:	@(#)in.h	1.0.1	04/21/93
 *
 * Authors:	Original taken from the GNU Project <netinet/in.h> file.
 *		Fred N. van Kempen, <waltje@uWalt.NL.Mugnet.ORG>
 *
 *		This program is free software; you can redistribute it and/or
 *		modify it under the terms of the GNU General Public License
 *		as published by the Free Software Foundation; either version
 *		2 of the License, or (at your option) any later version.
 */



#line 1 "C:\\cygwin\\usr\\include\\cygwin\\socket.h" 1
/* cygwin/socket.h

   Copyright 1999, 2000, 2001, 2005, 2006, 2007, 2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */


















  
  










  
  
  
  








  
  
  



  
  




  
  
  
  
  
  
  




  
  
  



































  
  
  
  
  
  					
  



















































































































































































#line 21 "C:\\cygwin\\usr\\include\\cygwin\\in.h" 2

typedef uint16_t in_port_t;
typedef uint32_t in_addr_t;

/* Standard well-defined IP protocols.  If you ever add one here, don't
   forget to define it below. */
enum
{
  IPPROTO_IP = 0,		/* Dummy protocol for TCP		*/
  IPPROTO_HOPOPTS = 0,		/* IPv6 Hop-by-Hop options		*/
  IPPROTO_ICMP = 1,		/* Internet Control Message Protocol	*/
  IPPROTO_IGMP = 2,		/* Internet Gateway Management Protocol */
  IPPROTO_IPIP = 4,		/* IPIP tunnels (older KA9Q tunnels use 94) */
  IPPROTO_TCP = 6,		/* Transmission Control Protocol	*/
  IPPROTO_EGP = 8,		/* Exterior Gateway Protocol		*/
  IPPROTO_PUP = 12,		/* PUP protocol				*/
  IPPROTO_UDP = 17,		/* User Datagram Protocol		*/
  IPPROTO_IDP = 22,		/* XNS IDP protocol			*/
  IPPROTO_IPV6 = 41,		/* IPv6 header				*/
  IPPROTO_ROUTING = 43,		/* IPv6 Routing header			*/
  IPPROTO_FRAGMENT = 44,	/* IPv6 fragmentation header		*/
  IPPROTO_ESP = 50,		/* encapsulating security payload	*/
  IPPROTO_AH = 51,		/* authentication header		*/
  IPPROTO_ICMPV6 = 58,		/* ICMPv6				*/
  IPPROTO_NONE = 59,		/* IPv6 no next header			*/
  IPPROTO_DSTOPTS = 60,		/* IPv6 Destination options		*/
  IPPROTO_RAW = 255,		/* Raw IP packets			*/
  IPPROTO_MAX
};

/* Define IPPROTO_xxx values to accomodate SUSv3 */




















/* Standard well-known ports.  *//* from winsup/include/netinet/in.h */
enum
{
  IPPORT_ECHO = 7,		/* Echo service.  */
  IPPORT_DISCARD = 9,		/* Discard transmissions service.  */
  IPPORT_SYSTAT = 11,		/* System status service.  */
  IPPORT_DAYTIME = 13,	/* Time of day service.  */
  IPPORT_NETSTAT = 15,	/* Network status service.  */
  IPPORT_FTP = 21,		/* File Transfer Protocol.  */
  IPPORT_TELNET = 23,		/* Telnet protocol.  */
  IPPORT_SMTP = 25,		/* Simple Mail Transfer Protocol.  */
  IPPORT_TIMESERVER = 37,	/* Timeserver service.  */
  IPPORT_NAMESERVER = 42,	/* Domain Name Service.  */
  IPPORT_WHOIS = 43,		/* Internet Whois service.  */
  IPPORT_MTP = 57,

  IPPORT_TFTP = 69,		/* Trivial File Transfer Protocol.  */
  IPPORT_RJE = 77,
  IPPORT_FINGER = 79,		/* Finger service.  */
  IPPORT_TTYLINK = 87,
  IPPORT_SUPDUP = 95,		/* SUPDUP protocol.  */


  IPPORT_EXECSERVER = 512,	/* execd service.  */
  IPPORT_LOGINSERVER = 513,	/* rlogind service.  */
  IPPORT_CMDSERVER = 514,
  IPPORT_EFSSERVER = 520,

  /* UDP ports.  */
  IPPORT_BIFFUDP = 512,
  IPPORT_WHOSERVER = 513,
  IPPORT_ROUTESERVER = 520,

  /* Ports less than this value are reserved for privileged processes.  */
  IPPORT_RESERVED = 1024,

  /* Ports greater this value are reserved for (non-privileged) servers.  */
  IPPORT_USERRESERVED = 5000
};

/* Internet address. */
struct in_addr
{
  in_addr_t s_addr;
};

/* Request struct for IPv4 multicast socket ops */

struct ip_mreq
{
  struct in_addr imr_multiaddr;	/* IP multicast address of group */
  struct in_addr imr_interface;	/* local IP address of interface */
};

struct ip_mreq_source
{
  struct in_addr imr_multiaddr;
  struct in_addr imr_sourceaddr;
  struct in_addr imr_interface;
};

struct ip_msfilter
{
  struct in_addr imsf_multiaddr;
  struct in_addr imsf_interface;
  uint32_t       imsf_fmode;
  uint32_t       imsf_numsrc;
  struct in_addr imsf_slist[1];
};





struct in_pktinfo
{
  struct in_addr ipi_addr;
  uint32_t       ipi_ifindex;
};

/* Request struct for IP agnostic multicast socket ops */

struct group_req
{
  uint32_t                gr_interface;
  struct sockaddr_storage gr_group;
};

struct group_source_req
{
  uint32_t                gsr_interface;
  struct sockaddr_storage gsr_group;
  struct sockaddr_storage gsr_source;
};

struct group_filter
{
  uint32_t                gf_interface;
  struct sockaddr_storage gf_group;
  uint32_t                gf_fmode;
  uint32_t                gf_numsrc;
  struct sockaddr_storage gf_slist[1];
};





/* Structure describing an Internet (IP) socket address. */

struct sockaddr_in
{
  sa_family_t	 sin_family;	/* Address family		*/
  in_port_t	 sin_port;	/* Port number			*/
  struct in_addr sin_addr;	/* Internet address		*/

  /* Pad to size of `struct sockaddr'. */
  unsigned char  __pad[16 - sizeof(short int)
			- sizeof(unsigned short int) - sizeof(struct in_addr)];
};


/*
 * Definitions of the bits in an Internet address integer.
 * On subnets, host and network parts are found according
 * to the subnet mask, not these masks.
 */
























/* Address to accept any incoming messages. */


/* Address to send to all hosts. */


/* Address indicating an error return. */


/* Network number for local host loopback. */


/* Address to loopback in software to local host.  */



/* Defines for Multicast INADDR */







/* <asm/byteorder.h> contains the htonl type stuff.. */

#line 1 "C:\\cygwin\\usr\\include\\asm\\byteorder.h" 1
/* asm/byteorder.h

   Copyright 1996, 1998, 2001, 2006, 2009 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */




#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 14 "C:\\cygwin\\usr\\include\\asm\\byteorder.h" 2
#line 1 "C:\\cygwin\\usr\\include\\stdint.h" 1
/* stdint.h - integer types

   Copyright 2003, 2006, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







































































































































































#line 15 "C:\\cygwin\\usr\\include\\asm\\byteorder.h" 2










extern uint32_t	ntohl(uint32_t);
extern uint16_t	ntohs(uint16_t);
extern uint32_t	htonl(uint32_t);
extern uint16_t	htons(uint16_t);

__inline__ uint32_t __ntohl(uint32_t);
__inline__ uint16_t __ntohs(uint16_t);

__inline__ uint32_t
__ntohl(uint32_t x)
{
	__asm__("xchgb %b0,%h0\n\t"	/* swap lower bytes	*/
		"rorl $16,%0\n\t"	/* swap words		*/
		"xchgb %b0,%h0"		/* swap higher bytes	*/
		:"=q" (x)
		: "0" (x));
	return x;
}







__inline__ uint16_t
__ntohs(uint16_t x)
{
	__asm__("xchgb %b0,%h0"		/* swap bytes		*/
		: "=q" (x)
		:  "0" (x));
	return x;
}
































#line 206 "C:\\cygwin\\usr\\include\\cygwin\\in.h" 2

/* Some random defines to make it easier in the kernel.. */






#line 1 "C:\\cygwin\\usr\\include\\cygwin\\in6.h" 1
/* cygwin/in6.h

   Copyright 2006, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

/* NOTE:  This file is NOT for direct inclusion.  Use netinet/in.h. */































































struct in6_addr
{
  union
    {
      uint8_t 	  __s6_addr[16];
      uint16_t 	  __s6_addr16[8];
      uint32_t 	  __s6_addr32[4];
    } __u6;



};

struct ipv6_mreq
{
  struct in6_addr ipv6mr_multiaddr;
  uint32_t        ipv6mr_interface;
};

struct in6_pktinfo
{
  struct in6_addr ipi6_addr;
  uint32_t        ipi6_ifindex;
};




struct sockaddr_in6
{
  sa_family_t	  sin6_family;		/* AF_INET6 */
  in_port_t	  sin6_port;		/* Port number. */
  uint32_t	  sin6_flowinfo;	/* Traffic class and flow inf. */
  struct in6_addr sin6_addr;		/* IPv6 address. */
  uint32_t	  sin6_scope_id;	/* Set of interfaces for a scope. */
};




extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;


#line 214 "C:\\cygwin\\usr\\include\\cygwin\\in.h" 2


#line 14 "C:\\cygwin\\usr\\include\\netinet\\in.h" 2





extern int bindresvport (int, struct sockaddr_in *);
extern int bindresvport_sa (int, struct sockaddr *);





#line 66 "C:\\cygwin\\usr\\include\\netdb.h" 2

/*
 * Structures returned by network data base library.  All addresses are
 * supplied in host order, and returned in network order (suitable for
 * use in system calls).
 */

  /* Different from the linux versions - note the shorts.. */
struct	hostent {
	const char	*h_name;	/* official name of host */
	char	**h_aliases;	/* alias list */
	short	h_addrtype;	/* host address type */
	short	h_length;	/* length of address */
	char	**h_addr_list;	/* list of addresses from name server */

};

/*
 * Assumption here is that a network number
 * fits in an unsigned long -- probably a poor one.
 */

struct	netent {
	char		*n_name;	/* official name of net */
	char		**n_aliases;	/* alias list */
	short		n_addrtype;	/* net address type */
	uint32_t	n_net;		/* network # */
};

struct	servent {
	char	*s_name;	/* official service name */
	char	**s_aliases;	/* alias list */
	short   s_port;		/* port # */
	char	*s_proto;	/* protocol to use */
};

struct	protoent
{
  char	*p_name;	/* official protocol name */
  char	**p_aliases;	/* alias list */
  short	p_proto;	/* protocol # */
};

struct rpcent {
	char	*r_name;	/* name of server for this rpc program */
	char	**r_aliases;	/* alias list */
	int	r_number;	/* rpc program number */
};

struct addrinfo {
  int             ai_flags;		/* input flags */
  int             ai_family;		/* address family of socket */
  int             ai_socktype;		/* socket type */
  int             ai_protocol;		/* ai_protocol */
  socklen_t       ai_addrlen;		/* length of socket address */
  char            *ai_canonname;	/* canonical name of service location */
  struct sockaddr *ai_addr;		/* socket address of socket */
  struct addrinfo *ai_next;		/* pointer to next in list */
};

/*
 * Error return codes from gethostbyname() and gethostbyaddr()
 * (left in extern int h_errno).
 */




extern __declspec(dllimport) int h_errno;










































void		endhostent (void);
void		endnetent (void);
void		endprotoent (void);
void		endservent (void);
void		endrpcent  (void);
struct hostent	*gethostbyaddr (const char *, int, int);
struct hostent	*gethostbyname (const char *);
struct hostent	*gethostent (void);
struct netent	*getnetbyaddr (long, int); /* u_long? */
struct netent	*getnetbyname (const char *);
struct netent	*getnetent (void);
struct protoent	*getprotobyname (const char *);
struct protoent	*getprotobynumber (int);
struct protoent	*getprotoent (void);
struct servent	*getservbyname (const char *, const char *);
struct servent	*getservbyport (int, const char *);
struct servent	*getservent (void);
struct rpcent	*getrpcent (void);
struct rpcent	*getrpcbyname (const char *);
struct rpcent	*getrpcbynumber (int);
const char      *hstrerror (int);
void		herror (const char *);
void		sethostent (int);
void		setnetent (int);
void		setprotoent (int);
void		setservent (int);
void		setrpcent (int);
void		freeaddrinfo (struct addrinfo *);
const char	*gai_strerror (int);
int		getaddrinfo (const char *, const char *,
			     const struct addrinfo *, struct addrinfo **);
int		getnameinfo (const struct sockaddr *, socklen_t, char *,
			     socklen_t, char *, socklen_t, int);

int		rcmd (char **, uint16_t, const char *, const char *,
		      const char *, int *);
int		rcmd_af (char **, uint16_t, const char *, const char *,
			 const char *, int *, int);
int		rexec (char **, uint16_t rport, char *, char *, char *, int *);
int		rresvport (int *);
int		rresvport_af (int *, int);
int		iruserok (unsigned long, int, const char *, const char *);
int		iruserok_sa (const void *, int, int, const char *,
			     const char *);
int		ruserok (const char *, int, const char *, const char *);





#line 41 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\netinet\\in.h" 1
/* netinet/in.h

   Copyright 1998, 2001, 2006 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

















#line 42 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2

#line 1 "C:\\cygwin\\usr\\include\\sys\\mman.h" 1
/* sys/mman.h

   Copyright 1996, 1997, 1998, 2000, 2001, 2003, 2005, 2007 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */







#line 1 "C:\\cygwin\\lib\\gcc\\i686-pc-cygwin\\3.4.4\\include\\stddef.h" 1
/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* As a special exception, if you include this header file into source
   files compiled by GCC, this header file does not by itself cause
   the resulting executable to be covered by the GNU General Public
   License.  This exception does not however invalidate any other
   reasons why the executable file might be covered by the GNU General
   Public License.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */

/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */









/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */

/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */



/* On FreeBSD 5, machine/ansi.h does not exist anymore... */



/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */




























/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */



/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */












/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */





























/* If this symbol has done its job, get rid of it.  */



/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */



































































/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */














































































































/*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
    are already defined.  */
/*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.  */






























/* A null pointer constant.  */





























#line 17 "C:\\cygwin\\usr\\include\\sys\\mman.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 18 "C:\\cygwin\\usr\\include\\sys\\mman.h" 2













/* Non-standard flag */





/*
 * Flags for msync.
 */




/*
 * Flags for posix_madvise.
 */







extern void *mmap (void *__addr, size_t __len, int __prot, int __flags, int __fd, off_t __off);

extern int munmap (void *__addr, size_t __len);
extern int mprotect (void *__addr, size_t __len, int __prot);
extern int msync (void *__addr, size_t __len, int __flags);
extern int mlock (const void *__addr, size_t __len);
extern int munlock (const void *__addr, size_t __len);

extern int posix_madvise (void *__addr, size_t __len, int __advice);

extern int shm_open (const char *__name, int __oflag, mode_t __mode);
extern int shm_unlink (const char *__name);





#line 44 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\select.h" 1
/* select.h
   Copyright 1998, 1999, 2000, 2001, 2009 Red Hat, Inc.

   Written by Geoffrey Noer <noer@cygnus.com>

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */





#line 1 "C:\\cygwin\\usr\\include\\sys\\cdefs.h" 1
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD: src/sys/sys/cdefs.h,v 1.54 2002/05/11 03:58:24 alfred Exp $
 */














































































#line 17 "C:\\cygwin\\usr\\include\\sys\\select.h" 2

/* Get fd_set, and macros like FD_SET */
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 20 "C:\\cygwin\\usr\\include\\sys\\select.h" 2

/* Get definition of timeval.  */
#line 1 "C:\\cygwin\\usr\\include\\sys\\time.h" 1
/* time.h -- An implementation of the standard Unix <sys/time.h> file.
   Written by Geoffrey Noer <noer@cygnus.com>
   Public domain; no rights reserved. */













  
  



  
  











  
  





































					





#line 23 "C:\\cygwin\\usr\\include\\sys\\select.h" 2
#line 1 "C:\\cygwin\\usr\\include\\time.h" 1
/*
 * time.h
 * 
 * Struct and function declarations for dealing with time.
 */



























  
  
  
  
  
  
  
  
  































  
  
  
  
  
  
  




  
  
  


























































  








  
   
























                           
                           

                           
                           





















































#line 24 "C:\\cygwin\\usr\\include\\sys\\select.h" 2

/* Get definition of sigset_t. */
#line 1 "C:\\cygwin\\usr\\include\\signal.h" 1



#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 4 "C:\\cygwin\\usr\\include\\signal.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\signal.h" 1
/* sys/signal.h */






#line 1 "C:\\cygwin\\usr\\include\\_ansi.h" 1
/* Provide support for both ANSI and non-ANSI environments.  */

/* Some ANSI environments are "broken" in the sense that __STDC__ cannot be
   relied upon to have it's intended meaning.  Therefore we must use our own
   concoction: _HAVE_STDC.  Always use _HAVE_STDC instead of __STDC__ in newlib
   sources!

   To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




















































































































#line 7 "C:\\cygwin\\usr\\include\\sys\\signal.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\features.h" 1
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2000.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id: features.h,v 1.22 2010/08/09 08:29:22 corinna Exp $
 */




































































































































































  
    
   
    
   
    
   
    
  





#line 8 "C:\\cygwin\\usr\\include\\sys\\signal.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 9 "C:\\cygwin\\usr\\include\\sys\\signal.h" 2

/* #ifndef __STRICT_ANSI__*/

typedef unsigned long sigset_t;







                        

                        
                        

                        






  
  



  
  
  


  
                                               
  













  
  
  






                         












  
  
                              
                              
  
    

    

  











typedef void (*_sig_func_ptr)(int);

struct sigaction 
{
	_sig_func_ptr sa_handler;
	sigset_t sa_mask;
	int sa_flags;
};





/* These depend upon the type of sigset_t, which right now 
   is always a long.. They're in the POSIX namespace, but
   are not ANSI. */






int sigprocmask();




/* protos for functions found in winsup sources for CYGWIN */

































  








/* #endif __STRICT_ANSI__ */



































#if !(defined(SIGTRAP))

























































#if 1



















#endif
#endif









#line 5 "C:\\cygwin\\usr\\include\\signal.h" 2



typedef int	sig_atomic_t;		/* Atomic entity type (ANSI) */

typedef _sig_func_ptr sighandler_t;	/* glibc naming */





struct _reent;

_sig_func_ptr _signal_r();
int	_raise_r();


_sig_func_ptr signal();
int	raise();




#line 27 "C:\\cygwin\\usr\\include\\sys\\select.h" 2



int select (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds,
 _types_fd_set *__exceptfds, struct timeval *__timeout);
int pselect (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds,
 _types_fd_set *__exceptfds, const struct timespec *__timeout,
 const sigset_t *__set);





#line 45 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 46 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\socket.h" 1
/* sys/socket.h

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006,
   2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */


















  
  
  
  
  
  
  
  
  
		    
  
  
  
  
		  
  
		  
  
		  
  
  
  

  





#line 47 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "C:\\cygwin\\usr\\include\\sys\\stat.h" 1
























  
  
  
  
  
  
  
  

  
  
  
  
  

  

  
  
  

  
  
  
  
  
  
  
  
  






















































































































#line 48 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2

#line 1 "W:\\work\\TypeChef\\boa\\src\\compat.h" 1
/*
 *  Boa, an http server
 *  Copyright (C) 1995 Paul Phillips <paulp@go2net.com>
 *  Some changes Copyright (C) 1999-2000 Jon Nelson <jnelson@boa.org>
 *   and Larry Doolittle <ldoolitt@boa.org>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 1, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

/* $Id: compat.h,v 1.18.2.1 2002/06/06 05:02:28 jnelson Exp $*/




#line 1 "W:\\work\\TypeChef\\boa\\src\\config.h" 1
/* config.h.  Generated automatically by configure.  */
/* config.h.in.  Generated automatically from configure.in by autoheader.  */

/* Define to empty if the keyword does not work.  */
/* #undef const */

/* Define to `int' if <sys/types.h> doesn't define.  */
/* #undef gid_t */

/* Define if you have a working `mmap' system call.  */
/* #undef HAVE_MMAP */

/* Define if you have <sys/wait.h> that is POSIX.1 compatible.  */


/* Define if your struct tm has tm_zone.  */
/* #undef HAVE_TM_ZONE */

/* Define to `int' if <sys/types.h> doesn't define.  */
/* #undef pid_t */

/* Define if the setvbuf function takes the buffering type as its second
   argument and the buffer pointer as the third, as on System V
   before release 3.  */
/* #undef SETVBUF_REVERSED */

/* Define if you have the ANSI C header files.  */


/* Define if you can safely include both <sys/time.h> and <time.h>.  */


/* Define to `int' if <sys/types.h> doesn't define.  */
/* #undef uid_t */

/* define if GUNZIP found */


/* sockaddr_in has sin_len member */
/* #undef HAVE_SIN_LEN */

/* if struct tm has tm_gmtoff structure */
/* #undef HAVE_TM_GMTOFF */

/* if struct tm has tm_zone structure */
/* #undef HAVE_TM_ZONE */

/* Define if you have the alphasort function.  */


/* Define if you have the getcwd function.  */


/* Define if you have the gethostbyname function.  */


/* Define if you have the gethostname function.  */


/* Define if you have the getpagesize function.  */


/* Define if you have the inet_aton function.  */


/* Define if you have the scandir function.  */


/* Define if you have the select function.  */


/* Define if you have the socket function.  */


/* Define if you have the strdup function.  */


/* Define if you have the strstr function.  */


/* Define if you have the <dirent.h> header file.  */


/* Define if you have the <fcntl.h> header file.  */


/* Define if you have the <getopt.h> header file.  */


/* Define if you have the <limits.h> header file.  */


/* Define if you have the <ndir.h> header file.  */
/* #undef HAVE_NDIR_H */

/* Define if you have the <sys/dir.h> header file.  */
/* #undef HAVE_SYS_DIR_H */

/* Define if you have the <sys/fcntl.h> header file.  */


/* Define if you have the <sys/ndir.h> header file.  */
/* #undef HAVE_SYS_NDIR_H */

/* Define if you have the <sys/select.h> header file.  */


/* Define if you have the <sys/time.h> header file.  */


/* Define if you have the <unistd.h> header file.  */


/* Define if you have the dmalloc library (-ldmalloc).  */
/* #undef HAVE_LIBDMALLOC */

/* Define if you have the efence library (-lefence).  */
/* #undef HAVE_LIBEFENCE */
#line 28 "W:\\work\\TypeChef\\boa\\src\\compat.h" 2


#line 1 "C:\\cygwin\\usr\\include\\sys\\time.h" 1
/* time.h -- An implementation of the standard Unix <sys/time.h> file.
   Written by Geoffrey Noer <noer@cygnus.com>
   Public domain; no rights reserved. */













  
  



  
  











  
  





































					





#line 30 "W:\\work\\TypeChef\\boa\\src\\compat.h" 2


#line 1 "C:\\cygwin\\usr\\include\\sys\\fcntl.h" 1




#line 32 "W:\\work\\TypeChef\\boa\\src\\compat.h" 2







#line 1 "C:\\cygwin\\usr\\include\\sys\\socket.h" 1
/* sys/socket.h

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006,
   2009, 2010 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */


















  
  
  
  
  
  
  
  
  
		    
  
  
  
  
		  
  
		  
  
		  
  
  
  

  





#line 36 "W:\\work\\TypeChef\\boa\\src\\compat.h" 2
#if !(defined(SO_MAXCONN))

#endif



/* Wild guess time, probably better done with configure */














#if defined(INET6)



#endif
#if !(defined(INET6))



#endif

#line 1 "C:\\cygwin\\usr\\include\\dirent.h" 1





#line 1 "C:\\cygwin\\usr\\include\\sys\\dirent.h" 1
/* Posix dirent.h for WIN32.

   Copyright 2001, 2002, 2003, 2005, 2006, 2007, 2010 Red Hat, Inc.

   This software is a copyrighted work licensed under the terms of the
   Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
   details. */

/* Including this file should not require any Windows headers.  */




#line 1 "C:\\cygwin\\usr\\include\\sys\\types.h" 1
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */






















































































  
  



  
  
































































































	


























































                                      
                                      








































  
  
  
  
  






  
  
  
  
  
  
  

  

  

  









                                  
                                  























  






  

  


  
  


  

  







  

  








  
  











  

  














  

  








#line 14 "C:\\cygwin\\usr\\include\\sys\\dirent.h" 2
#line 1 "C:\\cygwin\\usr\\include\\limits.h" 1
/* limits.h

   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
   2008 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */



























































































































































































































































































































































































































































































#line 15 "C:\\cygwin\\usr\\include\\sys\\dirent.h" 2





struct dirent
{
  long __d_version;			/* Used internally */
  __ino64_t d_ino;
  unsigned char d_type;
  unsigned char __d_unused1[3];
  __uint32_t __d_internal1;
  char d_name[255 + 1];
};







typedef struct __DIR
{
  /* This is first to set alignment in non _COMPILING_NEWLIB case.  */
  unsigned long __d_cookie;
  struct dirent *__d_dirent;
  char *__d_dirname;			/* directory name with trailing '*' */
  long __d_position;			/* used by telldir/seekdir */
  int __d_fd;
  unsigned __d_internal;
  void *__handle;
  void *__fh;
  unsigned __flags;
} DIR;


DIR *opendir (const char *);
DIR *fdopendir (int);
struct dirent *readdir (DIR *);
int readdir_r (DIR *, struct dirent *, struct dirent **);
void rewinddir (DIR *);
int closedir (DIR *);

int dirfd (DIR *);



long telldir (DIR *);
void seekdir (DIR *, long loc);

int scandir (const char *__dir,
	     struct dirent ***__namelist,
	     int (*select) (const struct dirent *),
	     int (*compar) (const struct dirent **, const struct dirent **));

int alphasort (const struct dirent **__a, const struct dirent **__b);

/* File types for `d_type'.  */
enum
{
  DT_UNKNOWN = 0,

  DT_FIFO = 1,

  DT_CHR = 2,

  DT_DIR = 4,

  DT_BLK = 6,

  DT_REG = 8,

  DT_LNK = 10,

  DT_SOCK = 12,

  DT_WHT = 14

};

/* Convert between stat structure types and directory types.  */





#line 4 "C:\\cygwin\\usr\\include\\dirent.h" 2

#if !(defined(MAXNAMLEN))

#endif




#line 52 "W:\\work\\TypeChef\\boa\\src\\compat.h" 2














/* below here, functions are provided in extras */



        
        










#if defined(HAVE_TM_GMTOFF)

#endif
#if !(defined(HAVE_TM_GMTOFF))

#endif
#if defined(HAVE_TM_ZONE)

#endif
#if !(defined(HAVE_TM_ZONE))

#endif





#line 1 "C:\\cygwin\\usr\\include\\getopt.h" 1
/*
 * Copyright (c) 1987, 1993, 1994, 1996
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by the University of
 *  California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */











extern int __declspec(dllimport) opterr;	/* if error message should be printed */
extern int __declspec(dllimport) optind;	/* index into parent argv vector */
extern int __declspec(dllimport) optopt;	/* character checked for validity */
extern int __declspec(dllimport) optreset;	/* reset getopt */
extern char __declspec(dllimport) *optarg;	/* argument associated with option */

int getopt (int, char * const *, const char *);












struct option {
	const char *name;
	int  has_arg;
	int *flag;
	int val;
};

int getopt_long (int, char *const *, const char *, const struct option *, int *);
int getopt_long_only (int, char *const *, const char *, const struct option *, int *);

#if !(defined(HAVE_DECL_GETOPT))

#endif










#line 69 "W:\\work\\TypeChef\\boa\\src\\compat.h" 2


#line 50 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "W:\\work\\TypeChef\\boa\\src\\defines.h" 1
/*
 *  Boa, an http server
 *  Copyright (C) 1995 Paul Phillips <paulp@go2net.com>
 *  Some changes Copyright (C) 1997 Jon Nelson <jnelson@boa.org>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 1, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

/* $Id: defines.h,v 1.107.2.2 2002/06/07 02:57:23 jnelson Exp $*/




/***** Change this, or use -c on the command line to specify it *****/

#if !(defined(SERVER_ROOT))

#endif
/***** Change this via the CGIPath configuration value in boa.conf *****/


/***** Change this via the SinglePostLimit configuration value in boa.conf *****/


/***** Various stuff that you may want to tweak, but probably shouldn't *****/














/***** CHANGE ANYTHING BELOW THIS LINE AT YOUR OWN PERIL *****/
/***** You will probably introduce buffer overruns unless you know
       what you are doing *****/






#if defined(ACCEPT_ON)

#endif
#if !(defined(ACCEPT_ON))

#endif
#if !(defined(SERVER_VERSION))

#endif





/******************* RESPONSE CLASSES *****************/







/******************* RESPONSE CODES ******************/































/****************** METHODS *****************/









/************** REQUEST STATUS (req->status) ***************/













/************** CGI TYPE (req->is_cgi) ******************/




/************* ALIAS TYPES (aliasp->type) ***************/





/*********** KEEPALIVE CONSTANTS (req->keepalive) *******/





/********* CGI STATUS CONSTANTS (req->cgi_status) *******/




/*********** MMAP_LIST CONSTANTS ************************/








/***************** USEFUL MACROS ************************/







/* If and when everyone has a modern gcc or other near-C99 compiler,
 * change these to static inline functions. Also note that since
 * we never fuss with O_APPEND append or O_ASYNC, we shouldn't have
 * to perform an extra system call to F_GETFL first.
 */

#if defined(BOA_USE_GETFL)


#endif
#if !(defined(BOA_USE_GETFL))


#endif




#line 51 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2
#line 1 "W:\\work\\TypeChef\\boa\\src\\globals.h" 1
/*
 *  Boa, an http server
 *  Copyright (C) 1995 Paul Phillips <paulp@go2net.com>
 *  Some changes Copyright (C) 1996,97 Larry Doolittle <ldoolitt@jlab.org>
 *  Some changes Copyright (C) 1997 Jon Nelson <jnelson@boa.org>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 1, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

/* $Id: globals.h,v 1.65.2.3 2002/07/24 03:03:59 jnelson Exp $*/




struct mmap_entry {
    dev_t dev;
    ino_t ino;
    char *mmap;
    int use_count;
    size_t len;
};

struct alias {
    char *fakename;             /* URI path to file */
    char *realname;             /* Actual path to file */
    int type;                   /* ALIAS, SCRIPTALIAS, REDIRECT */
    int fake_len;               /* strlen of fakename */
    int real_len;               /* strlen of realname */
    struct alias *next;
};

typedef struct alias alias;

struct request {                /* pending requests */
    int fd;                     /* client's socket fd */
    int status;                 /* see #defines.h */
    time_t time_last;           /* time of last succ. op. */
    char *pathname;             /* pathname of requested file */
    int simple;                 /* simple request? */
    int keepalive;              /* keepalive status */
    int kacount;                /* keepalive count */

    int data_fd;                /* fd of data */
    unsigned long filesize;     /* filesize */
    unsigned long filepos;      /* position in file */
    char *data_mem;             /* mmapped/malloced char array */
    int method;                 /* M_GET, M_POST, etc. */

    char *logline;              /* line to log file */

    char *header_line;          /* beginning of un or incompletely processed header line */
    char *header_end;           /* last known end of header, or end of processed data */
    int parse_pos;              /* how much have we parsed */
    int client_stream_pos;      /* how much have we read... */

    int buffer_start;           /* where the buffer starts */
    int buffer_end;             /* where the buffer ends */

    char *http_version;         /* HTTP/?.? of req */
    int response_status;        /* R_NOT_FOUND etc. */

    char *if_modified_since;    /* If-Modified-Since */
    time_t last_modified;       /* Last-modified: */

    char local_ip_addr[1025]; /* for virtualhost */

    /* CGI vars */

    int remote_port;            /* could be used for ident */

    char remote_ip_addr[1025]; /* after inet_ntoa */

    int is_cgi;                 /* true if CGI/NPH */
    int cgi_status;
    int cgi_env_index;          /* index into array */

    /* Agent and referer for logfiles */
    char *header_user_agent;
    char *header_referer;

    int post_data_fd;           /* fd for post data tmpfile */

    char *path_info;            /* env variable */
    char *path_translated;      /* env variable */
    char *script_name;          /* env variable */
    char *query_string;         /* env variable */
    char *content_type;         /* env variable */
    char *content_length;       /* env variable */

    struct mmap_entry *mmap_entry_var;

    struct request *next;       /* next */
    struct request *prev;       /* previous */

    /* everything below this line is kept regardless */
    char buffer[8192 + 1]; /* generic I/O buffer */
    char request_uri[1024 + 1]; /* uri */
    char client_stream[8192]; /* data from client - fit or be hosed */
    char *cgi_env[50 + 4];             /* CGI environment */

#if defined(ACCEPT_ON)
    char accept[1024]; /* Accept: fields */
#endif
};

typedef struct request request;

struct status {
    long requests;
    long errors;
};

extern struct status status;

extern char *optarg;            /* For getopt */
extern FILE *yyin;              /* yacc input */

extern request *request_ready;  /* first in ready list */
extern request *request_block;  /* first in blocked list */
extern request *request_free;   /* first in free list */

extern _types_fd_set block_read_fdset; /* fds blocked on read */
extern _types_fd_set block_write_fdset; /* fds blocked on write */

/* global server variables */

extern char *access_log_name;
extern char *error_log_name;
extern char *cgi_log_name;
extern int cgi_log_fd;
extern int use_localtime;

extern int server_port;
extern uid_t server_uid;
extern gid_t server_gid;
extern char *server_admin;
extern char *server_root;
extern char *server_name;
extern char *server_ip;
extern int max_fd;
extern int devnullfd;

extern char *document_root;
extern char *user_dir;
extern char *directory_index;
extern char *default_type;
extern char *dirmaker;
extern char *mime_types;
extern char *cachedir;

extern char *tempdir;

extern char *cgi_path;
extern int single_post_limit;

extern int ka_timeout;
extern int ka_max;

extern int sighup_flag;
extern int sigchld_flag;
extern int sigalrm_flag;
extern int sigterm_flag;
extern time_t start_time;

extern int pending_requests;
extern long int max_connections;

extern int verbose_cgi_logs;

extern int backlog;
extern time_t current_time;

extern int virtualhost;

extern int total_connections;

extern sigjmp_buf env;
extern int handle_sigbus;


#line 52 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2

/* alias */
void add_alias(char *fakename, char *realname, int script);
int translate_uri(request * req);
int init_script_alias(request * req, alias * current, int uri_len);
void dump_alias(void);

/* config */
void read_config_files(void);

/* escape */
#line 1 "W:\\work\\TypeChef\\boa\\src\\escape.h" 1
/*
 *  Boa, an http server
 *  Copyright (C) 1995 Paul Phillips <paulp@go2net.com>
 *  Copyright (C) 2001 Jon Nelson <jnelson@boa.org>
 *  Copyright (C) 2001 Larry Doolittle <ldoolitt@boa.org>

 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 1, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

/* $Id: escape.h,v 1.18 2002/01/31 03:12:21 jnelson Exp $ */

#line 1 "W:\\work\\TypeChef\\boa\\src\\config.h" 1
/* config.h.  Generated automatically by configure.  */
/* config.h.in.  Generated automatically from configure.in by autoheader.  */

/* Define to empty if the keyword does not work.  */
/* #undef const */

/* Define to `int' if <sys/types.h> doesn't define.  */
/* #undef gid_t */

/* Define if you have a working `mmap' system call.  */
/* #undef HAVE_MMAP */

/* Define if you have <sys/wait.h> that is POSIX.1 compatible.  */


/* Define if your struct tm has tm_zone.  */
/* #undef HAVE_TM_ZONE */

/* Define to `int' if <sys/types.h> doesn't define.  */
/* #undef pid_t */

/* Define if the setvbuf function takes the buffering type as its second
   argument and the buffer pointer as the third, as on System V
   before release 3.  */
/* #undef SETVBUF_REVERSED */

/* Define if you have the ANSI C header files.  */


/* Define if you can safely include both <sys/time.h> and <time.h>.  */


/* Define to `int' if <sys/types.h> doesn't define.  */
/* #undef uid_t */

/* define if GUNZIP found */


/* sockaddr_in has sin_len member */
/* #undef HAVE_SIN_LEN */

/* if struct tm has tm_gmtoff structure */
/* #undef HAVE_TM_GMTOFF */

/* if struct tm has tm_zone structure */
/* #undef HAVE_TM_ZONE */

/* Define if you have the alphasort function.  */


/* Define if you have the getcwd function.  */


/* Define if you have the gethostbyname function.  */


/* Define if you have the gethostname function.  */


/* Define if you have the getpagesize function.  */


/* Define if you have the inet_aton function.  */


/* Define if you have the scandir function.  */


/* Define if you have the select function.  */


/* Define if you have the socket function.  */


/* Define if you have the strdup function.  */


/* Define if you have the strstr function.  */


/* Define if you have the <dirent.h> header file.  */


/* Define if you have the <fcntl.h> header file.  */


/* Define if you have the <getopt.h> header file.  */


/* Define if you have the <limits.h> header file.  */


/* Define if you have the <ndir.h> header file.  */
/* #undef HAVE_NDIR_H */

/* Define if you have the <sys/dir.h> header file.  */
/* #undef HAVE_SYS_DIR_H */

/* Define if you have the <sys/fcntl.h> header file.  */


/* Define if you have the <sys/ndir.h> header file.  */
/* #undef HAVE_SYS_NDIR_H */

/* Define if you have the <sys/select.h> header file.  */


/* Define if you have the <sys/time.h> header file.  */


/* Define if you have the <unistd.h> header file.  */


/* Define if you have the dmalloc library (-ldmalloc).  */
/* #undef HAVE_LIBDMALLOC */

/* Define if you have the efence library (-lefence).  */
/* #undef HAVE_LIBEFENCE */
#line 27 "W:\\work\\TypeChef\\boa\\src\\escape.h" 2

/* Highest character number that can possibly be passed through un-escaped */


#if !(defined(NEEDS_ESCAPE_SHIFT))

#endif




/* Assume variable shift is fast, otherwise this could be a table lookup */


/* Newer compilers could use an inline function.
 * This macro works great, as long as you pass unsigned int or unsigned char.
 */


extern unsigned long _needs_escape[(128+(1<<5)-1)/(1<<5)];
void build_needs_escape(void);
#line 64 "W:\\work\\TypeChef\\boa\\src\\boa.h" 2

/* get */

int init_get(request * req);
int process_get(request * req);
int get_dir(request * req, struct stat *statbuf);

/* hash */
unsigned get_mime_hash_value(char *extension);
char *get_mime_type(char *filename);
char *get_home_dir(char *name);
void dump_mime(void);
void dump_passwd(void);
void show_hash_stats(void);

/* log */
void open_logs(void);
void close_access_log(void);
void log_access(request * req);
void log_error_doc(request * req);
void boa_perror(request * req, char *message);
void log_error_time(void);
void log_error_mesg(char *file, int line, char *mesg);

/* queue */
void block_request(request * req);
void ready_request(request * req);
void dequeue(request ** head, request * req);
void enqueue(request ** head, request * req);

/* read */
int read_header(request * req);
int read_body(request * req);
int write_body(request * req);

/* request */
request *new_request(void);
void get_request(int);
void process_requests(int server_s);
int process_header_end(request * req);
int process_header_line(request * req);
int process_logline(request * req);
int process_option_line(request * req);
void add_accept_header(request * req, char *mime_type);
void free_requests(void);

/* response */
void print_ka_phrase(request * req);
void print_content_type(request * req);
void print_content_length(request * req);
void print_last_modified(request * req);
void print_http_headers(request * req);

void send_r_request_ok(request * req); /* 200 */
void send_r_moved_perm(request * req, char *url); /* 301 */
void send_r_moved_temp(request * req, char *url, char *more_hdr); /* 302 */
void send_r_not_modified(request * req); /* 304 */
void send_r_bad_request(request * req); /* 400 */
void send_r_unauthorized(request * req, char *name); /* 401 */
void send_r_forbidden(request * req); /* 403 */
void send_r_not_found(request * req); /* 404 */
void send_r_error(request * req); /* 500 */
void send_r_not_implemented(request * req); /* 501 */
void send_r_bad_gateway(request * req); /* 502 */
void send_r_service_unavailable(request * req); /* 503 */
void send_r_bad_version(request * req); /* 505 */

/* cgi */
void create_common_env(void);
void clear_common_env(void);
int add_cgi_env(request * req, char *key, char *value, int http_prefix);
int complete_env(request * req);
void create_argv(request * req, char **aargv);
int init_cgi(request * req);

/* signals */
void init_signals(void);
void sighup_run(void);
void sigchld_run(void);
void sigalrm_run(void);
void sigterm_stage1_run(int);
void sigterm_stage2_run();

/* util.c */
void clean_pathname(char *pathname);
char *get_commonlog_time(void);
void rfc822_time_buf(char *buf, time_t s);
char *simple_itoa(unsigned int i);
int boa_atoi(char *s);
char *escape_string(char *inp, char *buf);
int month2int(char *month);
int modified_since(time_t * mtime, char *if_modified_since);
char *to_upper(char *str);
int unescape_uri(char *uri, char **query_string);
int create_temporary_file(short want_unlink, char *storage, int size);
char * normalize_path(char *path);
int real_set_block_fd(int fd);
int real_set_nonblock_fd(int fd);

/* buffer */
int req_write(request * req, char *msg);
void reset_output_buffer(request *req);
int req_write_escape_http(request * req, char *msg);
int req_write_escape_html(request * req, char *msg);
int req_flush(request * req);
char *escape_uri(char *uri);

/* timestamp */
void timestamp(void);

/* mmap_cache */
struct mmap_entry *find_mmap(int data_fd, struct stat *s);
void release_mmap(struct mmap_entry *e);

/* sublog */
int open_gen_fd(char *spec);
int process_cgi_header(request * req);

/* pipe */
int read_from_pipe(request * req);
int write_from_pipe(request * req);

/* ip */
int bind_server(int server_s, char *ip);
char *ascii_sockaddr(struct 
#if defined(INET6)
sockaddr_storage
#endif
#if !(defined(INET6))
sockaddr_in
#endif
 *s, char *dest, int len);
int net_port(struct 
#if defined(INET6)
sockaddr_storage
#endif
#if !(defined(INET6))
sockaddr_in
#endif
 *s);

/* select */
void select_loop(int server_s);


#line 28 "W:\\work\\TypeChef\\boa\\src\\util.c" 2





const char month_tab[48] =
    "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ";
const char day_tab[] = "Sun,Mon,Tue,Wed,Thu,Fri,Sat,";

/*
 * Name: clean_pathname
 *
 * Description: Replaces unsafe/incorrect instances of:
 *  //[...] with /
 *  /./ with /
 *  /../ with / (technically not what we want, but browsers should deal
 *   with this, not servers)
 */

void clean_pathname(char *pathname)
{
    char *cleanpath, c;

    cleanpath = pathname;
    while ((c = *pathname++)) {
        if (c == '/') {
            while (1) {
                if (*pathname == '/')
                    pathname++;
                else if (*pathname == '.' && *(pathname + 1) == '/')
                    pathname += 2;
                else if (*pathname == '.' && *(pathname + 1) == '.' &&
                         *(pathname + 2) == '/') {
                    pathname += 3;
                } else
                    break;
            }
            c = '/';
        }
        *cleanpath++ = c;
    }

    *cleanpath = '\0';
}

/*
 * Name: get_commonlog_time
 *
 * Description: Returns the current time in common log format in a static
 * char buffer.
 *
 * commonlog time is exactly 25 characters long
 * because this is only used in logging, we add " [" before and "] " after
 * making 29 characters
 * "[27/Feb/1998:20:20:04 +0000] "
 *
 * Constrast with rfc822 time:
 * "Sun, 06 Nov 1994 08:49:37 GMT"
 *
 * Altered 10 Jan 2000 by Jon Nelson ala Drew Streib for non UTC logging
 *
 */

char *get_commonlog_time(void)
{
    struct tm *t;
    char *p;
    unsigned int a;
    static char buf[30];
    int time_offset;

    if (use_localtime) {
        t = localtime(&current_time);
        time_offset = 
#if defined(HAVE_TM_GMTOFF)
t->tm_gmtoff
#endif
#if !(defined(HAVE_TM_GMTOFF))
timezone
#endif
;
    } else {
        t = gmtime(&current_time);
        time_offset = 0;
    }

    p = buf + 29;
    *p-- = '\0';
    *p-- = ' ';
    *p-- = ']';
    a = abs(time_offset / 60);
    *p-- = '0' + a % 10;
    a /= 10;
    *p-- = '0' + a % 6;
    a /= 6;
    *p-- = '0' + a % 10;
    *p-- = '0' + a / 10;
    *p-- = (time_offset >= 0) ? '+' : '-';
    *p-- = ' ';

    a = t->tm_sec;
    *p-- = '0' + a % 10;
    *p-- = '0' + a / 10;
    *p-- = ':';
    a = t->tm_min;
    *p-- = '0' + a % 10;
    *p-- = '0' + a / 10;
    *p-- = ':';
    a = t->tm_hour;
    *p-- = '0' + a % 10;
    *p-- = '0' + a / 10;
    *p-- = ':';
    a = 1900 + t->tm_year;
    while (a) {
        *p-- = '0' + a % 10;
        a /= 10;
    }
    /* p points to an unused spot */
    *p-- = '/';
    p -= 2;
    memcpy(p--, month_tab + 4 * (t->tm_mon), 3);
    *p-- = '/';
    a = t->tm_mday;
    *p-- = '0' + a % 10;
    *p-- = '0' + a / 10;
    *p = '[';
    return p;                   /* should be same as returning buf */
}

/*
 * Name: month2int
 *
 * Description: Turns a three letter month into a 0-11 int
 *
 * Note: This function is from wn-v1.07 -- it's clever and fast
 */

int month2int(char *monthname)
{
    switch (*monthname) {
    case 'A':
        return (*++monthname == 'p' ? 3 : 7);
    case 'D':
        return (11);
    case 'F':
        return (1);
    case 'J':
        if (*++monthname == 'a')
            return (0);
        return (*++monthname == 'n' ? 5 : 6);
    case 'M':
        return (*(monthname + 2) == 'r' ? 2 : 4);
    case 'N':
        return (10);
    case 'O':
        return (9);
    case 'S':
        return (8);
    default:
        return (-1);
    }
}

/*
 * Name: modified_since
 * Description: Decides whether a file's mtime is newer than the
 * If-Modified-Since header of a request.
 *

 Sun, 06 Nov 1994 08:49:37 GMT    ; RFC 822, updated by RFC 1123
 Sunday, 06-Nov-94 08:49:37 GMT   ; RFC 850, obsoleted by RFC 1036
 Sun Nov  6 08:49:37 1994         ; ANSI C's asctime() format
 31 September 2000 23:59:59 GMT   ; non-standard

 * RETURN VALUES:
 *  0: File has not been modified since specified time.
 *  1: File has been.
 * -1: Error!
 */

int modified_since(time_t * mtime, char *if_modified_since)
{
    struct tm *file_gmt;
    char *ims_info;
    char monthname[10 + 1];
    int day, month, year, hour, minute, second;
    int comp;

    ims_info = if_modified_since;
    while (*ims_info != ' ' && *ims_info != '\0')
        ++ims_info;
    if (*ims_info != ' ')
        return -1;

    /* the pre-space in the third scanf skips whitespace for the string */
    if (sscanf(ims_info, "%d %3s %d %d:%d:%d GMT", /* RFC 1123 */
               &day, monthname, &year, &hour, &minute, &second) == 6);
    else if (sscanf(ims_info, "%d-%3s-%d %d:%d:%d GMT", /* RFC 1036 */
                    &day, monthname, &year, &hour, &minute, &second) == 6)
        year += 1900;
    else if (sscanf(ims_info, " %3s %d %d:%d:%d %d", /* asctime() format */
                    monthname, &day, &hour, &minute, &second, &year) == 6);
    /*  allow this non-standard date format: 31 September 2000 23:59:59 GMT */
    /* NOTE: Use if_modified_since here, because the date *starts*
     *       with the day, versus a throwaway item
     */
    else if (sscanf(if_modified_since, "%d %10s %d %d:%d:%d GMT",
                    &day, monthname, &year, &hour, &minute, &second) == 6);
    else {
        log_error_time();
        fprintf((_impure_ptr->_stderr), "Error in %s, line %d: Unable to sscanf \"%s\"\n",
                "W:\\work\\TypeChef\\boa\\src\\util.c", 219, ims_info);
        return -1;              /* error */
    }

    file_gmt = gmtime(mtime);
    month = month2int(monthname);

    /* Go through from years to seconds -- if they are ever unequal,
     we know which one is newer and can return */

    if ((comp = 1900 + file_gmt->tm_year - year))
        return (comp > 0);
    if ((comp = file_gmt->tm_mon - month))
        return (comp > 0);
    if ((comp = file_gmt->tm_mday - day))
        return (comp > 0);
    if ((comp = file_gmt->tm_hour - hour))
        return (comp > 0);
    if ((comp = file_gmt->tm_min - minute))
        return (comp > 0);
    if ((comp = file_gmt->tm_sec - second))
        return (comp > 0);

    return 0;                   /* this person must really be into the latest/greatest */
}


/*
 * Name: to_upper
 *
 * Description: Turns a string into all upper case (for HTTP_ header forming)
 * AND changes - into _
 */

char *to_upper(char *str)
{
    char *start = str;

    while (*str) {
        if (*str == '-')
            *str = '_';
        else
            *str = toupper(*str);

        str++;
    }

    return start;
}

/*
 * Name: unescape_uri
 *
 * Description: Decodes a uri, changing %xx encodings with the actual
 * character.  The query_string should already be gone.
 *
 * Return values:
 *  1: success
 *  0: illegal string
 */

int unescape_uri(char *uri, char ** query_string)
{
    char c, d;
    char *uri_old;

    uri_old = uri;

    while ((c = *uri_old)) {
        if (c == '%') {
            uri_old++;
            if ((c = *uri_old++) && (d = *uri_old++))
                *uri++ = (((c >= 'A') ? (((c & 0xdf) - 'A') + 10) : (c - '0')) * 16) + (((d >= 'A') ? (((d & 0xdf) - 'A') + 10) : (d - '0')));
            else
                return 0;       /* NULL in chars to be decoded */
        } else if (c == '?') { /* query string */
            if (query_string)
                *query_string = ++uri_old;
            /* stop here */
            *uri = '\0';
            return(1);
            break;
        } else if (c == '#') { /* fragment */
            /* legal part of URL, but we do *not* care.
             * However, we still have to look for the query string */
            if (query_string) {
                ++uri_old;
                while((c = *uri_old)) {
                    if (c == '?') {
                        *query_string = ++uri_old;
                        break;
                    }
                    ++uri_old;
                }
            }
            break;
        } else {
            *uri++ = c;
            uri_old++;
        }
    }

    *uri = '\0';
    return 1;
}

/* rfc822 (1123) time is exactly 29 characters long
 * "Sun, 06 Nov 1994 08:49:37 GMT"
 */

void rfc822_time_buf(char *buf, time_t s)
{
    struct tm *t;
    char *p;
    unsigned int a;

    if (!s) {
        t = gmtime(&current_time);
    } else
        t = gmtime(&s);

    p = buf + 28;
    /* p points to the last char in the buf */

    p -= 3;
    /* p points to where the ' ' will go */
    memcpy(p--, " GMT", 4);

    a = t->tm_sec;
    *p-- = '0' + a % 10;
    *p-- = '0' + a / 10;
    *p-- = ':';
    a = t->tm_min;
    *p-- = '0' + a % 10;
    *p-- = '0' + a / 10;
    *p-- = ':';
    a = t->tm_hour;
    *p-- = '0' + a % 10;
    *p-- = '0' + a / 10;
    *p-- = ' ';
    a = 1900 + t->tm_year;
    while (a) {
        *p-- = '0' + a % 10;
        a /= 10;
    }
    /* p points to an unused spot to where the space will go */
    p -= 3;
    /* p points to where the first char of the month will go */
    memcpy(p--, month_tab + 4 * (t->tm_mon), 4);
    *p-- = ' ';
    a = t->tm_mday;
    *p-- = '0' + a % 10;
    *p-- = '0' + a / 10;
    *p-- = ' ';
    p -= 3;
    memcpy(p, day_tab + t->tm_wday * 4, 4);
}

char *simple_itoa(unsigned int i)
{
    /* 21 digits plus null terminator, good for 64-bit or smaller ints
     * for bigger ints, use a bigger buffer!
     *
     * 4294967295 is, incidentally, MAX_UINT (on 32bit systems at this time)
     * and is 10 bytes long
     */
    static char local[22];
    char *p = &local[21];
    *p-- = '\0';
    do {
        *p-- = '0' + i % 10;
        i /= 10;
    } while (i > 0);
    return p + 1;
}

/* I don't "do" negative conversions
 * Therefore, -1 indicates error
 */

int boa_atoi(char *s)
{
    int retval;
    char *reconv;

    if (!(((__ctype_ptr__+sizeof(""[*s]))[(int)(*s)])&04))
        return -1;

    retval = atoi(s);
    if (retval < 0)
        return -1;

    reconv = simple_itoa(retval);
    if (memcmp(s,reconv,strlen(s)) != 0) {
        return -1;
    }
    return retval;
}

int create_temporary_file(short want_unlink, char *storage, int size)
{
    static char boa_tempfile[4096 + 1];
    int fd;

    snprintf(boa_tempfile, 4096,
             "%s/boa-temp.XXXXXX", tempdir);

    /* open temp file */
    fd = mkstemp(boa_tempfile);
    if (fd == -1) {
        log_error_time();
        perror("mkstemp");
        return 0;
    }

    if (storage != 0) {
        int len = strlen(boa_tempfile);

        if (len < size) {
            memcpy(storage, boa_tempfile, len + 1);
        } else {
            close(fd);
            fd = 0;
            log_error_time();
            fprintf((_impure_ptr->_stderr), "not enough memory for memcpy in storage\n");
            want_unlink = 1;
        }
    }

    if (want_unlink) {
        if (unlink(boa_tempfile) == -1) {
            close(fd);
            fd = 0;
            log_error_time();
            fprintf((_impure_ptr->_stderr), "unlink temp file\n");
        }
    }

    return (fd);
}

/*
 * Name: normalize_path
 *
 * Description: Makes sure relative paths are made absolute
 *
 */


char * normalize_path(char *path)
{
    char dirbuf[4096 * 2 + 1];
    int len1, len2;
    char *endpath;

    if (path[0] == '/') {
        endpath = strdup(path);
    } else {


        
        

        if (getcwd(dirbuf, 4096 * 2 + 1) == 0) {
            if ((*__errno()) == 34)
                perror
                    ("boa: getcwd() failed - unable to get working directory. "
                     "Aborting.");
            else if ((*__errno()) == 13)
                perror("boa: getcwd() failed - No read access in current "
                       "directory. Aborting.");
            else
                perror("boa: getcwd() failed - unknown error. Aborting.");
            exit(1);
        }

        /* OK, now the hard part. */
        len1 = strlen(dirbuf);
        len2 = strlen(path);
        if (len1 + len2 > 4096 * 2) {
            perror("boa: eek. unable to normalize pathname");
            exit(1);
        }
        if (strcmp(path,".") != 0) {
            memcpy(dirbuf + len1, "/", 1);
            memcpy(dirbuf + len1 + 1, path, len2 + 1);
        }
        /* fprintf(stderr, "boa: normalize gets \"%s\"\n", dirbuf); */

        endpath = strdup(dirbuf);
    }

    if (endpath == 0) {
        fprintf((_impure_ptr->_stderr),
                "boa: Cannot strdup path. Aborting.\n");
        exit(1);
    }
    return endpath;
}

int real_set_block_fd(int fd)
{
    int flags;

    flags = fcntl(fd, 3);
    if (flags == -1)
        return -1;

    flags &= ~0x4000;
    flags = fcntl(fd, 4, flags);
    return flags;
}

int real_set_nonblock_fd(int fd)
{
    int flags;

    flags = fcntl(fd, 3);
    if (flags == -1)
        return -1;

    flags |= 0x4000;
    flags = fcntl(fd, 4, flags);
    return flags;
}
